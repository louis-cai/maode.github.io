<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code0&#39;s notepad</title>
  <subtitle>纯洁的记事本</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="maode.github.io/"/>
  <updated>2018-02-18T05:04:40.049Z</updated>
  <id>maode.github.io/</id>
  
  <author>
    <name>Code0</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>lombok配置过程</title>
    <link href="maode.github.io/2018/02/17/180217-lombok-install/"/>
    <id>maode.github.io/2018/02/17/180217-lombok-install/</id>
    <published>2018-02-17T12:30:26.000Z</published>
    <updated>2018-02-18T05:04:40.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置Eclipse："><a href="#配置Eclipse：" class="headerlink" title="配置Eclipse："></a>配置Eclipse：</h2><ul>
<li>下载 <code>lombok.jar</code>：<a href="https://projectlombok.org/download" target="_blank" rel="external">https://projectlombok.org/download</a></li>
<li>将下载的<code>lombok.jar</code>复制到<code>eclipse.exe</code>同级目录中。</li>
<li><p>修改<code>eclipse.ini</code>文件，在文件中添加以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-javaagent:lombok.jar</div><div class="line">-Xbootclasspath/a:lombok.jar</div></pre></td></tr></table></figure>
</li>
<li><p>重启Eclipse（如果Eclipse是开启状态）。</p>
</li>
</ul>
<p>配置完成后打开Eclipse的 Help-》About Eclipse,在版权内容的末尾如果显示 lombok 的版本号等相关信息，代表配置成功了。如图：</p>
<p><img src="/assets/blogImg/180217-lombok-install.png" alt="eclipse-about"></p>
<h2 id="配置项目："><a href="#配置项目：" class="headerlink" title="配置项目："></a>配置项目：</h2><p>在项目的<code>pom.xml</code>文件中添加 lombok 依赖。<strong>注意：项目中依赖的jar版本要和Eclipse中配置的jar版本一致。</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>lombok官网：<a href="https://projectlombok.org" target="_blank" rel="external">https://projectlombok.org</a></p>
<p>暂时就这些，后面没有了！(=^ ^=)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;配置Eclipse：&quot;&gt;&lt;a href=&quot;#配置Eclipse：&quot; class=&quot;headerlink&quot; title=&quot;配置Eclipse：&quot;&gt;&lt;/a&gt;配置Eclipse：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;下载 &lt;code&gt;lombok.jar&lt;/code&gt;：&lt;a hr
    
    </summary>
    
    
      <category term="getter-setter" scheme="maode.github.io/tags/getter-setter/"/>
    
      <category term="lombok" scheme="maode.github.io/tags/lombok/"/>
    
  </entry>
  
  <entry>
    <title>英语词性及句子成分</title>
    <link href="maode.github.io/2018/02/09/180209-English-lang/"/>
    <id>maode.github.io/2018/02/09/180209-English-lang/</id>
    <published>2018-02-08T17:43:07.000Z</published>
    <updated>2018-02-09T11:32:52.794Z</updated>
    
    <content type="html"><![CDATA[<h2 id="词性缩写"><a href="#词性缩写" class="headerlink" title="词性缩写"></a>词性缩写</h2><p>prep = 介系词；前置词，preposition的缩写<br>pron = 代名词，pronoun的缩写<br>n = 名词，noun的缩写<br>v = 动词，兼指及物动词和不及物动词，verb的缩写<br>conj = 连接词 ，conjunction的缩写<br>s = 主词<br>sc = 主词补语<br>o = 受词<br>oc = 受词补语<br>vi = 不及物动词，intransitive verb的缩写<br>vt = 及物动词，transitive verb的缩写<br>aux.v = 助动词 ，auxiliary的缩写<br>a = 形容词，adjective的缩写<br>ad = 副词，adverb的缩写<br>art = 冠词，article的缩写<br>num = 数词，numeral的缩写<br>int = 感叹词，interjection的缩写<br>u = 不可数名词，uncountable noun的缩写<br>c = 可数名词，countable noun的缩写<br>pl = 复数，plural的缩写。</p>
<a id="more"></a>
<h2 id="词性介绍"><a href="#词性介绍" class="headerlink" title="词性介绍"></a>词性介绍</h2><ol>
<li><p>及物动词 (vt.)：字典里词后标有vt. 的就是及物动词。及物动词后一般必须跟有动作的对象（即宾语）。必须加宾语意思才完整的动词，就是及物动词。</p>
</li>
<li><p>不及物动词 (vi.)：不及物动词是不需要受词的动词。字典里词后标有vi. 的就是不及物动词。不及物动词后不能直接跟有动作的对象（即宾语）。若要跟宾语，必须先在其后添加上某个介词，如to,of ,at后方可跟上宾语。   </p>
</li>
<li><p>名词 Nouns (n.)：表示人或事物的名称。如： box, pen,tree,apple。</p>
</li>
<li><p>代词 Pronouns (pron.)：代替名词、数词、形容词。如：We, this, them,myself。   </p>
</li>
<li><p>形容词  Adjectives(adj.)： 用来修饰名词，表示人或事物的特征。如 good, sad, high, short   。</p>
</li>
<li><p>数词 Numerals(num.)：表示数目或顺序 one,two, first   。</p>
</li>
<li><p>动词 Verb (v.) ：表示动作或状态 Jump,sing,visit   。</p>
</li>
<li><p>副词 Adverbs（adv.)： 修饰动、形、副等词，表示动作特征 there,widely,suddenly   。</p>
</li>
<li><p>冠词 Articles (art.)： 用在名词前，帮助说明名词所指的范围 a, an, the   。</p>
</li>
<li><p>介词 Prepositions (prep.) ：用在名词或代词前，说明它与别的词的关系 in,on,down,up   。</p>
</li>
<li><p>连词 Conjunctions (conj.)： 表示人或事物的名称if,because,but 。</p>
</li>
<li><p>感叹词 Interjections (int.)： 代替名词、数词、形容词等 oh,hello,hi,yeah。</p>
</li>
</ol>
<h2 id="句子成分"><a href="#句子成分" class="headerlink" title="句子成分"></a>句子成分</h2><p>一个句子一般皆由两部分组成，即主语部分（subject group）和谓语部分（predicate group）。如：</p>
<pre><code>Professor Ward teaches English to university students.   
沃德教授给大学生教英语。  
</code></pre><p>句中的Professor Ward即是主语部分，teaches English to university students 即是谓语部分。</p>
<p>句子成分（members of the sentence ）是句子中起一定功用的组成部分。句子由各个句子成分所构成。<br>句子的组成部分，包括 <strong>主语、谓语、宾语、定语、补语、状语、表语</strong> 七种。<br><strong>主语</strong> 是句子叙述的主体，可由名词、代词、数词、名词化的形容词、不定式、动名词和主语从句等来承担。<br><strong>谓语</strong> 说明主语所发出的动作或具有的特征和状态。谓语由动词来承担。<br><strong>宾语</strong> 是动作的对象或承受者，常位于及物动词或介词后面。宾语可由名词、代词、数词、名词化的形容词、不定式、动名词、宾语从句等来担任。   </p>
<p>主语和谓语是英语句子的两大成分，除少数句子（如祈使句和感叹句等）外，一句话必须同时具有主语和谓语所表达的意思才能完整。主语是针对谓语而言的，是一句话的主题，谓语用来说明主语的情况，为主语提供信息。例如：They are working.主语是they(他们），那么他们在做什么呢？看来没有谓语are working 是不行的。在正常情况下，英语的主语和谓语的位置与汉语一致，也就是说主语在前，谓语紧跟其后。那么，哪些词语可以做主语，谓语，何时主谓倒置，主语与谓语的一致情况如何，我将一一讲述。 </p>
<h3 id="一、主语"><a href="#一、主语" class="headerlink" title="一、主语"></a>一、主语</h3><p>主语（subject） 是一句的主体，是全句的述说对象，常用名词或相当于名词的词担任，一般置于句首。如：</p>
<pre><code>⑵The plane has just taken off at the airport。   
飞机刚刚从机场起飞。   
⑶I respect his privacy。   
我尊重他的隐私权。    
</code></pre><p>主语是句子陈述的对象，说明是谁或什么。表示句子说的是”什么人”、“什么事”、“什么东西”、“什么地方”等等。    名词、代词、数词、动名词、To do不定式、一个句子 都可以做主语。  </p>
<h3 id="二、谓语"><a href="#二、谓语" class="headerlink" title="二、谓语"></a>二、谓语</h3><p>谓语是对主语动作或状态的陈述或说明，指出“做什么”和“是什么”或“怎么样”. 谓语动词的位置一般在主语之后。</p>
<h3 id="三、宾语"><a href="#三、宾语" class="headerlink" title="三、宾语"></a>三、宾语</h3><p>宾语，又称受词，是指一个动作（动词）的接受者。宾语分为直接宾语和间接宾语（间接宾语也称宾语补足语）两大类，其中直接宾语指动作的直接对象，间接宾语说明动作的非直接，但受动作影响的对象。一般而言，及物动词后面最少要有一个宾语，而该宾语通常为直接宾语，有些及物动词要求两个宾语，则这两个宾语通常一个为直接宾语，另一个为间接宾语。名词、代词、数词、动名词、To do不定式、一个句子 都可以做宾语，而to do不定式用于宾语补足语。 </p>
<h3 id="四、定语"><a href="#四、定语" class="headerlink" title="四、定语"></a>四、定语</h3><p>定语是用来修饰、限定、说明名词或代词的品质与特征的。主要有形容词此外还有名词、代词、数词、介词短语、动词不定式（短语）、分词、定语从句或相当于形容词的词、短语或句子都可以作定语。汉语中常用„……的‟表示。定语和中心语之间是修饰和被修饰、限制和被限制的关系。在汉语中，中心语与定语二者之间有的需要用结构助词“的”，有的不需要，有的可要可不要。“的”是定语的标志。 </p>
<h3 id="五、状语"><a href="#五、状语" class="headerlink" title="五、状语"></a>五、状语</h3><p>英语中，修饰动词、形容词、副词等的句子成分叫状语（adverbial）。<br>状语的功用：状语说明地点、时间、原因、目的、结果、条件、方向、程度、方式和伴随状况等。<br>状语一般由副词、介词短语、分词和分词短语、不定式或相当于副词的词或短语来担当。其位置一般放在句末，但也可放在句首或句中。   </p>
<h3 id="六、补语"><a href="#六、补语" class="headerlink" title="六、补语"></a>六、补语</h3><p>英语补语的作用对象是主语和宾语,具有鲜明的定语性描写或限制性功能,在句法上是不可或缺的。补语是起补充说明作用的成份。最常见的是宾语补足语。名词、动名词、形容词、副词、不定式、现在分词、过去分词都可以在句子中作宾补。   </p>
<h3 id="七、表语"><a href="#七、表语" class="headerlink" title="七、表语"></a>七、表语</h3><p>表语是用来说明主语的身份、性质、品性、特征和状态的，表语常由名词、形容词、副词、介词短语、不定式、动词的-ing、从句来充当，它常位于系动词（be, become, appear, seem, look ,sound, feel, get, smell等词）之后。如果句子的表语也是由一个句子充当的,那么这个充当表语的句子就叫做表语从句。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;词性缩写&quot;&gt;&lt;a href=&quot;#词性缩写&quot; class=&quot;headerlink&quot; title=&quot;词性缩写&quot;&gt;&lt;/a&gt;词性缩写&lt;/h2&gt;&lt;p&gt;prep = 介系词；前置词，preposition的缩写&lt;br&gt;pron = 代名词，pronoun的缩写&lt;br&gt;n = 名词，noun的缩写&lt;br&gt;v = 动词，兼指及物动词和不及物动词，verb的缩写&lt;br&gt;conj = 连接词 ，conjunction的缩写&lt;br&gt;s = 主词&lt;br&gt;sc = 主词补语&lt;br&gt;o = 受词&lt;br&gt;oc = 受词补语&lt;br&gt;vi = 不及物动词，intransitive verb的缩写&lt;br&gt;vt = 及物动词，transitive verb的缩写&lt;br&gt;aux.v = 助动词 ，auxiliary的缩写&lt;br&gt;a = 形容词，adjective的缩写&lt;br&gt;ad = 副词，adverb的缩写&lt;br&gt;art = 冠词，article的缩写&lt;br&gt;num = 数词，numeral的缩写&lt;br&gt;int = 感叹词，interjection的缩写&lt;br&gt;u = 不可数名词，uncountable noun的缩写&lt;br&gt;c = 可数名词，countable noun的缩写&lt;br&gt;pl = 复数，plural的缩写。&lt;/p&gt;
    
    </summary>
    
    
      <category term="English" scheme="maode.github.io/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>【转】jQuery的RESTful插件</title>
    <link href="maode.github.io/2018/02/08/180208-jquery-RESTful-plugin/"/>
    <id>maode.github.io/2018/02/08/180208-jquery-RESTful-plugin/</id>
    <published>2018-02-08T09:50:09.000Z</published>
    <updated>2018-02-18T08:53:50.227Z</updated>
    
    <content type="html"><![CDATA[<p><strong>转自：</strong> <a href="https://qtdebug.com/fe-rest/" target="_blank" rel="external">https://qtdebug.com/fe-rest/</a></p>
<p>使用 REST 风格提交请求时，Content-Type 标准的来说应该用 <strong>application/json</strong>，但是服务器端获取请求的参数时必须从 Request Body 中获取，而且有些框架对从 Request Body 中获取数据支持不好，需要我们自己实现，SpringMVC 中使用注解 <strong>@RequestBody</strong>从 Request Body 中获取数据，但不能使用 Filter 进行 XSS 过滤。</p>
<p>这里主要使用 SpringMVC 来作为后端进行介绍，SpringMVC 提供了一个 Filter <strong>HiddenHttpMethodFilter</strong>，把 Content-Type 为 <strong>application/x-www-form-urlencoded</strong> 的 POST 请求，参数中 <strong>_method</strong> 值为 <strong>PUT</strong> 的请求分发为 PUT 请求，为 <strong>DELETE</strong> 请求分发为 DELETE 请求，实现了普通表单的 REST 风格提交，这样就可以使用 <strong>@RequestParam</strong> 获取参数的值了。</p>
<p>下面结合 SpringMVC 来介绍:</p>
<ul>
<li>Content-Type 为 application/x-www-form-urlencoded + HiddenHttpMethodFilter<ul>
<li>优点: 服务器端 GET, PUT, POST, DELETE 时直接参数映射为对象，或则都使用 @RequestParam 获取参数，使用形式一致、简洁</li>
<li>缺点:<ul>
<li>不是标准的 REST 规范</li>
<li>参数是按照 key/value 的形式发送的，和普通表单的参数形式一样，有兴趣的可以在 Chrome 的 Network 中查看请求的 Headers</li>
<li>不能传递复杂对象，例如 value 又是一个 Json 对象，只能传递简单的 key/value，也就是作为参数的 Json 对象只能有一层 key/value，不过非特殊情况也够用了，普通表单能做的它都能做</li>
<li>PUT 时参数中需要带上 _method=”PUT”，DELETE 时参数中需要带上 _method=”DELETE”</li>
</ul>
</li>
</ul>
</li>
<li>Content-Type 为 application/json<ul>
<li>优点: 标准的 REST 规范，GET 处理和上面的一样，但是 POST, PUT, DELETE 的参数是序列化后的 JSON 字符串，能够传递复杂的对象</li>
<li>缺点:<ul>
<li>服务器端直接参数映射为对象，或则 GET 时使用 @RequestParam 获取参数，POST, PUT, DELETE 使用 @RequestBody 获取参数到 Map 中，然后再从 Map 中获取一个一个的参数，非常繁琐</li>
<li>GET 和 POST, PUT, DELETE 获取参数的形式不统一，一个用 @RequestParam，其他的用 @RequestBody，需要脑子转换一下</li>
<li>还有就是浏览器端 PUT, POST, DELETE 传递的 JSON 对象需要序列化后才能传给服务器端，可以使用 JSON.stringify(jsonObject) 进行序列化</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>总结下来，在 SpringMVC 中推荐使用 <code>application/x-www-form-urlencoded + HiddenHttpMethodFilter</code> 的方式实现 REST 的请求，就是为了获取参数时比较统一，当需要传递复杂的参数时，例如属性是多层嵌套的对象，Json 对象的数组，这时再使用 application/json 的方式。</p>
<p>为了简化 Rest Ajax 的访问，下面对 jQuery 的 Ajax 进行了简单的封装，例如更新用户名原始实现大致如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    url        : <span class="string">'/users/1/username'</span>,</div><div class="line">    data       : <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">name</span>: <span class="string">'Bob'</span>&#125;),</div><div class="line">    type       : <span class="string">'PUT'</span>,</div><div class="line">    dataType   : <span class="string">'json'</span>,</div><div class="line">    contentType: <span class="string">'application/json'</span></div><div class="line">&#125;)</div><div class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(result);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>如果每个 REST 的请求都像上面这样写一遍: <code>PUT</code>, <code>POST</code>, <code>DELETE</code> 时需要 <code>JSON.stringify(data)</code>, 请求不同时 type 也不同，dataType 和 contentType 是固定的，这么多限制，很容易出错。使用下面实现的 rest 插件后，简化如下，只需要关心参数和回调，不需要处理其他额外信息，而且 $.rest.update 名字也更有语义化，一看就知道是更新操作:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.rest.update(&#123;</div><div class="line">    url    : <span class="string">'/users/1/username'</span>, </div><div class="line">    data   : &#123;<span class="attr">name</span>: <span class="string">'Bob'</span>&#125;, </div><div class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(result);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="测试页面"><a href="#测试页面" class="headerlink" title="测试页面:"></a>测试页面:</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>REST<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/jquery/3.2.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/jquery.rest.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="comment">// [1] 服务器端的 GET 需要启用 UTF-8 才不会乱吗</span></span></div><div class="line"><span class="javascript">        $.rest.get(&#123;<span class="attr">url</span>: <span class="string">'/rest'</span>, <span class="attr">data</span>: &#123;<span class="attr">name</span>: <span class="string">'Alice'</span>&#125;, <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log(result);</span></div><div class="line"><span class="undefined">        &#125;&#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="comment">// [2] 普通 form 表单提交 rest Ajax 请求</span></span></div><div class="line"><span class="javascript">        $.rest.create(&#123;<span class="attr">url</span>: <span class="string">'/rest'</span>, <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log(result);</span></div><div class="line"><span class="undefined">        &#125;&#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">        $.rest.update(&#123;<span class="attr">url</span>: <span class="string">'/rest'</span>, <span class="attr">data</span>: &#123;<span class="attr">name</span>: <span class="string">'黄飞鸿'</span>, <span class="attr">age</span>: <span class="number">22</span>&#125;, <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log(result);</span></div><div class="line"><span class="undefined">        &#125;&#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">        $.rest.remove(&#123;<span class="attr">url</span>: <span class="string">'/rest'</span>, <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log(result);</span></div><div class="line"><span class="undefined">        &#125;&#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="comment">// [3] 使用 request body 传递复杂 Json 对象</span></span></div><div class="line"><span class="javascript">        $.rest.create(&#123;</span></div><div class="line"><span class="javascript">            url: <span class="string">'/rest/requestBody'</span>, </span></div><div class="line"><span class="javascript">            data: &#123;<span class="attr">name</span>: <span class="string">'Alice'</span>&#125;, </span></div><div class="line"><span class="javascript">            jsonRequestBody: <span class="literal">true</span>, </span></div><div class="line"><span class="javascript">            success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                <span class="built_in">console</span>.log(result);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">        $.rest.update(&#123;</span></div><div class="line"><span class="javascript">            url: <span class="string">'/rest/requestBody'</span>, </span></div><div class="line"><span class="javascript">            data: &#123;<span class="attr">name</span>: <span class="string">'Alice'</span>&#125;, </span></div><div class="line"><span class="javascript">            jsonRequestBody: <span class="literal">true</span>, </span></div><div class="line"><span class="javascript">            success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                <span class="built_in">console</span>.log(result);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">        $.rest.remove(&#123;</span></div><div class="line"><span class="javascript">            url: <span class="string">'/rest/requestBody'</span>, </span></div><div class="line"><span class="javascript">            data: &#123;<span class="attr">name</span>: <span class="string">'Alice'</span>&#125;, </span></div><div class="line"><span class="javascript">            jsonRequestBody: <span class="literal">true</span>, </span></div><div class="line"><span class="javascript">            success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                <span class="built_in">console</span>.log(result);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>输出:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;code: 0, data: "Alice", message: "GET handled", success: true&#125;</div><div class="line"></div><div class="line">&#123;code: 0, message: "CREATE handled", success: true&#125;</div><div class="line">&#123;code: 0, message: "DELETE handled", success: true&#125;</div><div class="line">&#123;code: 0, data: "黄飞鸿 : 22", message: "UPDATE handled", success: true&#125;</div><div class="line"></div><div class="line">&#123;code: 0, message: "UPDATE requestBody handled: &#123;\"name\":\"Alice\"&#125;", success: true&#125;</div><div class="line">&#123;code: 0, message: "CREATE requestBody handled: &#123;\"name\":\"Alice\"&#125;", success: true&#125;</div><div class="line">&#123;code: 0, message: "DELETE requestBody handled: &#123;\"name\":\"Alice\"&#125;", success: true&#125;</div></pre></td></tr></table></figure></p>
<h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><p>添加下面的 Filter 到 web.xml, <strong>servlet-name</strong> 为 DispatcherServlet 的 servlet-name，根据自己的配置进行修改:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 浏览器的 form 不支持 put, delete 等 method, 由该 filter </span></div><div class="line"><span class="comment">将 /blog?_method=delete 转换为标准的 http delete 方法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Controller 的实现:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.xtuer.controller;</div><div class="line"><span class="keyword">import</span> com.xtuer.bean.Result;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestController</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * REST 读取</span></div><div class="line"><span class="comment">     * URL: http://localhost:8080/rest</span></div><div class="line"><span class="comment">     * 参数: name</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/rest"</span>)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">restGet</span><span class="params">(@RequestParam String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Result.ok(<span class="string">"GET handled"</span>, name);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * REST 创建</span></div><div class="line"><span class="comment">     * URL: http://localhost:8080/rest</span></div><div class="line"><span class="comment">     * 参数: 无</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/rest"</span>)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">restPost</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"CREATE handled"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * REST 的更新</span></div><div class="line"><span class="comment">     * URL: http://localhost:8080/rest</span></div><div class="line"><span class="comment">     * 参数: name, age</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/rest"</span>)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">restPut</span><span class="params">(@RequestParam String name, @RequestParam <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"UPDATE handled"</span>, name + <span class="string">" : "</span> + age);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * REST 删除</span></div><div class="line"><span class="comment">     * URL: http://localhost:8080/rest</span></div><div class="line"><span class="comment">     * 参数: 无</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/rest"</span>)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">restDelete</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"DELETE handled"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * REST 创建，处理 application/json 的请求</span></div><div class="line"><span class="comment">     * URL: http://localhost:8080/rest/requestBody</span></div><div class="line"><span class="comment">     * 参数: name</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/rest/requestBody"</span>)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">restPostJsonRequestBody</span><span class="params">(@RequestBody String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"CREATE requestBody handled: "</span> + content);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * REST 更新，处理 application/json 的请求</span></div><div class="line"><span class="comment">     * URL: http://localhost:8080/rest/requestBody</span></div><div class="line"><span class="comment">     * 参数: name</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/rest/requestBody"</span>)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">restUpdateJsonRequestBody</span><span class="params">(@RequestBody String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"UPDATE requestBody handled: "</span> + content);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * REST 删除，处理 application/json 的请求</span></div><div class="line"><span class="comment">     * URL: http://localhost:8080/rest/requestBody</span></div><div class="line"><span class="comment">     * 参数: name</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/rest/requestBody"</span>)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">restDeleteJsonRequestBody</span><span class="params">(@RequestBody String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"DELETE requestBody handled: "</span> + content);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Result-java"><a href="#Result-java" class="headerlink" title="Result.java"></a>Result.java</h2><p>Result 用于统一服务器端返回的 JSON 格式，例如:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"code"</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">"message"</span>: <span class="string">"Short message"</span>,</div><div class="line">    <span class="attr">"success"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"data"</span>: &#123;</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"Alice"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.xtuer.bean;</div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONPObject;</div><div class="line"><span class="keyword">import</span> lombok.Getter;</div><div class="line"><span class="keyword">import</span> lombok.Setter;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Http Ajax 请求返回时用作返回的对象，FastJson 自动转换为 Json 字符串返回给前端。</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * 虽然同一个请求在不同情况下返回的 Result 中的 data 类型可能不同，例如 Result&lt;User&gt; </span></div><div class="line"><span class="comment"> * findUserByName(String name)，</span></div><div class="line"><span class="comment"> * 查询到用户时返回 Result 中 data 是 User 对象，查询不到用户时可返回 Result 中 data 是 String 对象，</span></div><div class="line"><span class="comment"> * 不过没关系，在我们的实现中允许这么做，好处是标志出了请求正确响应时返回的数据类型，因为这个是我们最关心的，  </span></div><div class="line"><span class="comment"> * 至于错误的类型，一般会用 String 描述，前端得到 success 为 false，大多都是把错误信息显示给用户即可。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@Setter</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> success;    <span class="comment">// 成功时为 true，失败时为 false</span></div><div class="line">    <span class="keyword">private</span> String  message;    <span class="comment">// 成功或则失败时的描述信息</span></div><div class="line">    <span class="keyword">private</span> Object  data;       <span class="comment">// 成功或则失败时的更多详细数据，一般失败时不需要</span></div><div class="line">    <span class="keyword">private</span> Integer statusCode; <span class="comment">// 状态码，一般是当 success 为 true 或者 false 时不足够表达时可使用</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Result</span><span class="params">(<span class="keyword">boolean</span> success, String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(success, message, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Result</span><span class="params">(<span class="keyword">boolean</span> success, String message, Object data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.success = success;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Result&lt;T&gt; <span class="title">ok</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;(<span class="keyword">true</span>, <span class="string">"success"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Result&lt;T&gt; <span class="title">ok</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;(<span class="keyword">true</span>, message);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Result&lt;T&gt; <span class="title">ok</span><span class="params">(String message, Object data)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;(<span class="keyword">true</span>, message, data);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Result&lt;T&gt; <span class="title">fail</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;(<span class="keyword">false</span>, <span class="string">"fail"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Result&lt;T&gt; <span class="title">fail</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;(<span class="keyword">false</span>, message);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Result&lt;T&gt; <span class="title">fail</span><span class="params">(String message, Object data)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;(<span class="keyword">false</span>, message, data);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 使用传入的回调函数名字 callback 和参数 params 构造一个 JSONP 响应格式的字符串。</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> callback 浏览器端 JSONP 回调函数的名字</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> data 参数列表</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 返回 JSONP 格式的字符串</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">jsonp</span><span class="params">(String callback, Object data)</span> </span>&#123;</div><div class="line">        JSONPObject jp = <span class="keyword">new</span> JSONPObject(callback);</div><div class="line">        jp.addParameter(data);</div><div class="line">        <span class="keyword">return</span> jp.toString();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 测试</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Result&lt;User&gt; r1 = Result.ok();</div><div class="line">        Result&lt;User&gt; r2 = Result.ok(<span class="string">"Yes"</span>, <span class="keyword">new</span> User(<span class="string">"Alice"</span>, <span class="string">"Passw0rd"</span>));</div><div class="line">        Result&lt;User&gt; r3 = Result.ok(<span class="string">"Yes"</span>, <span class="keyword">new</span> Demo(<span class="number">123456L</span>, <span class="string">"Physics"</span>));</div><div class="line">        System.out.println(JSON.toJSONString(r1));</div><div class="line">        System.out.println(JSON.toJSONString(r2));</div><div class="line">        System.out.println(JSON.toJSONString(r3));</div><div class="line">        System.out.println(r3.getData());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="附录：REST-插件-jquery-rest-js"><a href="#附录：REST-插件-jquery-rest-js" class="headerlink" title="附录：REST 插件 jquery.rest.js:"></a>附录：REST 插件 jquery.rest.js:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 执行 REST 请求的 jQuery 插件，不以 sync 开头的为异步请求，以 sync 开头的为同步请求:</span></div><div class="line"><span class="comment">     *      Get    请求调用 $.rest.get(),    $.rest.syncGet()</span></div><div class="line"><span class="comment">     *      Create 请求调用 $.rest.create(), $.rest.syncCreate()</span></div><div class="line"><span class="comment">     *      Update 请求调用 $.rest.update(), $.rest.syncUpdate()</span></div><div class="line"><span class="comment">     *      Delete 请求调用 $.rest.remove(), $.rest.syncRemove()</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * 默认使用 contentType 为 application/x-www-form-urlencoded 的方式提交请求，只能传递简单的 </span></div><div class="line"><span class="comment">     * key/value，就是普通的 form 表单提交，如果想要向服务器传递复杂的 json 对象，可以使用 </span></div><div class="line"><span class="comment">     * contentType 为 application/json 的格式，</span></div><div class="line"><span class="comment">     * 此时只要设置请求的参数 jsonRequestBody 为 true 即可，例如</span></div><div class="line"><span class="comment">     *      $.rest.update(&#123;</span></div><div class="line"><span class="comment">     *          url: '/rest', </span></div><div class="line"><span class="comment">     *          data: &#123;name: 'Alice'&#125;, </span></div><div class="line"><span class="comment">     *          jsonRequestBody: true, </span></div><div class="line"><span class="comment">     *          success: function(result) &#123;</span></div><div class="line"><span class="comment">     *              console.log(result);</span></div><div class="line"><span class="comment">     *      &#125;&#125;);</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * 调用示例:</span></div><div class="line"><span class="comment">     *      // 异步请求</span></div><div class="line"><span class="comment">     *      $.rest.get(&#123;url: '/rest', data: &#123;name: 'Alice'&#125;, success: function(result) &#123;</span></div><div class="line"><span class="comment">     *          console.log(result);</span></div><div class="line"><span class="comment">     *      &#125;&#125;);</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     *      // 同步请求</span></div><div class="line"><span class="comment">     *      $.rest.syncGet(&#123;url: '/rest', data: &#123;name: 'Alice'&#125;, success: function(result) &#123;</span></div><div class="line"><span class="comment">     *          console.log(result);</span></div><div class="line"><span class="comment">     *      &#125;&#125;);</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     *      // url 中的 bookId 会被替换为 urlParams 中的 bookId</span></div><div class="line"><span class="comment">     *      $.rest.update(&#123;</span></div><div class="line"><span class="comment">     *          url: '/rest/books/&#123;bookId&#125;', </span></div><div class="line"><span class="comment">     *          urlParams: &#123;bookId: 23&#125;, data: &#123;name: 'C&amp;S'&#125;, </span></div><div class="line"><span class="comment">     *          success: function(result) &#123;</span></div><div class="line"><span class="comment">     *              console.log(result);</span></div><div class="line"><span class="comment">     *          &#125;, </span></div><div class="line"><span class="comment">     *          fail: function(failResponse) &#123;&#125;</span></div><div class="line"><span class="comment">     *      &#125;);</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    $.rest = &#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 使用 Ajax 的方式执行 REST 的 GET 请求(服务器响应的数据根据 REST 的规范，必须是 Json 对象，否则</span></div><div class="line"><span class="comment">         * 浏览器端会解析出错)。</span></div><div class="line"><span class="comment">         * 如果没有设置 fail 的回调函数，则默认会把错误信息打印到控制台，可自定义 $.rest.defaultFail 函数</span></div><div class="line"><span class="comment">         * 例如使用弹窗显示错误信息。</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * 以下几个 REST 的函数 $.rest.create(), $.rest.update(), $.rest.remove() 只是请求的 HTTP 方法</span></div><div class="line"><span class="comment">         * 和 data 处理不一样，</span></div><div class="line"><span class="comment">         * 其他的都是相同的，所以就不再重复注释说明了。</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * @param &#123;Json&#125; options 有以下几个选项:</span></div><div class="line"><span class="comment">         *               &#123;String&#125;   url       请求的 URL        (必选)</span></div><div class="line"><span class="comment">         *               &#123;Json&#125;     urlParams URL 中的变量，例如 /rest/users/&#123;id&#125;，其中 &#123;id&#125; 为要</span></div><div class="line"><span class="comment">         *                                    被urlParams.id 替换的部分(可选)</span></div><div class="line"><span class="comment">         *               &#123;Json&#125;     data      请求的参数         (可选)</span></div><div class="line"><span class="comment">         *               &#123;Boolean&#125;  jsonRequestBody 是否使用 application/json 的方式进行请求，</span></div><div class="line"><span class="comment">         *                                          默认为 false 不使用(可选).</span></div><div class="line"><span class="comment">         *               &#123;Function&#125; success   请求成功时的回调函数(可选)</span></div><div class="line"><span class="comment">         *               &#123;Function&#125; fail      请求失败时的回调函数(可选)</span></div><div class="line"><span class="comment">         *               &#123;Function&#125; complete  请求完成后的回调函数(可选)</span></div><div class="line"><span class="comment">         * @return 没有返回值</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">            options.httpMethod = <span class="string">'GET'</span>;</div><div class="line">            <span class="keyword">this</span>.sendRequest(options);</div><div class="line">        &#125;,</div><div class="line">        create: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">            options.data = options.data || &#123;&#125;;</div><div class="line">            options.httpMethod = <span class="string">'POST'</span>;</div><div class="line">            <span class="keyword">this</span>.sendRequest(options);</div><div class="line">        &#125;,</div><div class="line">        update: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">            options.data = options.data || &#123;&#125;;</div><div class="line">            options.httpMethod   = <span class="string">'POST'</span>;</div><div class="line">            options.data._method = <span class="string">'PUT'</span>; <span class="comment">// SpringMvc HiddenHttpMethodFilter 的 PUT 请求</span></div><div class="line">            <span class="keyword">this</span>.sendRequest(options);</div><div class="line">        &#125;,</div><div class="line">        remove: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">            options.data = options.data || &#123;&#125;;</div><div class="line">            options.httpMethod   = <span class="string">'POST'</span>;</div><div class="line">            options.data._method = <span class="string">'DELETE'</span>; <span class="comment">// SpringMvc HiddenHttpMethodFilter 的 DELETE 请求</span></div><div class="line">            <span class="keyword">this</span>.sendRequest(options);</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">// 阻塞请求</span></div><div class="line">        syncGet: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">            options.async = <span class="literal">false</span>;</div><div class="line">            <span class="keyword">this</span>.get(options);</div><div class="line">        &#125;,</div><div class="line">        syncCreate: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">            options.async = <span class="literal">false</span>;</div><div class="line">            <span class="keyword">this</span>.create(options);</div><div class="line">        &#125;,</div><div class="line">        syncUpdate: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">            options.async = <span class="literal">false</span>;</div><div class="line">            <span class="keyword">this</span>.update(options);</div><div class="line">        &#125;,</div><div class="line">        syncRemove: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">            options.async = <span class="literal">false</span>;</div><div class="line">            <span class="keyword">this</span>.remove(options);</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">// 默认把错误打印到控制台，可以</span></div><div class="line">        defaultFail: <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.error(error.responseText);</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 执行 Ajax 请求，不推荐直接调用这个方法.</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * @param &#123;Json&#125; options 有以下几个选项:</span></div><div class="line"><span class="comment">         *               &#123;String&#125;   url        请求的 URL        (必选)</span></div><div class="line"><span class="comment">         *               &#123;String&#125;   httpMethod 请求的方式，有 GET, PUT, POST, DELETE (必选)</span></div><div class="line"><span class="comment">         *               &#123;Json&#125;     urlParams  URL 中的变量      (可选)</span></div><div class="line"><span class="comment">         *               &#123;Json&#125;     data       请求的参数        (可选)</span></div><div class="line"><span class="comment">         *               &#123;Boolean&#125;  async      默认为异步方式     (可选)</span></div><div class="line"><span class="comment">         *               &#123;Boolean&#125;  jsonRequestBody 是否使用 application/json 的方式进行请求，</span></div><div class="line"><span class="comment">         *                                          默认为 false 不使用(可选).</span></div><div class="line"><span class="comment">         *               &#123;Function&#125; success    请求成功时的回调函数(可选)</span></div><div class="line"><span class="comment">         *               &#123;Function&#125; fail       请求失败时的回调函数(可选)</span></div><div class="line"><span class="comment">         *               &#123;Function&#125; complete   请求完成后的回调函数(可选)</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        sendRequest: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">            <span class="comment">// 默认设置</span></div><div class="line">            <span class="keyword">var</span> defaults = &#123;</div><div class="line">                data           : &#123;&#125;,</div><div class="line">                <span class="keyword">async</span>          : <span class="literal">true</span>,</div><div class="line">                jsonRequestBody: <span class="literal">false</span>,</div><div class="line">                contentType    : <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>,</div><div class="line">                success        : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">                fail           : <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123; self.defaultFail(error); &#125;,</div><div class="line">                complete       : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">            &#125;;</div><div class="line">            <span class="comment">// 使用 jQuery.extend 合并用户传递的 options 和 defaults</span></div><div class="line">            <span class="keyword">var</span> settings = $.extend(<span class="literal">true</span>, &#123;&#125;, defaults, options);</div><div class="line">            <span class="comment">// 使用 application/json 的方式进行请求时，需要处理相关参数</span></div><div class="line">            <span class="keyword">if</span> (settings.jsonRequestBody) &#123;</div><div class="line">                <span class="keyword">if</span> (settings.data._method === <span class="string">'PUT'</span>) &#123;</div><div class="line">                    settings.httpMethod = <span class="string">'PUT'</span>;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (settings.data._method === <span class="string">'DELETE'</span>) &#123;</div><div class="line">                    settings.httpMethod = <span class="string">'DELETE'</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">delete</span> settings.data._method; <span class="comment">// 没必要传递一个无用的参数</span></div><div class="line">                settings.contentType = <span class="string">'application/json;charset=UTF-8'</span>;</div><div class="line">                <span class="comment">// 非 GET 时 json 对象需要序列化</span></div><div class="line">                <span class="keyword">if</span> (settings.data.httpMethod !== <span class="string">'GET'</span>) &#123;</div><div class="line">                    settings.data = <span class="built_in">JSON</span>.stringify(settings.data);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">/** </span></div><div class="line"><span class="comment">             * 替换 url 中的变量，例如 /rest/users/&#123;id&#125;, </span></div><div class="line"><span class="comment">             * 其中 &#123;id&#125; 为要被 settings.urlParams.id 替换的部分</span></div><div class="line"><span class="comment">             */</span></div><div class="line">            <span class="keyword">if</span> (settings.urlParams) &#123;</div><div class="line">                settings.url = settings.url.replace(<span class="regexp">/\&#123;\&#123;|\&#125;\&#125;|\&#123;(\w+)\&#125;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">m, n</span>) </span>&#123;</div><div class="line">                    <span class="comment">// m 是正则中捕捉的组 $0，n 是 $1，function($0, $1, $2, ...)</span></div><div class="line">                    <span class="keyword">if</span> (m == <span class="string">'&#123;&#123;'</span>) &#123; <span class="keyword">return</span> <span class="string">'&#123;'</span>; &#125;</div><div class="line">                    <span class="keyword">if</span> (m == <span class="string">'&#125;&#125;'</span>) &#123; <span class="keyword">return</span> <span class="string">'&#125;'</span>; &#125;</div><div class="line">                    <span class="keyword">return</span> settings.urlParams[n];</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 执行 AJAX 请求</span></div><div class="line">            $.ajax(&#123;</div><div class="line">                url        : settings.url,</div><div class="line">                data       : settings.data,</div><div class="line">                <span class="keyword">async</span>      : settings.async,</div><div class="line">                type       : settings.httpMethod,</div><div class="line">                dataType   : <span class="string">'json'</span>, <span class="comment">// 服务器的响应使用 JSON 格式</span></div><div class="line">                contentType: settings.contentType,</div><div class="line">                <span class="comment">/**</span></div><div class="line"><span class="comment">                 *服务器抛异常时，有时 Windows 的 Tomcat 环境下竟然取不到 header X-Requested-With, 但Mac</span></div><div class="line"><span class="comment">                 *下没问题，正常请求时都是好的，手动添加 X-Requested-With 为 XMLHttpRequest 后所有环境下</span></div><div class="line"><span class="comment">                 *正常和异常时都能取到了</span></div><div class="line"><span class="comment">                 */</span></div><div class="line">                headers: &#123;<span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>&#125;</div><div class="line">            &#125;)</div><div class="line">            .done(<span class="function"><span class="keyword">function</span>(<span class="params">data, textStatus, jqXHR</span>) </span>&#123;</div><div class="line">                settings.success(data, textStatus, jqXHR);</div><div class="line">            &#125;)</div><div class="line">            .fail(<span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus, failThrown</span>) </span>&#123;</div><div class="line">                <span class="comment">// data|jqXHR, textStatus, jqXHR|failThrown</span></div><div class="line">                settings.fail(jqXHR, textStatus, failThrown);</div><div class="line">            &#125;)</div><div class="line">            .always(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                settings.complete();</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;转自：&lt;/strong&gt; &lt;a href=&quot;https://qtdebug.com/fe-rest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://qtdebug.com/fe-rest/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用 REST 风格提交请求时，Content-Type 标准的来说应该用 &lt;strong&gt;application/json&lt;/strong&gt;，但是服务器端获取请求的参数时必须从 Request Body 中获取，而且有些框架对从 Request Body 中获取数据支持不好，需要我们自己实现，SpringMVC 中使用注解 &lt;strong&gt;@RequestBody&lt;/strong&gt;从 Request Body 中获取数据，但不能使用 Filter 进行 XSS 过滤。&lt;/p&gt;
&lt;p&gt;这里主要使用 SpringMVC 来作为后端进行介绍，SpringMVC 提供了一个 Filter &lt;strong&gt;HiddenHttpMethodFilter&lt;/strong&gt;，把 Content-Type 为 &lt;strong&gt;application/x-www-form-urlencoded&lt;/strong&gt; 的 POST 请求，参数中 &lt;strong&gt;_method&lt;/strong&gt; 值为 &lt;strong&gt;PUT&lt;/strong&gt; 的请求分发为 PUT 请求，为 &lt;strong&gt;DELETE&lt;/strong&gt; 请求分发为 DELETE 请求，实现了普通表单的 REST 风格提交，这样就可以使用 &lt;strong&gt;@RequestParam&lt;/strong&gt; 获取参数的值了。&lt;/p&gt;
&lt;p&gt;下面结合 SpringMVC 来介绍:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Content-Type 为 application/x-www-form-urlencoded + HiddenHttpMethodFilter&lt;ul&gt;
&lt;li&gt;优点: 服务器端 GET, PUT, POST, DELETE 时直接参数映射为对象，或则都使用 @RequestParam 获取参数，使用形式一致、简洁&lt;/li&gt;
&lt;li&gt;缺点:&lt;ul&gt;
&lt;li&gt;不是标准的 REST 规范&lt;/li&gt;
&lt;li&gt;参数是按照 key/value 的形式发送的，和普通表单的参数形式一样，有兴趣的可以在 Chrome 的 Network 中查看请求的 Headers&lt;/li&gt;
&lt;li&gt;不能传递复杂对象，例如 value 又是一个 Json 对象，只能传递简单的 key/value，也就是作为参数的 Json 对象只能有一层 key/value，不过非特殊情况也够用了，普通表单能做的它都能做&lt;/li&gt;
&lt;li&gt;PUT 时参数中需要带上 _method=”PUT”，DELETE 时参数中需要带上 _method=”DELETE”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content-Type 为 application/json&lt;ul&gt;
&lt;li&gt;优点: 标准的 REST 规范，GET 处理和上面的一样，但是 POST, PUT, DELETE 的参数是序列化后的 JSON 字符串，能够传递复杂的对象&lt;/li&gt;
&lt;li&gt;缺点:&lt;ul&gt;
&lt;li&gt;服务器端直接参数映射为对象，或则 GET 时使用 @RequestParam 获取参数，POST, PUT, DELETE 使用 @RequestBody 获取参数到 Map 中，然后再从 Map 中获取一个一个的参数，非常繁琐&lt;/li&gt;
&lt;li&gt;GET 和 POST, PUT, DELETE 获取参数的形式不统一，一个用 @RequestParam，其他的用 @RequestBody，需要脑子转换一下&lt;/li&gt;
&lt;li&gt;还有就是浏览器端 PUT, POST, DELETE 传递的 JSON 对象需要序列化后才能传给服务器端，可以使用 JSON.stringify(jsonObject) 进行序列化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结下来，在 SpringMVC 中推荐使用 &lt;code&gt;application/x-www-form-urlencoded + HiddenHttpMethodFilter&lt;/code&gt; 的方式实现 REST 的请求，就是为了获取参数时比较统一，当需要传递复杂的参数时，例如属性是多层嵌套的对象，Json 对象的数组，这时再使用 application/json 的方式。&lt;/p&gt;
&lt;p&gt;为了简化 Rest Ajax 的访问，下面对 jQuery 的 Ajax 进行了简单的封装，例如更新用户名原始实现大致如下:&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$.ajax(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    url        : &lt;span class=&quot;string&quot;&gt;&#39;/users/1/username&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    data       : &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(&amp;#123;&lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Bob&#39;&lt;/span&gt;&amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type       : &lt;span class=&quot;string&quot;&gt;&#39;PUT&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dataType   : &lt;span class=&quot;string&quot;&gt;&#39;json&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    contentType: &lt;span class=&quot;string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.done(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果每个 REST 的请求都像上面这样写一遍: &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt; 时需要 &lt;code&gt;JSON.stringify(data)&lt;/code&gt;, 请求不同时 type 也不同，dataType 和 contentType 是固定的，这么多限制，很容易出错。使用下面实现的 rest 插件后，简化如下，只需要关心参数和回调，不需要处理其他额外信息，而且 $.rest.update 名字也更有语义化，一看就知道是更新操作:&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$.rest.update(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    url    : &lt;span class=&quot;string&quot;&gt;&#39;/users/1/username&#39;&lt;/span&gt;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    data   : &amp;#123;&lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Bob&#39;&lt;/span&gt;&amp;#125;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    success: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="RESTful" scheme="maode.github.io/tags/RESTful/"/>
    
      <category term="jQuery" scheme="maode.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>【摘】java的几种对象PO,VO,DAO,BO,POJO,DTO</title>
    <link href="maode.github.io/2018/02/08/180208-java-pojo-status/"/>
    <id>maode.github.io/2018/02/08/180208-java-pojo-status/</id>
    <published>2018-02-08T09:28:08.000Z</published>
    <updated>2018-02-08T09:44:00.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PO："><a href="#PO：" class="headerlink" title="PO："></a>PO：</h2><p>persistant object持久对象</p>
<p>最形象的理解就是一个PO就是数据库中的一条记录。<br>好处是可以把一条记录作为一个对象处理，可以方便的转为其它对象。</p>
<h2 id="BO："><a href="#BO：" class="headerlink" title="BO："></a>BO：</h2><p>business object业务对象</p>
<p>主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。<br>比如一个简历，有教育经历、工作经历、社会关系等等。<br>我们可以把教育经历对应一个PO，工作经历对应一个PO，社会关系对应一个PO。<br>建立一个对应简历的BO对象处理简历，每个BO包含这些PO。<br>这样处理业务逻辑时，我们就可以针对BO去处理。 </p>
<h2 id="VO-："><a href="#VO-：" class="headerlink" title="VO ："></a>VO ：</h2><p>value object值对象<br>ViewObject表现层对象 主要对应界面显示的数据对象。对于一个WEB页面，或者SWT、SWING的一个界面，用一个VO对象对应整个界面的值。</p>
<a id="more"></a>
<h2 id="DTO-："><a href="#DTO-：" class="headerlink" title="DTO ："></a>DTO ：</h2><p>Data Transfer Object数据传输对象<br>主要用于远程调用等需要大量传输对象的地方。<br>比如我们一张表有100个字段，那么对应的PO就有100个属性。<br>但是我们界面上只要显示10个字段，<br>客户端用WEB service来获取数据，没有必要把整个PO对象传递到客户端，<br>这时我们就可以用只有这10个属性的DTO来传递结果到客户端，这样也不会暴露服务端表结构.到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为VO</p>
<h2 id="POJO-："><a href="#POJO-：" class="headerlink" title="POJO ："></a>POJO ：</h2><p>plain ordinary java object 简单java对象 个人感觉POJO是最常见最多变的对象，是一个中间对象，也是我们最常打交道的对象。</p>
<p>一个POJO持久化以后就是PO<br>直接用它传递、传递过程中就是DTO<br>直接用来对应表示层就是VO</p>
<h2 id="DAO："><a href="#DAO：" class="headerlink" title="DAO："></a>DAO：</h2><p>data access object数据访问对象<br>这个大家最熟悉，和上面几个O区别最大，基本没有互相转化的可能性和必要.<br>主要用来封装对数据库的访问。通过它可以把POJO持久化为PO，用PO组装出来VO、DTO</p>
<p>   总结下我认为一个对象究竟是什么O要看具体环境，在不同的层、不同的应用场合，对象的身份也不一样，而且对象身份的转化也是很自然的。就像你对老婆来说就是老公，对父母来说就是子女。设计这些概念的初衷不是为了唬人而是为了更好的理解和处理各种逻辑，让大家能更好的去用面向对象的方式处理问题.</p>
<p>   大家千万不要陷入过度设计，大可不必为了设计而设计一定要在代码中区分各个对象。一句话技术是为应用服务的。</p>
<p>摘自：<a href="http://www.blogjava.net/vip01/archive/2007/01/08/92430.html" target="_blank" rel="external">http://www.blogjava.net/vip01/archive/2007/01/08/92430.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PO：&quot;&gt;&lt;a href=&quot;#PO：&quot; class=&quot;headerlink&quot; title=&quot;PO：&quot;&gt;&lt;/a&gt;PO：&lt;/h2&gt;&lt;p&gt;persistant object持久对象&lt;/p&gt;
&lt;p&gt;最形象的理解就是一个PO就是数据库中的一条记录。&lt;br&gt;好处是可以把一条记录作为一个对象处理，可以方便的转为其它对象。&lt;/p&gt;
&lt;h2 id=&quot;BO：&quot;&gt;&lt;a href=&quot;#BO：&quot; class=&quot;headerlink&quot; title=&quot;BO：&quot;&gt;&lt;/a&gt;BO：&lt;/h2&gt;&lt;p&gt;business object业务对象&lt;/p&gt;
&lt;p&gt;主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。&lt;br&gt;比如一个简历，有教育经历、工作经历、社会关系等等。&lt;br&gt;我们可以把教育经历对应一个PO，工作经历对应一个PO，社会关系对应一个PO。&lt;br&gt;建立一个对应简历的BO对象处理简历，每个BO包含这些PO。&lt;br&gt;这样处理业务逻辑时，我们就可以针对BO去处理。 &lt;/p&gt;
&lt;h2 id=&quot;VO-：&quot;&gt;&lt;a href=&quot;#VO-：&quot; class=&quot;headerlink&quot; title=&quot;VO ：&quot;&gt;&lt;/a&gt;VO ：&lt;/h2&gt;&lt;p&gt;value object值对象&lt;br&gt;ViewObject表现层对象 主要对应界面显示的数据对象。对于一个WEB页面，或者SWT、SWING的一个界面，用一个VO对象对应整个界面的值。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PO" scheme="maode.github.io/tags/PO/"/>
    
      <category term="VO" scheme="maode.github.io/tags/VO/"/>
    
      <category term="DAO" scheme="maode.github.io/tags/DAO/"/>
    
      <category term="BO" scheme="maode.github.io/tags/BO/"/>
    
      <category term="POJO" scheme="maode.github.io/tags/POJO/"/>
    
      <category term="DTO" scheme="maode.github.io/tags/DTO/"/>
    
  </entry>
  
  <entry>
    <title>【摘】Hibernate的saveOrUpdate方法</title>
    <link href="maode.github.io/2018/02/08/180208-Hibernate-saveOrUpdate/"/>
    <id>maode.github.io/2018/02/08/180208-Hibernate-saveOrUpdate/</id>
    <published>2018-02-08T07:35:43.000Z</published>
    <updated>2018-02-08T09:39:19.758Z</updated>
    
    <content type="html"><![CDATA[<p>在Hibernate中，最核心的概念就是对PO的状态管理。一个PO有三种状态： </p>
<p>1、未被持久化的VO<br>此时就是一个内存对象VO，由JVM管理生命周期 </p>
<p>2、已被持久化的PO，并且在Session生命周期内<br>此时映射数据库数据，由数据库管理生命周期 </p>
<p>3、曾被持久化过，但现在和Session已经detached了，以VO的身份在运行<br>这种和Session已经detached的PO还能够进入另一个Session，继续进行PO状态管理，此时它就成为PO的第二种状态了。<strong>这种PO实际上是跨了Session进行了状态维护的。 </strong></p>
<p>在传统的JDO1.x中，PO只有前面两种状态，一个PO一旦脱离PM，就丧失了状态了，不再和数据库数据关联，成为一个纯粹的内存VO，它即使进入一个新的PM，也不能恢复它的状态了。 </p>
<p>Hibernate强的地方就在于，一个PO脱离Session之后，还能保持状态，再进入一个新的Session之后，就恢复状态管理的能力，但此时状态管理需要使用session.update或者session.saveOrUpdate，这就是Hibernate Reference中提到的“requires a slightly different programming model ” </p>
<p>现在正式进入本话题：<br><a id="more"></a><br><strong>简单的来说，update和saveOrUpdate是用来对跨Session的PO进行状态管理的。 </strong></p>
<p>假设你的PO不需要跨Session的话，那么就不需要用到，例如你打开一个Session，对PO进行操作，然后关闭，之后这个PO你也不会再用到了，那么就不需要用update。 </p>
<p>因此，我们来看看例子： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>.  Foo foo=sess.load(Foo.class,id);</div><div class="line"><span class="number">2</span>.  foo.setXXX(xxx);</div><div class="line"><span class="number">3</span>.  sess.flush();</div><div class="line"><span class="number">4</span>.  sess.commit();</div></pre></td></tr></table></figure>
<p>PO对象foo的操作都在一个Session生命周期内完成，因此不需要显式的进行sess.update(foo)这样的操作。Hibernate会自动监测到foo对象已经被修改过，因此就向数据库发送一个update的sql。当然如果你非要加上sess.update(foo)也不会错，只不过这样做没有任何必要。 </p>
<p>而跨Session的意思就是说这个PO对象在Session关闭之后，你还把它当做一个VO来用，后来你在Session外面又修改了它的属性，然后你又想打开一个Session，把VO的属性修改保存到数据库里面，那么你就需要用update了。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>.  <span class="comment">// in the first session   </span></div><div class="line"><span class="number">2</span>.  Cat cat = (Cat); firstSession.load(Cat.class, catId);;   </div><div class="line"><span class="number">3</span>.  Cat potentialMate = <span class="keyword">new</span> Cat();;   </div><div class="line"><span class="number">4</span>.  firstSession.save(potentialMate);;   </div><div class="line"></div><div class="line"><span class="number">6</span>.  <span class="comment">// in a higher tier of the application   </span></div><div class="line"><span class="number">7</span>.  cat.setMate(potentialMate);;   </div><div class="line"></div><div class="line"><span class="number">9</span>.  <span class="comment">// later, in a new session   </span></div><div class="line"><span class="number">10</span>.  secondSession.update(cat);;  <span class="comment">// update cat   </span></div><div class="line"><span class="number">11</span>.  secondSession.update(mate);; <span class="comment">// update mate</span></div></pre></td></tr></table></figure>
<p>cat和mate对象是在第一个session中取得的，在第一个session关闭之后，他们就成了PO的第三种状态，和Session已经detached的PO，此时他们的状态信息仍然被保留下来了。当他们进入第二个session之后，立刻就可以进行状态的更新。但是由于对cat的修改操作：cat.setMate(potentialMate); 是在Session外面进行的，Hibernate不可能知道cat对象已经被改过了，第二个Session并不知道这种修改，因此一定要显式的调用secondSession.update(cat); 通知Hibernate，cat对象已经修改了，你必须发送update的sql了。 </p>
<p>所以update的作用就在于此，它只会被用于当一个PO对象跨Session进行状态同步的时候才需要写。而一个PO对象当它不需要跨Session进行状态管理的时候，是不需要写update的。 </p>
<p>再谈谈saveOrUpdate的用场： </p>
<p>saveOrUpdate和update的区别就在于在跨Session的PO状态管理中，Hibernate对PO采取何种策略。 </p>
<p>例如当你写一个DAOImpl的时候，让cat对象增加一个mate，如下定义： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>.  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMate</span><span class="params">(Cat cat, Mate mate)</span></span>; &#123;  </div><div class="line"><span class="number">2</span>.  Session session = ...;  </div><div class="line"><span class="number">3</span>.  Transacton tx = ...;  </div><div class="line"><span class="number">4</span>.  session.update(cat);;  </div><div class="line"><span class="number">5</span>.  cat.addMate(mate);;  </div><div class="line"><span class="number">6</span>.  tx.commit();;  </div><div class="line"><span class="number">7</span>.  session.close();;  </div><div class="line"><span class="number">8</span>.  &#125;;</div></pre></td></tr></table></figure>
<p>显然你是需要把Hibernate的操作封装在DAO里面的，让业务层的程序员和Web层的程序员不需要了解Hibernate，直接对DAO进行调用。 </p>
<p>此时问题就来了：上面的代码运行正确有一个必要的前提，那就是方法调用参数cat对象必须是一个已经被持久化过的PO，也就是来说，它应该首先从数据库查询出来，然后才能这样用。但是业务层的程序员显然不知道这种内部的玄妙，如果他的业务是现在增加一个cat，然后再增加它的mate，他显然会这样调用，new一个cat对象出来，然后就addMate： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>.  Cat cat = <span class="keyword">new</span> Cat();;  </div><div class="line"><span class="number">2</span>.  cat.setXXX();;  </div><div class="line"><span class="number">3</span>.  daoimpl.addMate(cat,mate);;</div></pre></td></tr></table></figure>
<p>但是请注意看，这个cat对象只是一个VO，它没有被持久化过，它还不是PO，它没有资格调用addMate方法，因此调用addMate方法不会真正往数据库里面发送update的sql，这个cat对象必须先被save到数据库，在真正成为一个PO之后，才具备addMate的资格。 </p>
<p>你必须这样来操作： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>.  Cat cat = <span class="keyword">new</span> Cat();;  </div><div class="line"><span class="number">2</span>.  cat.setXXX();;  </div><div class="line"><span class="number">3</span>.  daoimpl.addCat(cat);;  </div><div class="line"><span class="number">4</span>.  daoimpl.addMate(cat, mate);;</div></pre></td></tr></table></figure>
<p>先持久化cat，然后才能对cat进行其他的持久化操作。因此要求业务层的程序员必须清楚cat对象处于何种状态，到底是第一种，还是第三种。如果是第一种，就要先save，再addMate；如果是第三种，就直接addMate。 </p>
<p>但是最致命的是，如果整个软件分层很多，业务层的程序员他拿到这个cat对象也可能是上层Web应用层传递过来的cat，他自己也不知道这个cat究竟是VO，没有被持久化过，还是已经被持久化过，那么他根本就没有办法写程序了。 </p>
<p>所以这样的DAOImpl显然是有问题的，它会对业务层的程序员造成很多编程上的陷阱，业务层的程序员必须深刻的了解他调用的每个DAO对PO对象进行了何种状态管理，必须深刻的了解他的PO对象在任何时候处于什么确切的状态，才能保证编程的正确性，显然这是做不到的，但是有了saveOrUpdate，这些问题就迎刃而解了。 </p>
<p>现在你需要修改addMate方法： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>.  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMate</span><span class="params">(Cat cat, Mate mate)</span></span>; &#123;  </div><div class="line"><span class="number">2</span>.  Session session = ...;  </div><div class="line"><span class="number">3</span>.  Transacton tx = ...;  </div><div class="line"><span class="number">4</span>.  session.saveOrUpdate(cat);;  </div><div class="line"><span class="number">5</span>.  cat.addMate(mate);;  </div><div class="line"><span class="number">6</span>.  tx.commit();;  </div><div class="line"><span class="number">7</span>.  session.close();;  </div><div class="line"><span class="number">8</span>.  &#125;;</div></pre></td></tr></table></figure>
<p>如上，如果业务层的程序员传进来的是一个已经持久化过的PO对象，那么Hibernate会更新cat对象(假设业务层的程序员在Session外面修改过cat的属性)，如果传进来的是一个新new出来的对象，那么向数据库save这个PO对象。 </p>
<p>BTW: Hibernate此时究竟采取更新cat对象，还是save cat对象，取决于unsave-value的设定。 </p>
<p>这样，业务层的程序员就不必再操心PO的状态问题了，对于他们来说，不管cat是new出来的对象，只是一个VO也好；还是从数据库查询出来的的PO对象也好，全部都是直接addMate就OK了： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>.  daoimple.addMate(cat, mate);;</div></pre></td></tr></table></figure>
<p>这便是saveOrUpdate的作用。</p>
<p>摘自：<a href="http://www.iteye.com/topic/2632" target="_blank" rel="external">http://www.iteye.com/topic/2632</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Hibernate中，最核心的概念就是对PO的状态管理。一个PO有三种状态： &lt;/p&gt;
&lt;p&gt;1、未被持久化的VO&lt;br&gt;此时就是一个内存对象VO，由JVM管理生命周期 &lt;/p&gt;
&lt;p&gt;2、已被持久化的PO，并且在Session生命周期内&lt;br&gt;此时映射数据库数据，由数据库管理生命周期 &lt;/p&gt;
&lt;p&gt;3、曾被持久化过，但现在和Session已经detached了，以VO的身份在运行&lt;br&gt;这种和Session已经detached的PO还能够进入另一个Session，继续进行PO状态管理，此时它就成为PO的第二种状态了。&lt;strong&gt;这种PO实际上是跨了Session进行了状态维护的。 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在传统的JDO1.x中，PO只有前面两种状态，一个PO一旦脱离PM，就丧失了状态了，不再和数据库数据关联，成为一个纯粹的内存VO，它即使进入一个新的PM，也不能恢复它的状态了。 &lt;/p&gt;
&lt;p&gt;Hibernate强的地方就在于，一个PO脱离Session之后，还能保持状态，再进入一个新的Session之后，就恢复状态管理的能力，但此时状态管理需要使用session.update或者session.saveOrUpdate，这就是Hibernate Reference中提到的“requires a slightly different programming model ” &lt;/p&gt;
&lt;p&gt;现在正式进入本话题：&lt;br&gt;
    
    </summary>
    
    
      <category term="Hibernate" scheme="maode.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>【转】Shadowsocks一键安装脚本（四合一）</title>
    <link href="maode.github.io/2017/12/12/171212-Shadowsocks4-1/"/>
    <id>maode.github.io/2017/12/12/171212-Shadowsocks4-1/</id>
    <published>2017-12-12T10:46:33.000Z</published>
    <updated>2018-02-08T10:00:14.102Z</updated>
    
    <content type="html"><![CDATA[<p><strong>转自：</strong> <a href="https://teddysun.com/" target="_blank" rel="external">秋水逸冰</a> » <a href="https://teddysun.com/486.html" target="_blank" rel="external">Shadowsocks 一键安装脚本（四合一）</a></p>
<h2 id="本脚本适用环境"><a href="#本脚本适用环境" class="headerlink" title="本脚本适用环境"></a>本脚本适用环境</h2><p>系统支持：CentOS 6+，Debian 7+，Ubuntu 12+<br>内存要求：≥128M<br>日期　　：2017 年 11 月 25 日</p>
<h3 id="关于本脚本"><a href="#关于本脚本" class="headerlink" title="关于本脚本"></a>关于本脚本</h3><p>1、一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端；<br>2、各版本的启动脚本及配置文件名不再重合；<br>3、每次运行可安装一种版本；<br>4、支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）；<br>5、若已安装多个版本，则卸载时也需多次运行（每次卸载一种）；<br>6、Shadowsocks-Python 和 ShadowsocksR 安装后不可同时启动（因为本质上都属 Python 版）。</p>
<p><strong>友情提示：</strong> 如果你有问题，请先阅读这篇《<a href="https://teddysun.com/399.html" target="_blank" rel="external">Shadowsocks Troubleshooting</a>》之后再询问。<br><a id="more"></a></p>
<h3 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h3><p>服务器端口：自己设定（如不设定，默认为 8989）<br>密码：自己设定（如不设定，默认为 teddysun.com）<br>加密方式：自己设定（如不设定，Python 和 libev 版默认为 aes-256-gcm，R 和 Go 版默认为 aes-256-cfb）<br>协议（protocol）：自己设定（如不设定，默认为 origin）（仅限 ShadowsocksR 版）<br>混淆（obfs）：自己设定（如不设定，默认为 plain）（仅限 ShadowsocksR 版）<br><strong>备注：</strong>脚本默认创建单用户配置文件，如需配置多用户，请手动修改相应的配置文件后重启即可。</p>
<h3 id="客户端下载"><a href="#客户端下载" class="headerlink" title="客户端下载"></a>客户端下载</h3><p>常规版 Windows 客户端<br><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p>
<p>ShadowsocksR 版 Windows 客户端<br><a href="https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases" target="_blank" rel="external">https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases</a></p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>使用root用户登录，运行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</div><div class="line">chmod +x shadowsocks-all.sh</div><div class="line">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</div></pre></td></tr></table></figure></p>
<h3 id="安装完成后，脚本提示如下"><a href="#安装完成后，脚本提示如下" class="headerlink" title="安装完成后，脚本提示如下"></a>安装完成后，脚本提示如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Congratulations, your_shadowsocks_version install completed!</div><div class="line">Your Server IP        :your_server_ip</div><div class="line">Your Server Port      :your_server_port</div><div class="line">Your Password         :your_password</div><div class="line">Your Encryption Method:your_encryption_method</div><div class="line"></div><div class="line">Your QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients)</div><div class="line"> ss://your_encryption_method:your_password@your_server_ip:your_server_port</div><div class="line">Your QR Code has been saved as a PNG file path:</div><div class="line"> your_path.png</div><div class="line"></div><div class="line">Welcome to visit:https://teddysun.com/486.html</div><div class="line">Enjoy it!</div></pre></td></tr></table></figure>
<h3 id="卸载方法"><a href="#卸载方法" class="headerlink" title="卸载方法"></a>卸载方法</h3><p>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）</p>
<p>使用root用户登录，运行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./shadowsocks-all.sh uninstall</div></pre></td></tr></table></figure></p>
<h3 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h3><p>启动脚本后面的参数含义，从左至右依次为：<strong>启动，停止，重启，查看状态。</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Shadowsocks-Python 版：</div><div class="line">/etc/init.d/shadowsocks-python start | stop | restart | status</div><div class="line"></div><div class="line">ShadowsocksR 版：</div><div class="line">/etc/init.d/shadowsocks-r start | stop | restart | status</div><div class="line"></div><div class="line">Shadowsocks-Go 版：</div><div class="line">/etc/init.d/shadowsocks-go start | stop | restart | status</div><div class="line"></div><div class="line">Shadowsocks-libev 版：</div><div class="line">/etc/init.d/shadowsocks-libev start | stop | restart | status</div></pre></td></tr></table></figure></p>
<h3 id="各版本默认配置文件"><a href="#各版本默认配置文件" class="headerlink" title="各版本默认配置文件"></a>各版本默认配置文件</h3><p>Shadowsocks-Python 版：<br>/etc/shadowsocks-python/config.json</p>
<p>ShadowsocksR 版：<br>/etc/shadowsocks-r/config.json</p>
<p>Shadowsocks-Go 版：<br>/etc/shadowsocks-go/config.json</p>
<p>Shadowsocks-libev 版：<br>/etc/shadowsocks-libev/config.json</p>
<h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><p>2017 年 11 月 25 日：<br>1、如果 Linux 内核版本大于 3.7.0，则配置文件默认支持 TCP fast open；<br>2、新增：libev 版启动时支持 verbose mode，也就是默认写 log 到 /var/log/messages 方便查看。</p>
<p>2017 年 11 月 12 日：<br>1、新增生成 ss:// 或 ssr:// 链接，以及其二维码图片。<br>※ 脚本会根据当前安装的版本以及输入的各项配置，自动生成 ss:// 或 ssr:// 的链接并在安装成功后显示，直接复制即可被客户端识别。同时生成其二维码图片，并保存在当前目录下，下载后用看图软件打开，也能被客户端识别。</p>
<p>复制二维码链接后 Shadowsocks 客户端识别示例：<br><img src="/assets/blogImg/171212-Shadowsocks4-1-1.png" alt="" title="Shadowsocks 客户端示例"></p>
<p>复制二维码链接后 ShadowsocksR 客户端识别示例：<br><img src="/assets/blogImg/171212-Shadowsocks4-1-2.png" alt="" title="ShadowsocksR 客户端示例"></p>
<p>二维码（QR Code）参考链接：<br><a href="https://github.com/shadowsocks/shadowsocks/wiki/Generate-QR-Code-for-Android-or-iOS-Clients" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks/wiki/Generate-QR-Code-for-Android-or-iOS-Clients</a><br><a href="https://github.com/shadowsocksr-backup/shadowsocks-rss/wiki/SSR-QRcode-scheme" target="_blank" rel="external">https://github.com/shadowsocksr-backup/shadowsocks-rss/wiki/SSR-QRcode-scheme</a></p>
<p>2017 年 10 月 22 日：<br>1、升级：libsodium 到 1.0.15。</p>
<p>2017 年 10 月 14 日：<br>1、新增：在安装 Shadowsocks-libev 版时<strong>可选安装</strong> simple-obfs 服务端。<br>※ 脚本通过判断 autoconf 版本是否大于或等于 2.67 来一键安装 simple-obfs 服务端。并且，支持在安装过程中选择 obfs 为 http 或 tls。<br>※ 使用方法参考：<a href="https://teddysun.com/511.html" target="_blank" rel="external">https://teddysun.com/511.html</a></p>
<p>2017 年 09 月 16 日：<br>1、修正：Shadowsocks-libev 版 v3.1.0 使用 libc-ares 替换 libudns 依赖包，解决了依赖问题；<br>2、升级：mbedtls 到版本 2.6.0。</p>
<p>2017 年 07 月 27 日：<br>1、新增：ShadowsocksR 版可选协议（protocol）auth_chain_b 。使用该协议需更新到最新（4.7.0） <a href="http://dl.teddysun.com/files/ShadowsocksR-4.7.0-win.7z" target="_blank" rel="external">ShadowsocksR 版客户端</a>；<br>2、修改：更新 ShadowsocksR 源码下载地址。</p>
<p>2017 年 07 月 23 日：<br>1、修正：卸载时可自行选择某个版本卸载，若该版本不存在则报错退出。</p>
<p>2017 年 07 月 22 日：<br>1、修正：默认加密方式从 aes-256-cfb 改为 aes-256-gcm（Python 和 libev 版）；<br>2、新增：安装时可选 16 种加密方式的其中之一（Python 和 libev 版）。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">aes-256-gcm</div><div class="line">aes-192-gcm</div><div class="line">aes-128-gcm</div><div class="line">aes-256-ctr</div><div class="line">aes-192-ctr</div><div class="line">aes-128-ctr</div><div class="line">aes-256-cfb</div><div class="line">aes-192-cfb</div><div class="line">aes-128-cfb</div><div class="line">camellia-128-cfb</div><div class="line">camellia-192-cfb</div><div class="line">camellia-256-cfb</div><div class="line">chacha20-ietf-poly1305</div><div class="line">chacha20-ietf</div><div class="line">chacha20</div><div class="line">rc4-md5</div></pre></td></tr></table></figure></p>
<p>3、新增：安装时可选 9 种加密方式的其中之一（Go 版）。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">aes-256-cfb</div><div class="line">aes-192-cfb</div><div class="line">aes-128-cfb</div><div class="line">aes-256-ctr</div><div class="line">aes-192-ctr</div><div class="line">aes-128-ctr</div><div class="line">chacha20-ietf</div><div class="line">chacha20</div><div class="line">rc4-md5</div></pre></td></tr></table></figure></p>
<p>4、新增：安装时可选 13 种加密方式的其中之一（none 是不加密，ShadowsocksR 版）。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">none</div><div class="line">aes-256-cfb</div><div class="line">aes-192-cfb</div><div class="line">aes-128-cfb</div><div class="line">aes-256-cfb8</div><div class="line">aes-192-cfb8</div><div class="line">aes-128-cfb8</div><div class="line">aes-256-ctr</div><div class="line">aes-192-ctr</div><div class="line">aes-128-ctr</div><div class="line">chacha20-ietf</div><div class="line">chacha20</div><div class="line">rc4-md5</div><div class="line">rc4-md5-6</div></pre></td></tr></table></figure></p>
<p>5、新增：安装时可选 7 种协议（protocol）的其中之一（仅限 ShadowsocksR 版）。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">origin</div><div class="line">verify_deflate</div><div class="line">auth_sha1_v4</div><div class="line">auth_sha1_v4_compatible</div><div class="line">auth_aes128_md5</div><div class="line">auth_aes128_sha1</div><div class="line">auth_chain_a</div><div class="line">auth_chain_b</div></pre></td></tr></table></figure></p>
<p>6、新增：安装时可选 9 种混淆（obfs）的其中之一（仅限 ShadowsocksR 版）。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">plain</div><div class="line">http_simple</div><div class="line">http_simple_compatible</div><div class="line">http_post</div><div class="line">http_post_compatible</div><div class="line">tls1.2_ticket_auth</div><div class="line">tls1.2_ticket_auth_compatible</div><div class="line">tls1.2_ticket_fastauth</div><div class="line">tls1.2_ticket_fastauth_compatible</div></pre></td></tr></table></figure></p>
<p>2017 年 02 月 24 日：<br>1、恢复： 通过 Github API 自动获取 Shadowsocks-libev 的最新 release 版本的功能（v3.0.3）。</p>
<p>2017 年 02 月 13 日：<br>1、升级： Shadowsocks-libev 版到版本 3.0.2；<br>2、升级： Shadowsocks-go 版到版本 1.2.1（基于 <a href="https://github.com/shadowsocks/shadowsocks-go" target="_blank" rel="external">Github 最新代码</a>，用 go 1.8 编译完成的 x86 和 x86_64 二进制文件）；<br>3、修复：在 Debian 7 下默认没有 libudns-dev 依赖包的问题。</p>
<p>2017 年 02 月 12 日：<br>1、升级： Shadowsocks-libev 版到版本 3.0.1。</p>
<p>2017 年 01 月 27 日：<br>1、升级： Shadowsocks-go 版到版本 1.2.1 （仅适用于 x86_64 系统）</p>
<h3 id="更多单版本-Shadowsocks-服务端一键安装脚本"><a href="#更多单版本-Shadowsocks-服务端一键安装脚本" class="headerlink" title="更多单版本 Shadowsocks 服务端一键安装脚本"></a>更多单版本 Shadowsocks 服务端一键安装脚本</h3><p><a href="https://teddysun.com/342.html" target="_blank" rel="external">Shadowsocks Python 版一键安装脚本（CentOS，Debian，Ubuntu）</a><br><a href="https://shadowsocks.be/9.html" target="_blank" rel="external">ShadowsocksR 版一键安装脚本（CentOS，Debian，Ubuntu）</a><br><a href="https://teddysun.com/357.html" target="_blank" rel="external">CentOS 下 Shadowsocks-libev 一键安装脚本</a><br><a href="https://teddysun.com/358.html" target="_blank" rel="external">Debian 下 Shadowsocks-libev 一键安装脚本</a><br><a href="https://teddysun.com/392.html" target="_blank" rel="external">Shadowsocks-go 一键安装脚本（CentOS，Debian，Ubuntu）</a></p>
<p><strong>注意：</strong> 以上单版本不可与该四合一版本混用。</p>
<h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>网络加速：<a href="https://teddysun.com/489.html" target="_blank" rel="external">一键安装最新内核并开启 BBR 脚本</a><br>协议混淆：<a href="https://teddysun.com/511.html" target="_blank" rel="external">如何安装和配置simple-obfs服务端</a><br>各种安装优化：<a href="https://github.com/iMeiji/shadowsocks_install" target="_blank" rel="external">shadowsocks_install</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;转自：&lt;/strong&gt; &lt;a href=&quot;https://teddysun.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;秋水逸冰&lt;/a&gt; » &lt;a href=&quot;https://teddysun.com/486.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Shadowsocks 一键安装脚本（四合一）&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;本脚本适用环境&quot;&gt;&lt;a href=&quot;#本脚本适用环境&quot; class=&quot;headerlink&quot; title=&quot;本脚本适用环境&quot;&gt;&lt;/a&gt;本脚本适用环境&lt;/h2&gt;&lt;p&gt;系统支持：CentOS 6+，Debian 7+，Ubuntu 12+&lt;br&gt;内存要求：≥128M&lt;br&gt;日期　　：2017 年 11 月 25 日&lt;/p&gt;
&lt;h3 id=&quot;关于本脚本&quot;&gt;&lt;a href=&quot;#关于本脚本&quot; class=&quot;headerlink&quot; title=&quot;关于本脚本&quot;&gt;&lt;/a&gt;关于本脚本&lt;/h3&gt;&lt;p&gt;1、一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端；&lt;br&gt;2、各版本的启动脚本及配置文件名不再重合；&lt;br&gt;3、每次运行可安装一种版本；&lt;br&gt;4、支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）；&lt;br&gt;5、若已安装多个版本，则卸载时也需多次运行（每次卸载一种）；&lt;br&gt;6、Shadowsocks-Python 和 ShadowsocksR 安装后不可同时启动（因为本质上都属 Python 版）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;友情提示：&lt;/strong&gt; 如果你有问题，请先阅读这篇《&lt;a href=&quot;https://teddysun.com/399.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Shadowsocks Troubleshooting&lt;/a&gt;》之后再询问。&lt;br&gt;
    
    </summary>
    
    
      <category term="Shadowsocks" scheme="maode.github.io/tags/Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse  tomcat mvn plugin</title>
    <link href="maode.github.io/2017/12/10/171210-mvnplugin-tomcat/"/>
    <id>maode.github.io/2017/12/10/171210-mvnplugin-tomcat/</id>
    <published>2017-12-10T11:08:45.000Z</published>
    <updated>2017-12-10T11:55:52.354Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/171210-tomcat-mvn-plugin.png" alt=""></p>
<p>暂时就这些，后面没有了！(=^ ^=)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/171210-tomcat-mvn-plugin.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;暂时就这些，后面没有了！(=^ ^=)&lt;/p&gt;

    
    </summary>
    
    
      <category term="Eclipse" scheme="maode.github.io/tags/Eclipse/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse plugin RunJettyRun</title>
    <link href="maode.github.io/2017/11/10/171110-runjettyrun/"/>
    <id>maode.github.io/2017/11/10/171110-runjettyrun/</id>
    <published>2017-11-10T04:08:45.000Z</published>
    <updated>2017-11-10T04:14:01.452Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/171110-jetty-plugin.png" alt=""></p>
<p>暂时就这些，后面没有了！(=^ ^=)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/171110-jetty-plugin.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;暂时就这些，后面没有了！(=^ ^=)&lt;/p&gt;

    
    </summary>
    
    
      <category term="Eclipse" scheme="maode.github.io/tags/Eclipse/"/>
    
  </entry>
  
  <entry>
    <title>Debugging Node.js with DevTools</title>
    <link href="maode.github.io/2017/09/26/170926-nodejs-debug/"/>
    <id>maode.github.io/2017/09/26/170926-nodejs-debug/</id>
    <published>2017-09-26T14:37:45.000Z</published>
    <updated>2017-09-28T06:22:48.224Z</updated>
    
    <content type="html"><![CDATA[<p>devtool 已经并入node.js v6.3.0以上版本的核心包，所以不用再installe。可以直接开整。如下：</p>
<p>调试 <code>mrd.js</code> 并在该文件第一句断点。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node --inspect --debug-brk mrd.js <span class="comment"># debug mrd.js 并在该文件第一句断点</span></div></pre></td></tr></table></figure></p>
<p>打开Chrome在地址栏输入：chrome://inspect </p>
<p>OK！现在可以开始调试了。就是如此简单。</p>
<p><strong>如果想让某次的debug过程重新走，在devtool中随便改行代码，然后保存，就可以重头再走一遍了。</strong></p>
<p>v7+ 版本还可以把以上命令简化为：<code>$ node --inspect-brk mrd.js( v7+)</code><br>我的版本低，没试！</p>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27" target="_blank" rel="external">https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27</a></p>
<p>暂时就这些，后面没有了！(=^ ^=)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;devtool 已经并入node.js v6.3.0以上版本的核心包，所以不用再installe。可以直接开整。如下：&lt;/p&gt;
&lt;p&gt;调试 &lt;code&gt;mrd.js&lt;/code&gt; 并在该文件第一句断点。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="Node.js" scheme="maode.github.io/tags/Node-js/"/>
    
      <category term="DevTools" scheme="maode.github.io/tags/DevTools/"/>
    
  </entry>
  
  <entry>
    <title>命令行（CLI）mrd开发记录</title>
    <link href="maode.github.io/2017/09/26/170926-CLI-mrd/"/>
    <id>maode.github.io/2017/09/26/170926-CLI-mrd/</id>
    <published>2017-09-26T14:28:32.000Z</published>
    <updated>2017-09-28T06:18:51.983Z</updated>
    
    <content type="html"><![CDATA[<p>首先确保安装配置好node.js的环境。官网：<a href="https://nodejs.org" target="_blank" rel="external">https://nodejs.org</a></p>
<h2 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h2><p>创建一个文件夹用来放mrd项目，如 D:\temp\mrd</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">D:\&gt; mkdir D:\temp\mrd</div><div class="line"></div><div class="line">D:\&gt; <span class="built_in">cd</span> temp\mrd</div></pre></td></tr></table></figure>
<p>初始化：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D:\temp\mrd&gt; npm init -y</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>执行完 init 命令会生成 package.json 包信息文件，修改文件内容如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"mrd"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"根据模板生成github博客文件"</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"bin/mrd"</span>,</div><div class="line">  <span class="attr">"bin"</span>: &#123;</div><div class="line">    <span class="attr">"mrd"</span>: <span class="string">"bin/mrd"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"author"</span>: <span class="string">"Code0"</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="attr">"repository"</span>: &#123;</div><div class="line">        <span class="attr">"type"</span>: <span class="string">"git"</span>,</div><div class="line">        <span class="attr">"url"</span>: <span class="string">"https://github.com/maode/mrd.git"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建包信息中的对应的路径和文件。创建完成后目录结构如下：</p>
<p><img src="/assets/blogImg/170926-CLI-1.png" alt=""></p>
<h2 id="mrd-js"><a href="#mrd-js" class="headerlink" title="mrd.js"></a>mrd.js</h2><p>如果依赖的模块没有安装过，要先安装依赖。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env node</span></div><div class="line"></div><div class="line"><span class="comment">//引入用到的模块</span></div><div class="line"><span class="keyword">var</span> shell = <span class="built_in">require</span>(<span class="string">"shelljs"</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> nunjucks = <span class="built_in">require</span>(<span class="string">'nunjucks'</span>);</div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">var</span> dateFormat = <span class="built_in">require</span>(<span class="string">'dateformat'</span>); </div><div class="line"><span class="comment">//定义变量</span></div><div class="line"><span class="keyword">var</span> tpl_path = <span class="string">'D:/GitHubRepo/Blog/post_tpl/A-mrd-temp.md'</span>;</div><div class="line"><span class="keyword">var</span> gen_path = <span class="string">'D:/GitHubRepo/Blog/source/_posts'</span>;</div><div class="line"><span class="keyword">var</span> fname;</div><div class="line"><span class="keyword">var</span> title=<span class="string">"temp"</span>;</div><div class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="keyword">var</span> dtime=dateFormat(now);<span class="comment">//使用挺好看的默认格式</span></div><div class="line"><span class="keyword">var</span> fnamePre=dateFormat(now,<span class="string">"yymmdd"</span>);<span class="comment">//生成文件名前缀</span></div><div class="line"><span class="keyword">var</span> tags;</div><div class="line"></div><div class="line"><span class="comment">//逻辑部分</span></div><div class="line"><span class="keyword">var</span> argv = <span class="built_in">require</span>(<span class="string">'yargs'</span>)</div><div class="line">	.option(<span class="string">'f'</span>,&#123;</div><div class="line">		alias: <span class="string">'from'</span>,</div><div class="line">		demand: <span class="literal">false</span>,</div><div class="line">		<span class="keyword">default</span>: tpl_path,</div><div class="line">		describe: <span class="string">'template path'</span>,</div><div class="line">		type: <span class="string">'string'</span></div><div class="line">	&#125;)</div><div class="line">	.option(<span class="string">'t'</span>,&#123;</div><div class="line">		alias: <span class="string">'to'</span>,</div><div class="line">		demand: <span class="literal">false</span>,</div><div class="line">		<span class="keyword">default</span>: gen_path,</div><div class="line">		describe: <span class="string">'generate path'</span>,</div><div class="line">		type: <span class="string">'string'</span></div><div class="line">	&#125;)</div><div class="line">	.usage(<span class="string">'Usage: mrd &lt;fileName&gt; [title] [tag1 tag2 ……]'</span>)</div><div class="line">	.example(<span class="string">'$ mrd test'</span>, <span class="string">'根据默认模板在默认路径下创建test.md'</span>)</div><div class="line">	.help(<span class="string">'h'</span>)</div><div class="line">	.alias(<span class="string">'h'</span>, <span class="string">'help'</span>)</div><div class="line">	.epilog(<span class="string">'copyright 2017'</span>)</div><div class="line">	.argv;</div><div class="line"></div><div class="line"><span class="comment">// fileName 如果没有任何命令和参数则打印帮助</span></div><div class="line"><span class="keyword">if</span>(argv._[<span class="number">0</span>])&#123;</div><div class="line">	fname=fnamePre+<span class="string">"-"</span>+argv._[<span class="number">0</span>];</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">	<span class="comment">//shell.exec("node mrd.js -h");//开发环境</span></div><div class="line">	shell.exec(<span class="string">"mrd -h"</span>);<span class="comment">//生产环境</span></div><div class="line">	process.exit(<span class="number">0</span>);</div><div class="line">	</div><div class="line">&#125;</div><div class="line"><span class="comment">// title</span></div><div class="line"><span class="keyword">if</span>(argv._[<span class="number">1</span>])&#123;</div><div class="line">	title = argv._[<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="comment">//tags</span></div><div class="line"><span class="keyword">if</span>(argv._[<span class="number">2</span>])&#123;</div><div class="line">	tags=argv._.slice(<span class="number">2</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//路径规范化</span></div><div class="line">argv.f=path.normalize(argv.f);</div><div class="line">argv.t=path.normalize(argv.t);</div><div class="line"><span class="comment">//判断生成文件的路径是否存在</span></div><div class="line"><span class="keyword">if</span>(!fs.existsSync(argv.t))&#123;</div><div class="line">	fs.mkdirSync(argv.t);</div><div class="line">&#125;</div><div class="line"><span class="comment">//读取模板文件</span></div><div class="line"><span class="keyword">var</span> tpl = fs.readFileSync(argv.f).toString();</div><div class="line"><span class="comment">//填充模板数据</span></div><div class="line"><span class="keyword">var</span> compiledData = nunjucks.renderString(tpl,&#123;<span class="attr">title</span>:title,<span class="attr">dtime</span>:dtime,<span class="attr">tags</span>:tags&#125;);</div><div class="line"><span class="keyword">var</span> fpath= path.join(argv.t,fname+<span class="string">'.md'</span>);<span class="comment">//合成生成文件的路径</span></div><div class="line"><span class="comment">//根据模板生成文件</span></div><div class="line">fs.writeFileSync(fpath, compiledData);</div><div class="line"><span class="comment">//用默认程序打开新生成的文件</span></div><div class="line">shell.exec(fpath);</div></pre></td></tr></table></figure></p>
<h2 id="bin-mrd"><a href="#bin-mrd" class="headerlink" title="bin/mrd"></a>bin/mrd</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env node</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'../mrd.js'</span>);</div></pre></td></tr></table></figure>
<h2 id="安装到全局环境"><a href="#安装到全局环境" class="headerlink" title="安装到全局环境"></a>安装到全局环境</h2><p>在mrd目录下执行：<code>D:\temp\mrd&gt; npm install -g .</code><br>或<br>在mrd目录外执行：<code>D:\temp&gt; npm install -g mrd</code></p>
<h2 id="从全局环境卸载"><a href="#从全局环境卸载" class="headerlink" title="从全局环境卸载"></a>从全局环境卸载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm uninstall -g mrd</div></pre></td></tr></table></figure>
<h2 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">D:\temp\mrd&gt;node mrd.js -h</div><div class="line">Usage: mrd &lt;fileName&gt; [title] [tag1 tag2 ……]</div><div class="line"></div><div class="line">Options:</div><div class="line">  -f, --from  template path</div><div class="line">                 [string] [default: <span class="string">"D:/GitHubRepo/Blog/post_tpl/A-mrd-temp.md"</span>]</div><div class="line"></div><div class="line">  -t, --to    generate path</div><div class="line">                          [string] [default: <span class="string">"D:/GitHubRepo/Blog/source/_posts"</span>]</div><div class="line"></div><div class="line">  -h, --<span class="built_in">help</span>  Show <span class="built_in">help</span>                                                [boolean]</div><div class="line"></div><div class="line"></div><div class="line">Examples:</div><div class="line">  mrd <span class="built_in">test</span>  根据默认模板在默认路径下创建test.md</div><div class="line"></div><div class="line">copyright 2017</div></pre></td></tr></table></figure>
<h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p><a href="https://maode.github.io/2017/09/26/170926-nodejs-debug/">https://maode.github.io/2017/09/26/170926-nodejs-debug/</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.ruanyifeng.com/blog/2015/05/command-line-with-node.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/05/command-line-with-node.html</a></p>
<p><a href="http://seejs.me/2016/08/02/commandline/" target="_blank" rel="external">http://seejs.me/2016/08/02/commandline/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先确保安装配置好node.js的环境。官网：&lt;a href=&quot;https://nodejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://nodejs.org&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;开发过程&quot;&gt;&lt;a href=&quot;#开发过程&quot; class=&quot;headerlink&quot; title=&quot;开发过程&quot;&gt;&lt;/a&gt;开发过程&lt;/h2&gt;&lt;p&gt;创建一个文件夹用来放mrd项目，如 D:\temp\mrd&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;D:\&amp;gt; mkdir D:\temp\mrd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;D:\&amp;gt; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; temp\mrd&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;初始化：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;D:\temp\mrd&amp;gt; npm init -y&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CLI" scheme="maode.github.io/tags/CLI/"/>
    
  </entry>
  
  <entry>
    <title>Java 堆、栈、方法区、几种常量池，String</title>
    <link href="maode.github.io/2017/09/19/170919-heap-stack-string/"/>
    <id>maode.github.io/2017/09/19/170919-heap-stack-string/</id>
    <published>2017-09-19T07:32:41.000Z</published>
    <updated>2017-09-28T13:58:01.138Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在JAVA中，数据的交互存在于以下地方：</strong></p>
<p><strong>寄存器（register）：</strong> 位于CPU。<br><strong>栈（stack）：</strong> 位于RAM。<br><strong>堆（heap）：</strong> 位于RAM。<br><strong>方法区（PermGen）：</strong> 位于RAM。<br><strong>非RAM存储：</strong> 如硬盘等其它存储空间。</p>
<p><strong>就速度来说，从快到慢依次为： 寄存器 &gt; 栈 &gt; 堆 &gt; 方法区 &gt; 非RAM存储。</strong></p>
<p><strong>JAVA的JVM的内存可分为3个区：<code>栈(stack)</code>、<code>堆(heap)</code>和<code>方法区(PermGen)</code>也叫永久代。</strong></p>
<a id="more"></a>
<h2 id="寄存器（register）"><a href="#寄存器（register）" class="headerlink" title="寄存器（register）"></a><strong>寄存器（register）</strong></h2><p> 这是最快的存储区，因为它位于不同于其他存储区的地方——处理器内部。但是寄存器的数量极其有限，所以寄存器由编译器根据需求进行分配。你不能直接控制，也不能在程序中感觉到寄存器存在的任何迹象。    </p>
<ul>
<li>最快的存储区, 由编译器根据需求进行分配,我们在程序中无法控制.</li>
</ul>
<h2 id="栈（stack）"><a href="#栈（stack）" class="headerlink" title="栈（stack）"></a><strong>栈（stack）</strong></h2><p>位于通用RAM中，通过它的“栈指针”可以从处理器那里获得支持。栈指针若向下移动，则分配新的内存；若向上移动，则释放那些内存。这是一种快速有效的分配存储方法，仅次于寄存器。程序编译时，JAVA编译器必须知道存储在栈内所有数据的确切大小和生命周期，因为它必须生成相应的代码，以便上下移动栈指针。这一约束限制了程序的灵活性。    </p>
<ul>
<li><p><strong>每个线程包含一个栈区</strong>，栈中只存放<strong>局部变量</strong> <a id="i1" href="#1">^1</a> （包含基本类型和引用类型）。因为基本类型变量的变量值存的是字面<a href="https://zh.wikipedia.org/wiki/%E5%80%BC_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8)" target="_blank" rel="external">值</a>，是 基本类型【原始类型|值类型】,所以大小可知。如<code>int a = 3;</code>  这里的a是一个int类型<a id="i2" href="#2">^2</a>的变量，指向<code>3</code>这个值。这些字面值的数据，由于大小可知，生存期可知【这些字面值固定定义在某个程序块里面，程序块退出后，字面值生存期就结束了】，出于追求速度的原因，就存在于栈中了，而对象由于大小不可知，所以栈中只存放了对象的引用。</p>
</li>
<li><p>每个栈中的数据都是私有的，其他栈不能访问。</p>
</li>
<li><p>栈中的<strong>基本类型</strong>变量值在该栈中是可以被共享的（共享性质有点<code>类似</code>字符串常量池，相同的值只会被创建一次）。如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a=<span class="number">3</span>;</div><div class="line"><span class="keyword">int</span> b=<span class="number">3</span>;</div></pre></td></tr></table></figure>
<p>编译器先处理<code>int a = 3；</code>首先它会在栈中创建一个 <a href="https://zh.wikipedia.org/wiki/%E5%8F%98%E9%87%8F_(%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1)#.E5.9C.A8.E6.BA.90.E4.BB.A3.E7.A0.81.E4.B8.AD" target="_blank" rel="external">变量</a> a，然后查找栈中是否有3这个值，如果没找到，就在栈中开辟一块空间将3这个值存放进来，然后将a指向3的地址。接着处理<code>int b = 3；</code>在创建完b的变量后，因为在栈中已经有3这个值，便将b直接指向3的地址。这样，就出现了a与b同时均指向3的情况。 特别注意的是，这种基本类型的变量与引用类型的变量不同。假定两个引用类型的变量同时指向一个对象，如果一个变量修改了这个对象的内部状态，那么另一个变量也即刻反映出这个变化。相反，如果是两个基本类型的变量，修改其中一个的值，不会导致另一个指向此字面值的变量也跟着改变的情况。如上例，我们定义完 a 与 b 的值后，再令a=4；那么，b不会等于4，还是等于3。在编译器内部，遇到a=4；时，它就会重新搜索栈中是否有4的字面值，如果没有，重新开辟地址存放4的值；如果已经有了，则直接将a指向这个地址。因此a值的改变不会影响到b的值。</p>
</li>
</ul>
<h2 id="堆（heap）"><a href="#堆（heap）" class="headerlink" title="堆（heap）"></a><strong>堆（heap）</strong></h2><p>一种通用性的内存池（也存在于RAM中），用于存放所有的JAVA对象，无论是成员变量，局部变量，还是类变量，它们指向的对象都存储在堆中。堆不同于栈的好处是：编译器不需要知道要从堆里分配多少存储区域，也不必知道存储的数据在堆里存活多长时间。因此，在堆里分配存储有很大的灵活性。当没有引用指向堆中的对象时，垃圾回收机制会在恰当的时候将其回收掉。当然，为这种灵活性必须要付出相应的代价。用堆进行存储分配比用栈进行存储需要更多的时间。  </p>
<ul>
<li><strong>jvm只有一个堆区(heap)，该区域被所有线程共享。</strong> 存储的全部是对象实例。堆中不存放<code>基本类型</code>和<code>对象的引用</code>，只存放对象本身，[<strong>几乎</strong>]所有的 <code>对象实例</code> 和 <code>数组</code> 都在堆中分配。</li>
</ul>
<h2 id="方法区（PermGen）"><a href="#方法区（PermGen）" class="headerlink" title="方法区（PermGen）"></a><strong>方法区（PermGen）</strong></h2><p>又叫永久代，跟堆一样，<strong>被所有的线程共享</strong>。它用于存储已经被虚拟机加载的<code>类信息</code>、<code>常量</code>、<code>静态变量</code>、<code>即时编译器编译后的代码</code>等数据。</p>
<ul>
<li><p>JDK7之前 <code>运行时常量池</code> <code>字符串常量池</code> 还有很多<a href="#关于java的元数据">元数据</a>都在方法区。</p>
</li>
<li><p>JDK7开始执行 PermGen移除（去永久代）计划，JDK8彻底移除PermGen。</p>
</li>
<li><p>JDK8彻底移除PermGen后，原本方法区中的这些对象被挪到GC堆外的一块叫做Metaspace的空间里做特殊管理，仍然间接的受GC管理。</p>
</li>
</ul>
<h2 id="非RAM存储"><a href="#非RAM存储" class="headerlink" title="非RAM存储"></a><strong>非RAM存储</strong></h2><p>硬盘等永久存储空间。若数据完全独立于一个程序之外，则程序不运行时仍可存在，并在程序的控制范围之外。其中两个最主要的例子便是“流式对象”和“固定对象”。对于流式对象，对象会变成字节流，通常会发给另一台机器，而对于固定对象，对象保存在磁盘中。即使程序中止运行，它们仍可保持自己的状态不变。对于这些类型的数据存储，一个特别有用的技艺就是它们能存在于其他媒体中，一旦需要，甚至能将它们恢复成普通的、基于RAM的对象。</p>
<h1 id="几种常量池介绍"><a href="#几种常量池介绍" class="headerlink" title="几种常量池介绍"></a>几种常量池介绍</h1><h2 id="Class文件常量池"><a href="#Class文件常量池" class="headerlink" title="Class文件常量池"></a><strong>Class文件常量池</strong></h2><p>存在于java文件编译完成后的Class文件中, Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池(Constant Pool Table)，存放编译期生成的各种<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E9%9D%A2%E5%B8%B8%E9%87%8F_(C%E8%AF%AD%E8%A8%80)" target="_blank" rel="external">字面量</a>和符号引用，这部分内容将在类加载后进入方法区的运行时常量池。</p>
<p>这里面主要存放两大类常量：</p>
<ul>
<li><p><a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E9%9D%A2%E5%B8%B8%E9%87%8F_(C%E8%AF%AD%E8%A8%80)" target="_blank" rel="external">字面量</a>(Literal)：用双引号引起来的字符串 等。</p>
</li>
<li><p>符号引用(Symbolic References)：属于编译原理方面的概念，包含三类常量：</p>
<ul>
<li><p>类和接口的全限定名(Full Qualified Name)</p>
</li>
<li><p>字段的名称和描述符(Descriptor)</p>
</li>
<li><p>方法的名称和描述符</p>
</li>
</ul>
</li>
</ul>
<p>这些可以用<a href="https://maode.github.io/2017/09/18/170918-javap/">javap</a>命令进行查看。</p>
<h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a><strong>运行时常量池</strong></h2><p>方法区的一部分。类加载后由 Class文件 衍生的产物，Class文件常量池中的数据 在类加载后进入运行时常量池。</p>
<p><a href="http://wiki.jikexueyuan.com/project/java-vm/class-loading-mechanism.html" target="_blank" rel="external">类在加载时</a>的 解析（resolve）阶段 虚拟机会将 Class文件常量池 内的数据加载到 运行时常量池 中（符号引用会替换为直接引用）。但String类型的字面量有点特殊，Class文件常量池中 String字面量牵扯到两个常量池项的类型 <code>CONSTANT_Utf8</code> 和 <code>CONSTANT_String</code>  后者是String常量的类型，但它并不直接持有String常量的内容，而是只持有一个index，这个index所指定的另一个常量池项必须是一个CONSTANT_Utf8类型的常量，而CONSTANT_Utf8才真正指向持有字符串内容的对象。<br>CONSTANT_Utf8会在类加载的过程中就全部创建出来，而CONSTANT_String则是lazy resolve的，它会在<strong>第一次引用该项的【地方】ldc指令被第一次执行到的时候</strong>才会resolve。在尚未resolve的时候，HotSpot VM<a id="i3" href="#3">^3</a>把它的类型叫做JVM_CONSTANT_UnresolvedString，内容跟Class文件里一样只是一个index；等到resolve过后这个项的常量类型就会变成最终的JVM_CONSTANT_String，而内容则变成实际的那个字符串对象引用。<br><strong>总结：</strong><br>CONSTANT_Utf8 会在类加载时 resolve 阶段进入运行时常量池。<br>CONSTANT_String 是lazy resolve 的，此时不会进入运行时常量池。</p>
<p>最直接的<strong>体现</strong>或者可以说：该字符串字面量对象的引用 进入了运行时常量池，但 该字符串字面量对象的引用 未进入字符串常量池。</p>
<p><strong>关于<code>CONSTANT_Utf8</code> 和 <code>CONSTANT_String</code> ：</strong><br>CONSTANT_Utf8：</p>
<ul>
<li><p>CONSTANT_Utf8 -&gt; Symbol* -&gt; Symbol      </p>
<p>  CONSTANT_Utf8指向一个Symbol对象的指针，然后该指针指向一个Symbol对象 。<br>  Symbol*： 指向Symbol对象的指针。<br>  Symbol：一个固定长度的头部和一个可变长度、装有实际字符内容的尾部。<a id="i4" href="#4">^4</a></p>
</li>
</ul>
<p>CONSTANT_String：</p>
<ul>
<li>CONSTANT_String 在尚未resolve的时候，HotSpot VM把它的类型叫做JVM_CONSTANT_UnresolvedString。</li>
<li>未 resolve 时的它只是持有一个指向 CONSTANT_Utf8 的指针【index】，而当 resolve 过后，则指向一个实际的Java对象的引用。</li>
<li>一个 CONSTANT_String项  在第一次被执行ldc指令时会被 resolve， 此时会去到字符串常量池查找，字符串常量池支持以Symbol为key来查询是否已经有<strong>内容匹配</strong>的项存在与否，存在则直接返回匹配项的引用，不存在则创建出内容匹配的<strong>java.lang.String对象</strong>。没错，是创建和Symbol对象的内容相匹配的<strong>java.lang.String对象</strong>，然后返回该对象的引用，并将该引用驻留在 字符串常量池。</li>
</ul>
<h2 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a><strong>字符串常量池</strong></h2><p>HotSpot VM里，记录interned string的一个全局表叫做StringTable，即：【[全局]字符串常量池】，它本质上就是个HashSet<string>，是HotSpot VM里用来实现字符串驻留功能的全局数据结构。这是个纯运行时的结构，而且是惰性（lazy）维护的。注意它只存储对java.lang.String实例的引用，而不存储String对象的内容。 注意，它只存了引用，根据这个引用可以得到具体的String对象。在驻留的过程中，StringTable::lookup() 函数是必经之路，是用来探测（probe）看某个字符串是否已经驻留在StringTable里了。</string></p>
<p>一般我们说一个字符串<strong>进入了全局的字符串常量池</strong>其实是说<strong>在这个StringTable中保存了对它的引用</strong>，反之，如果说没有在其中就是说StringTable中没有对它的引用。</p>
<p>JVM层面触发的字符串驻留（例如把Class文件里的CONSTANT_String类型常量转换为运行时对象，即：执行ldc指令的时候），以及Java代码主动触发的字符串驻留（java.lang.String.intern()），两种请求都由StringTable来处理，<strong>就是说触发字符串进入字符串常量池有两种情况</strong>。</p>
<ol>
<li>JVM层面触发：<br>一个字符串字面量在第一次引用它的地方,ldc指令被第一次执行到的时候。</li>
<li>java代码主动触发：<br>一个String对象首次执行intern()方法，且当前字符串常量池没有与该对象<strong>内容相同</strong>的对象的引用驻留时。</li>
</ol>
<p>以上两种情况都会在堆中创建String对象，并将引用驻留StringTable。</p>
<h2 id="关于-String"><a href="#关于-String" class="headerlink" title="关于 String"></a><strong>关于 String</strong></h2><p><strong>new：</strong><br>当我们使用了new来构造字符串对象的时候，不管字符串常量池中有没有相同内容的对象的引用，新的字符串对象都会在堆中被创建。</p>
<p><strong>intern：</strong><br>对象调用intern方法后，首先检查字符串常量池中是否有和该对象的<strong>内容相同</strong>的对象的引用，如果存在，则将这个引用返回，否则将该对象的引用加入并返回。</p>
<p><strong>摘抄的例子：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewTest1</span></span>&#123; </div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String ss1=<span class="string">"static"</span>; <span class="comment">// 第一句 </span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">		String s1=<span class="keyword">new</span> String(<span class="string">"he"</span>)+<span class="keyword">new</span> String(<span class="string">"llo"</span>); <span class="comment">//第二句 </span></div><div class="line">		s1.intern(); <span class="comment">// 第三句 </span></div><div class="line">		String s2=<span class="string">"hello"</span>; <span class="comment">//第四句 </span></div><div class="line">		System.out.println(s1==s2);<span class="comment">//第五句，输出是true。 </span></div><div class="line">	&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>“static” “he” “llo” “hello”都会进入Class的常量池， 按照上面说的，类加载阶段由于resolve 阶段是lazy的，所以是不会创建实例，更不会驻留字符串常量池了。但是要注意这个“static”和其他三个不一样，它是静态的，在类加载阶段中的初始化阶段，会为静态变量指定初始值，也就是要把“static”赋值给ss1，这个赋值操作要怎么搞啊，先ldc指令把它放到栈顶，然后用putstatic指令完成赋值。注意，ldc指令，根据上面说的，会创建”static”字符串对象，并且会保存一个指向它的引用到字符串常量池。OK！ 这是第一句。</p>
<p>运行main方法后，首先是第二句，一样的，要先用ldc把”he”和”llo”送到栈顶，换句话说，会创建他俩的对象，并且会保存引用到字符串常量池中；然后有个 “＋” 号对吧，内部是创建了一个StringBuilder对象，一路append，最后调用StringBuilder对象的toString方法得到一个String对象（内容是hello，注意这个toString方法会new一个String对象），并把它赋值给s1。注意啊，没有把hello的引用放入字符串常量池。</p>
<p>然后是第三句，intern方法一看，字符串常量池里面没有，它会把上面的这个hello对象的引用保存到字符串常量池，然后返回这个引用，但是这个返回值我们并没有使用变量去接收，所以没用。</p>
<p>第四句，字符串常量池里面已经有了，直接用嘛</p>
<p>第五句，已经很明显了。</p>
<p>再看另外一段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewTest2</span></span>&#123; </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">		String s1=<span class="keyword">new</span> String(<span class="string">"he"</span>)+<span class="keyword">new</span> String(<span class="string">"llo"</span>); <span class="comment">// 第一句</span></div><div class="line">		String s2=<span class="keyword">new</span> String(<span class="string">"h"</span>)+<span class="keyword">new</span> String(<span class="string">"ello"</span>); <span class="comment">// 第二句</span></div><div class="line">		String s3=s1.intern(); <span class="comment">// 第三句 </span></div><div class="line">		String s4=s2.intern(); <span class="comment">// 第四句</span></div><div class="line">		System.out.println(s1==s3); </div><div class="line">		System.out.println(s1==s4); </div><div class="line">	&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>类加载阶段，什么都没干。</p>
<p>然后运行main方法，先看第一句，会创建”he”和”llo”对象，并放入字符串常量池，然后会创建一个”hello”对象，没有放入字符串常量池，s1指向这个”hello”对象。</p>
<p>第二句，创建”h”和”ello”对象，并放入字符串常量池，然后会创建一个”hello”对象，没有放入字符串常量池，s2指向这个”hello”对象。</p>
<p>第三句，字符串常量池里面还没有，于是会把s1指向的String对象的引用放入字符串常量池（换句话说，放入池中的引用和s1指向了同一个对象），然后会把这个引用返回给了s3，所以s3==s1是true。</p>
<p>第四句，字符串常量池里面已经有了，直接将它返回给了s4，所以s4==s1是true。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><p>部分资料有疏漏和一些笼统[错误]的观点，参考时需与其他资料互相印证。<br>★标记的资料是我认为没有错误的资料，是我的最终参考，准确度、含金量 最高。<br><a href="https://www.zhihu.com/question/55994121" target="_blank" rel="external">https://www.zhihu.com/question/55994121</a>    ★<br><a href="https://www.zhihu.com/question/29833675" target="_blank" rel="external">https://www.zhihu.com/question/29833675</a>    ★<br><a href="http://rednaxelafx.iteye.com/blog/1847971#comments" target="_blank" rel="external">http://rednaxelafx.iteye.com/blog/1847971#comments</a>    ★<br><a href="http://rednaxelafx.iteye.com/blog/774673#comments" target="_blank" rel="external">http://rednaxelafx.iteye.com/blog/774673#comments</a>    ★<br><a href="http://droidyue.com/blog/2014/12/21/string-literal-pool-in-java/index.html" target="_blank" rel="external">http://droidyue.com/blog/2014/12/21/string-literal-pool-in-java/index.html</a>    ☆<br><a href="http://www.cnblogs.com/xiohao/p/4296088.html" target="_blank" rel="external">http://www.cnblogs.com/xiohao/p/4296088.html</a><br><a href="http://www.fhadmin.org/Blog/article/10000002.html" target="_blank" rel="external">http://www.fhadmin.org/Blog/article/10000002.html</a></p>
<h2 id="附录："><a href="#附录：" class="headerlink" title="附录："></a><strong>附录：</strong></h2><h3 id="关于java的元数据"><a href="#关于java的元数据" class="headerlink" title="关于java的元数据"></a>关于java的元数据</h3><p>HotSpot VM 里有一套对象专门用来存放元数据，它们包括： </p>
<ul>
<li>Klass系对象。元数据的最主要入口。用于描述类型的总体信息</li>
<li>ConstantPool/ConstantPoolCache对象。每个InstanceKlass关联着一个ConstantPool，作为该类型的运行时常量池。这个常量池的结构跟Class文件里的常量池基本上是对应的。可以参考<a href="http://hllvm.group.iteye.com/group/topic/26412#post-187861" target="_blank" rel="external">R大以前的一个回帖</a>。ConstantPoolCache主要用于存储某些字节码指令所需的解析（resolve）好的常量项，例如给[get|put]static、[get|put]field、invoke[static|special|virtual|interface|dynamic]等指令对应的常量池项用。</li>
<li>Method对象，用来描述Java方法的总体信息，像是方法入口地址、调用/循环计数器等等</li>
<li>ConstMethod对象，记录着Java方法的不变的描述信息，包括方法名、方法的访问修饰符、<strong>字节码</strong>、行号表、局部变量表等等。注意了，字节码就嵌在这ConstMethod对象里面。</li>
<li>Symbol对象，对应Class文件常量池里的JVM_CONSTANT_Utf8类型的常量。有一个VM全局的SymbolTable管理着所有Symbol。Symbol由所有Java类所共享。</li>
<li>MethodData对象，记录着Java方法执行时的profile信息，例如某方法里的某个字节码之类是否从来没遇到过null，某个条件跳转是否总是走同一个分支，等等。这些信息在解释器（多层编译模式下也在低层的编译生成的代码里）收集，然后供给HotSpot Server Compiler用于做激进优化。</li>
</ul>
<p>在PermGen移除前，上述元数据对象都在PermGen里，直接被GC管理着。<br>JDK8彻底移除PermGen后，这些对象被挪到GC堆外的一块叫做Metaspace的空间里做特殊管理，仍然间接的受GC管理。</p>
<hr>
<p><a id="1"><br>①</a> 变量是变量，变量名是变量名，变量值是变量值，对象是对象，对象的引用是对象的引用。<br>变量 由: <strong>“一个包含部分已知或未知数值或资讯（即一个<a href="https://zh.wikipedia.org/wiki/%E5%80%BC_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8)" target="_blank" rel="external">值</a>）之<a href="https://zh.wikipedia.org/wiki/%E8%A8%98%E6%86%B6%E9%AB%94%E4%BD%8D%E5%9D%80" target="_blank" rel="external">储存位址</a>”</strong> —— 变量值，以及 <strong>“相对应之<a href="https://zh.wikipedia.org/wiki/%E7%AC%A6%E8%99%9F" target="_blank" rel="external">符号名称</a>（<a href="https://zh.wikipedia.org/wiki/%E6%A8%99%E8%AD%98%E7%AC%A6" target="_blank" rel="external">识别字</a>）”</strong> —— 变量名，组成。<br>如：<br><code>int a = 1;</code>    a变量 的变量名为符号 ‘a’ ，变量值为<a href="https://zh.wikipedia.org/wiki/%E5%80%BC_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8)" target="_blank" rel="external">值</a> ‘3’。<br><code>Test t = new Test();</code> t变量 的变量名为符号 ‘t’ ，变量值为一个Test对象在内存中的存储位置（即对象的引用）。<br><a href="#i1"> ↩ </a></p>
<p><a id="2"><br>②</a> int有class但不是类,其它基本类型也是如此，int.class对应的Class对象是JVM合成出来的，并不是从Class文件加载出来的，在JVM初始化的时候就会把原始类型和void对应的Class对象创建出来。这些Class对象的创建不依赖任何外部信息，(例如说需要从Class文件加载的信息)，不需要经历类加载过程，而纯粹是JVM的实现细节。<br><a href="#i2"> ↩ </a></p>
<p><a id="3"><br>③</a> JVM的一种实现，早期由Sun维护目前由Oracle，JVM有不止一种实现。<a href="https://zh.wikipedia.org/wiki/HotSpot" target="_blank" rel="external">HotSpot VM</a><br><a href="#i3"> ↩ </a></p>
<p><a id="4"><br>④</a> JDK6及之前的HotSpot VM使用symbolOop来实现CONSTANT_Utf8的内容，symbolOop存放在PermGen里；JDK7开始HotSpot VM把symbol移到了native memory里，类型名改为Symbol。跟StringTable相似，Symbol的管理也是有一个SymbolTable来管理的。所有Symbol都是interned在SymbolTable里的。同样SymbolTable里只存Symbol*（指向Symbol对象的指针）而不存Symbol自身的内容。<br><a href="#i4"> ↩ </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;在JAVA中，数据的交互存在于以下地方：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;寄存器（register）：&lt;/strong&gt; 位于CPU。&lt;br&gt;&lt;strong&gt;栈（stack）：&lt;/strong&gt; 位于RAM。&lt;br&gt;&lt;strong&gt;堆（heap）：&lt;/strong&gt; 位于RAM。&lt;br&gt;&lt;strong&gt;方法区（PermGen）：&lt;/strong&gt; 位于RAM。&lt;br&gt;&lt;strong&gt;非RAM存储：&lt;/strong&gt; 如硬盘等其它存储空间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;就速度来说，从快到慢依次为： 寄存器 &amp;gt; 栈 &amp;gt; 堆 &amp;gt; 方法区 &amp;gt; 非RAM存储。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JAVA的JVM的内存可分为3个区：&lt;code&gt;栈(stack)&lt;/code&gt;、&lt;code&gt;堆(heap)&lt;/code&gt;和&lt;code&gt;方法区(PermGen)&lt;/code&gt;也叫永久代。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="heap、stack" scheme="maode.github.io/tags/heap%E3%80%81stack/"/>
    
      <category term="堆、栈" scheme="maode.github.io/tags/%E5%A0%86%E3%80%81%E6%A0%88/"/>
    
      <category term="常量池" scheme="maode.github.io/tags/%E5%B8%B8%E9%87%8F%E6%B1%A0/"/>
    
      <category term="String" scheme="maode.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>【转载】Java字节码指令</title>
    <link href="maode.github.io/2017/09/18/170918-java-bytecode/"/>
    <id>maode.github.io/2017/09/18/170918-java-bytecode/</id>
    <published>2017-09-18T13:27:21.000Z</published>
    <updated>2017-09-28T13:54:36.626Z</updated>
    
    <content type="html"><![CDATA[<p>介绍java虚拟机的指令功能，至少能阅读java代码生成的字节码指令含义</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java虚拟机采用基于栈的架构，其指令由操作码和操作数组成。</p>
<ul>
<li>操作码：一个字节长度(0~255)，意味着指令集的操作码个数不能操作256条。</li>
<li>操作数：一条指令可以有零或者多个操作数，且操作数可以是1个或者多个字节。编译后的代码没有采用操作数长度对齐方式，比如16位无符号整数需使用两个字节储存(假设为byte1和byte2)，那么真实值是 <code>(byte1 &lt;&lt; 8) | byte2</code>。</li>
</ul>
<p>放弃操作数对齐操作数对齐方案：</p>
<ul>
<li>优势：可以省略很多填充和间隔符号，从而减少数据量，具有更高的传输效率；Java起初就是为了面向网络、智能家具而设计的，故更加注重传输效率。</li>
<li>劣势：运行时从字节码里构建出具体数据结构，需要花费部分CPU时间，从而导致解释执行字节码会损失部分性能。</li>
</ul>
<a id="more"></a>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>大多数指令包含了其操作所对应的数据类型信息，比如iload，表示从局部变量表中加载int型的数据到操作数栈；而fload表示加载float型数据到操作数栈。由于操作码长度只有1Byte，因此Java虚拟机的指令集对于特定操作只提供有限的类型相关指令，并非为每一种数据类型都有相应的操作指令。必要时，有些指令可用于将不支持的类型转换为可被支持的类型。</p>
<p>对于byte,short,char,boolean类型，往往没有单独的操作码，通过编译器在编译期或者运行期将其扩展。对于byte,short采用带符号扩展，chart,boolean采用零位扩展。相应的数组也是采用类似的扩展方式转换为int类型的字节码来处理。 下面分门别类来介绍Java虚拟机指令，都以int类型的数据操作为例。</p>
<p>栈是指操作数栈</p>
<h3 id="栈操作相关"><a href="#栈操作相关" class="headerlink" title="栈操作相关"></a>栈操作相关</h3><ul>
<li><p>load和store</p>
<ul>
<li>load 命令：用于将局部变量表的指定位置的相应类型变量加载到栈顶；</li>
<li>store命令：用于将栈顶的相应类型数据保入局部变量表的指定位置；</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>变量进栈</th>
<th>含义</th>
<th>变量保存</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>iload</td>
<td>第1个int型变量进栈</td>
<td>istore</td>
<td>栈顶nt数值存入第1局部变量</td>
</tr>
<tr>
<td>iload_0</td>
<td>第1个int型变量进栈</td>
<td>istore_0</td>
<td>栈顶int数值存入第1局部变量</td>
</tr>
<tr>
<td>iload_1</td>
<td>第2个int型变量进栈</td>
<td>istore_1</td>
<td>栈顶int数值存入第2局部变量</td>
</tr>
<tr>
<td>iload_2</td>
<td>第3个int型变量进栈</td>
<td>istore_2</td>
<td>栈顶int数值存入第3局部变量</td>
</tr>
<tr>
<td>iload_3</td>
<td>第4个int型变量进栈</td>
<td>istore_3</td>
<td>栈顶int数值存入第4局部变量</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>lload</td>
<td>第1个long型变量进栈</td>
<td>lstore</td>
<td>栈顶long数值存入第1局部变量</td>
</tr>
<tr>
<td>fload</td>
<td>第1个float型变量进栈</td>
<td>fstore</td>
<td>栈顶float数值存入第1局部变量</td>
</tr>
<tr>
<td>dload</td>
<td>第1个double型变量进栈</td>
<td>dstore</td>
<td>栈顶double数值存入第1局部变量</td>
</tr>
<tr>
<td>aload</td>
<td>第1个ref型变量进栈</td>
<td>astore</td>
<td>栈顶ref对象存入第1局部变量</td>
</tr>
</tbody>
</table>
<ul>
<li><p>const、push和ldc</p>
<ul>
<li>const、push：将相应类型的常量放入栈顶</li>
<li>ldc:则是从常量池中将常量</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>常量进栈</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>aconst_null</td>
<td>null进栈</td>
</tr>
<tr>
<td>iconst_m1</td>
<td>int型常量-1进栈</td>
</tr>
<tr>
<td>iconst_0</td>
<td>int型常量0进栈</td>
</tr>
<tr>
<td>iconst_1</td>
<td>int型常量1进栈</td>
</tr>
<tr>
<td>iconst_2</td>
<td>int型常量2进栈</td>
</tr>
<tr>
<td>iconst_3</td>
<td>int型常量3进栈</td>
</tr>
<tr>
<td>iconst_4</td>
<td>int型常量4进栈</td>
</tr>
<tr>
<td>iconst_5</td>
<td>int型常量5进栈</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>lconst_0</td>
<td>long型常量0进栈</td>
</tr>
<tr>
<td>fconst_0</td>
<td>float型常量0进栈</td>
</tr>
<tr>
<td>dconst_0</td>
<td>double型常量0进栈</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>bipush</td>
<td>byte型常量进栈</td>
</tr>
<tr>
<td>sipush</td>
<td>short型常量进栈</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>常量池操作</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>ldc</td>
<td>int、float或String型常量从常量池推送至栈顶</td>
</tr>
<tr>
<td>ldc_w</td>
<td>int、float或String型常量从常量池推送至栈顶（宽索引）</td>
</tr>
<tr>
<td>ldc2_w</td>
<td>long或double型常量从常量池推送至栈顶（宽索引）</td>
</tr>
</tbody>
</table>
<ul>
<li><p>pop和dup</p>
<ul>
<li>pop用于栈顶数值出栈操作；</li>
<li>dup用于赋值栈顶的指定个数的数值，并将其压入栈顶指定次数；</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>栈顶操作</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>pop</td>
<td>栈顶数值出栈(不能是long/double)</td>
</tr>
<tr>
<td>pop2</td>
<td>栈顶数值出栈(long/double型1个，其他2个)</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>dup</td>
<td>复制栈顶数值，并压入栈顶</td>
</tr>
<tr>
<td>dup_x1</td>
<td>复制栈顶数值，并压入栈顶2次</td>
</tr>
<tr>
<td>dup_x2</td>
<td>复制栈顶数值，并压入栈顶3次</td>
</tr>
<tr>
<td>dup2</td>
<td>复制栈顶2个数值，并压入栈顶</td>
</tr>
<tr>
<td>dup2_x1</td>
<td>复制栈顶2个数值，并压入栈顶2次</td>
</tr>
<tr>
<td>dup2_x2</td>
<td>复制栈顶2个数值，并压入栈顶3次</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>swap</td>
<td>栈顶的两个数值互换，且不能是long/double</td>
</tr>
</tbody>
</table>
<p><strong>注意：dup2</strong>对于long、double类型的数据就是一个，对于其他类型的数据，才是真正的两个，这个的2代表的是2个slot的数据。</p>
<h3 id="对象相关"><a href="#对象相关" class="headerlink" title="对象相关"></a>对象相关</h3><ul>
<li>字段调用</li>
</ul>
<table>
<thead>
<tr>
<th>字段调用</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>getstatic</td>
<td>获取类的静态字段，将其值压入栈顶</td>
</tr>
<tr>
<td>putstatic</td>
<td>给类的静态字段赋值</td>
</tr>
<tr>
<td>getfield</td>
<td>获取对象的字段，将其值压入栈顶</td>
</tr>
<tr>
<td>putfield</td>
<td>给对象的字段赋值</td>
</tr>
</tbody>
</table>
<ul>
<li>方法调用</li>
</ul>
<table>
<thead>
<tr>
<th>方法调用</th>
<th>作用</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>invokevirtual</td>
<td>调用实例方法</td>
<td>虚方法分派</td>
</tr>
<tr>
<td>invokestatic</td>
<td>调用类方法</td>
<td>static方法</td>
</tr>
<tr>
<td>invokeinterface</td>
<td>调用接口方法</td>
<td>运行时搜索合适方法调用</td>
</tr>
<tr>
<td>invokespecial</td>
<td>调用特殊实例方法</td>
<td>包括实例初始化方法、父类方法</td>
</tr>
<tr>
<td>invokedynamic</td>
<td>由用户引导方法决定</td>
<td>运行时动态解析出调用点限定符所引用方法</td>
</tr>
</tbody>
</table>
<ul>
<li>方法返回</li>
</ul>
<table>
<thead>
<tr>
<th>方法返回</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>ireturn</td>
<td>当前方法返回int</td>
</tr>
<tr>
<td>lreturn</td>
<td>当前方法返回long</td>
</tr>
<tr>
<td>freturn</td>
<td>当前方法返回float</td>
</tr>
<tr>
<td>dreturn</td>
<td>当前方法返回double</td>
</tr>
<tr>
<td>areturn</td>
<td>当前方法返回ref</td>
</tr>
</tbody>
</table>
<ul>
<li>对象和数组</li>
</ul>
<ul>
<li>创建类实例： new</li>
<li>创建数组：newarray、anewarray、multianewarray</li>
<li>数组元素 加载到 操作数栈：xaload (x可为b,c,s,i,l,f,d,a)</li>
<li>操作数栈的值 存储到数组元素： xastore (x可为b,c,s,i,l,f,d,a)</li>
<li>数组长度：arraylength</li>
<li>类实例类型：instanceof、checkcast</li>
</ul>
<h3 id="运算指令"><a href="#运算指令" class="headerlink" title="运算指令"></a>运算指令</h3><p>运算指令是用于对操作数栈上的两个数值进行某种运算，并把结果重新存入到操作栈顶。Java虚拟机只支持整型和浮点型两类数据的运算指令，所有指令如下：</p>
<table>
<thead>
<tr>
<th>运算</th>
<th>int</th>
<th>long</th>
<th>float</th>
<th>double</th>
</tr>
</thead>
<tbody>
<tr>
<td>加法</td>
<td>iadd</td>
<td>ladd</td>
<td>fadd</td>
<td>dadd</td>
</tr>
<tr>
<td>减法</td>
<td>isub</td>
<td>lsub</td>
<td>fsub</td>
<td>dsub</td>
</tr>
<tr>
<td>乘法</td>
<td>imul</td>
<td>lmul</td>
<td>fmul</td>
<td>dmul</td>
</tr>
<tr>
<td>除法</td>
<td>idiv</td>
<td>ldiv</td>
<td>fdiv</td>
<td>ddiv</td>
</tr>
<tr>
<td>求余</td>
<td>irem</td>
<td>lrem</td>
<td>frem</td>
<td>drem</td>
</tr>
<tr>
<td>取反</td>
<td>ineg</td>
<td>lneg</td>
<td>fneg</td>
<td>dneg</td>
</tr>
</tbody>
</table>
<p><strong>其他运算：</strong></p>
<ul>
<li>位移：ishl,ishr,iushr,lshl,lshr,lushr</li>
<li>按位或： ior,lor</li>
<li>按位与： iand, land</li>
<li>按位异或： ixor, lxor</li>
<li>自增：iin</li>
<li>比较：dcmpg,dcmpl,fcmpg,fcmpl,lcmp</li>
</ul>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>类型转换用于将两种不同类型的数值进行转换。</p>
<p>(1) 对于宽化类型转换(小范围向大范围转换)，无需显式的转换指令，并且是安全的操作。各种范围从小到大依次排序： int, long, float, double。</p>
<p>(2)对于窄化类型转换，必须显式地调用类型转换指令，并且该过程很可能导致精度丢失。转换规则中需要特别注意的是当浮点值为NaN, 则转换结果为int或long的0。虽然窄化运算可能会发生上/下限溢出和精度丢失等情况，但虚拟机规范明确规定窄化转换U不可能导致虚拟机抛出异常。</p>
<p>类型转换指令：<code>i2b, i2c,f2i</code>等等。</p>
<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>控制指令是指有条件或无条件地修改PC寄存器的值，从而达到控制流程的目标</p>
<ul>
<li>条件分支：ifeq、iflt、ifnull、ifnonnull等</li>
<li>复合分支：tableswitch、lookupswitch</li>
<li>无条件分支：goto、goto_w、jsr、jsr_w、ret</li>
</ul>
<h3 id="同步与异常"><a href="#同步与异常" class="headerlink" title="同步与异常"></a>同步与异常</h3><p><strong>异常：</strong></p>
<p>Java程序显式抛出异常： athrow指令。在Java虚拟机中，处理异常(catch语句)不是由字节码指令来实现，而是采用异常表来完成。</p>
<p><strong>同步：</strong></p>
<p>方法级的同步和方法内部分代码的同步，都是依靠管程(Monitor)来实现的。</p>
<p>Java语言使用synchronized语句块，那么Java虚拟机的指令集中通过monitorenter和monitorexit两条指令来完成synchronized的功能。为了保证monitorenter和monitorexit指令一定能成对的调用（不管方法正常结束还是异常结束），编译器会自动生成一个异常处理器，该异常处理器的主要目的是用于执行monitorexit指令。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>在基于堆栈的的虚拟机中，指令的主战场便是操作数栈，除了load是从局部变量表加载数据到操作数栈以及store储存数据到局部变量表，其余指令基本都是用于操作数栈的。</p>
<p>本文转载自：<a href="http://gityuan.com/2015/10/24/jvm-bytecode-grammar/" target="_blank" rel="external">http://gityuan.com/2015/10/24/jvm-bytecode-grammar/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍java虚拟机的指令功能，至少能阅读java代码生成的字节码指令含义&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Java虚拟机采用基于栈的架构，其指令由操作码和操作数组成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作码：一个字节长度(0~255)，意味着指令集的操作码个数不能操作256条。&lt;/li&gt;
&lt;li&gt;操作数：一条指令可以有零或者多个操作数，且操作数可以是1个或者多个字节。编译后的代码没有采用操作数长度对齐方式，比如16位无符号整数需使用两个字节储存(假设为byte1和byte2)，那么真实值是 &lt;code&gt;(byte1 &amp;lt;&amp;lt; 8) | byte2&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;放弃操作数对齐操作数对齐方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优势：可以省略很多填充和间隔符号，从而减少数据量，具有更高的传输效率；Java起初就是为了面向网络、智能家具而设计的，故更加注重传输效率。&lt;/li&gt;
&lt;li&gt;劣势：运行时从字节码里构建出具体数据结构，需要花费部分CPU时间，从而导致解释执行字节码会损失部分性能。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="bytecode" scheme="maode.github.io/tags/bytecode/"/>
    
      <category term="jvm" scheme="maode.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>javap 命令详解</title>
    <link href="maode.github.io/2017/09/18/170918-javap/"/>
    <id>maode.github.io/2017/09/18/170918-javap/</id>
    <published>2017-09-18T07:32:41.000Z</published>
    <updated>2017-09-28T13:53:59.078Z</updated>
    
    <content type="html"><![CDATA[<p>D:\temp&gt;javap -help<br>Usage: javap <options> <classes><br>where possible options include:</classes></options></p>
<table>
<thead>
<tr>
<th style="text-align:left">javap 参数</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-help  –help  -?</td>
<td style="text-align:left">帮助</td>
</tr>
<tr>
<td style="text-align:left">-version</td>
<td style="text-align:left">版本</td>
</tr>
<tr>
<td style="text-align:left">-v  -verbose</td>
<td style="text-align:left">打印附加信息（类常量池信息 字节码指令 等等很多…… 基本上需要的信息都会打印）</td>
</tr>
<tr>
<td style="text-align:left">-l</td>
<td style="text-align:left">输出行和变量的表</td>
</tr>
<tr>
<td style="text-align:left">-public</td>
<td style="text-align:left">只输出public方法和域</td>
</tr>
<tr>
<td style="text-align:left">-protected</td>
<td style="text-align:left">只输出public和protected类和成员</td>
</tr>
<tr>
<td style="text-align:left">-package</td>
<td style="text-align:left">只输出包，public和protected类和成员，(这是默认的)</td>
</tr>
<tr>
<td style="text-align:left">-p  -private</td>
<td style="text-align:left">输出所有类和成员</td>
</tr>
<tr>
<td style="text-align:left">-c</td>
<td style="text-align:left">输出反汇编后的代码（包含字节码指令）</td>
</tr>
<tr>
<td style="text-align:left">-s</td>
<td style="text-align:left">输出内部类型签名</td>
</tr>
<tr>
<td style="text-align:left">-sysinfo</td>
<td style="text-align:left">显示正在处理该类的系统信息(路径、大小、日期、MD5哈希)</td>
</tr>
<tr>
<td style="text-align:left">-constants</td>
<td style="text-align:left">显示静态常量</td>
</tr>
<tr>
<td style="text-align:left">-classpath <path></path></td>
<td style="text-align:left">指定类文件的路径</td>
</tr>
<tr>
<td style="text-align:left">-bootclasspath <path></path></td>
<td style="text-align:left">重写引导类文件的位置</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ javap -c HelloWorld &gt; D://hw-log.txt	<span class="comment">#将输出的内容保存到文件</span></div></pre></td></tr></table></figure>
<p><strong>一般常用的命令参数 <code>-c</code> 和 <code>-v</code>。</strong></p>
<p>暂时就这些，后面没有了！(=^ ^=)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;D:\temp&amp;gt;javap -help&lt;br&gt;Usage: javap &lt;options&gt; &lt;classes&gt;&lt;br&gt;where possible options include:&lt;/classes&gt;&lt;/options&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr
    
    </summary>
    
    
      <category term="javap" scheme="maode.github.io/tags/javap/"/>
    
  </entry>
  
  <entry>
    <title>JSTL的版本还有aliyun maven的故事</title>
    <link href="maode.github.io/2017/09/17/170916-JSTL/"/>
    <id>maode.github.io/2017/09/17/170916-JSTL/</id>
    <published>2017-09-17T07:32:41.000Z</published>
    <updated>2017-09-28T03:56:35.598Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个比较曲折的故事~~，过程比较郁闷。<br>今天在项目中需要用到jstl，于是就上 <a href="http://mvnrepository.com/" target="_blank" rel="external">http://mvnrepository.com/</a> 搜索，一搜出来一大片，关于jstl的实现乱七八糟。</p>
<p>一开始没有多想，就选择了第一个（其实这个版本对应的jar文件已经没了，但是我选择时没有仔细看，直接复制粘贴到项目中了），这就为我下来的错误埋下了伏笔。</p>
<p><img src="/assets/blogImg/170916-jstl-1.png" alt="170916-jstl-1"></p>
<a id="more"></a>
<p>配置好依赖（jsp-api和servlet-api的依赖都配了），运行项目，报错：Failed to load or instantiate TagLibraryValidator class: org.apache.taglibs.standard.tlv.JstlCoreTLV。<br>不能加载<code>JstlCoreTLV</code>这个类，打开Libraries查看，类是存在的：</p>
<p><img src="/assets/blogImg/170916-jstl-3.png" alt="170916-jstl-3"></p>
<p>然后我就开始了各种Google，各种百度。网上大多是在讲依赖和jar包冲突的问题，仔细检查了一下，并没有这两种情况。<br>接着搜~~，然后搜到了有人说可能是，pom文件依赖只引入的接口标准，而并没有引入具体实现。是吗？好像不是！</p>
<p><img src="/assets/blogImg/170916-jstl-4.png" alt="170916-jstl-4"></p>
<p>唔~~~ 凌乱了。不知道怎么回事了。我只好试着换个其他版本看看。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- jstl --&gt;</span></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/jstl --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>更换完成后，一运行，OK了 没问题了。<br>但是  为什么呢？？？？？打开这个版本的jar文件结构和刚才的没有什么区别啊？ 于是我决定看一下这两个jar文件具体有什么区别。<br>两个jar文件，管用的大小404KB，报错的400KB，看来是有点区别的,为什么一个大一个小？会不会是在下载的过程中jar包数据没有下载完整，于是决定手动下载试试，这个时候发现了本文开头说到的问题  <a href="http://mvnrepository.com/" target="_blank" rel="external">http://mvnrepository.com/</a> 和 <a href="http://repo1.maven.org/maven2" target="_blank" rel="external">http://repo1.maven.org/maven2</a> 上面都没有该版本的jar文件。</p>
<p><img src="/assets/blogImg/170916-jstl-7.png" alt="170916-jstl-7"></p>
<p>那么我的jar文件是从哪里下载的呢？因为我使用的阿里云的maven仓库，肯定是从阿里云下载的了。随便打开了几个类，发现问题了……</p>
<p><strong>400K的<code>javax.servlet.jsp.jstl.jstl</code>版本</strong></p>
<p><img src="/assets/blogImg/170916-jstl-5.png" alt="170916-jstl-5"></p>
<p><strong>404K的<code>javax.servlet.jstl</code>版本</strong></p>
<p><img src="/assets/blogImg/170916-jstl-6.png" alt="170916-jstl-6"></p>
<p>至此已经发现问题的根源所在了。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>我试着将mvn的远程仓库配置成 <a href="http://mvnrepository.com/" target="_blank" rel="external">http://mvnrepository.com/</a> 或 <a href="http://repo1.maven.org/maven2" target="_blank" rel="external">http://repo1.maven.org/maven2</a> jar文件是无法成功下载到本地仓库的，Eclipse都会直接提示找不到jar的错，编译就会报错，但是用阿里云的远程maven仓库就不会，仔细看了一下，原来阿里云的maven仓库中<code>javax.servlet.jsp.jstl.jstl</code>有三个仓库,默认的<code>Central</code>仓库中也是只有<code>sources</code>的jar的，但是另外两个仓库<code>HongKong Nexus</code> 和 <code>jcenter</code>中都有<code>jstl-1.2.jsr</code>估计那个400K的jar就是从这两个仓库中下载下来的，这样不大好。~不大好</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个比较曲折的故事~~，过程比较郁闷。&lt;br&gt;今天在项目中需要用到jstl，于是就上 &lt;a href=&quot;http://mvnrepository.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mvnrepository.com/&lt;/a&gt; 搜索，一搜出来一大片，关于jstl的实现乱七八糟。&lt;/p&gt;
&lt;p&gt;一开始没有多想，就选择了第一个（其实这个版本对应的jar文件已经没了，但是我选择时没有仔细看，直接复制粘贴到项目中了），这就为我下来的错误埋下了伏笔。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blogImg/170916-jstl-1.png&quot; alt=&quot;170916-jstl-1&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="jstl" scheme="maode.github.io/tags/jstl/"/>
    
  </entry>
  
  <entry>
    <title>RestController返回json和xml数据</title>
    <link href="maode.github.io/2017/09/14/170914-RestController-json-xml/"/>
    <id>maode.github.io/2017/09/14/170914-RestController-json-xml/</id>
    <published>2017-09-14T07:32:41.000Z</published>
    <updated>2017-09-28T06:32:00.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实体类（POJO）"><a href="#实体类（POJO）" class="headerlink" title="实体类（POJO）"></a>实体类（POJO）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.code0.restController.model;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlRootElement;</div><div class="line"><span class="comment">/**  </span></div><div class="line"><span class="comment"> * <span class="doctag">@Title</span>: Message.java</span></div><div class="line"><span class="comment"> * <span class="doctag">@Package</span> org.code0.restController.model</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span>: Message.java</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Code0   </span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年9月14日 上午11:15:16 </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> String text;</div><div class="line"></div><div class="line">	<span class="comment">/** <span class="doctag">@return</span> name */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/** <span class="doctag">@param</span> name 要设置的 name */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/** <span class="doctag">@return</span> text */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> text;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/** <span class="doctag">@param</span> text 要设置的 text */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.text = text;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.code0.restController.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.code0.restController.model.Message;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**  </span></div><div class="line"><span class="comment"> * <span class="doctag">@Title</span>: TestRestController.java</span></div><div class="line"><span class="comment"> * <span class="doctag">@Package</span> org.code0.restController.controller</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span>: TestRestController.java</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Code0   </span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年9月14日 上午11:13:59 </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRestController</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/testRestController/&#123;text&#125;"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="function"><span class="keyword">public</span>  Message <span class="title">message</span><span class="params">(@PathVariable String text)</span></span>&#123;</div><div class="line">		</div><div class="line">		Message msg=<span class="keyword">new</span> Message();</div><div class="line">		msg.setName(<span class="string">"jhon"</span>);</div><div class="line">		msg.setText(text);</div><div class="line">		<span class="keyword">return</span> msg;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="返回json"><a href="#返回json" class="headerlink" title="返回json"></a>返回json</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- jackson, RestController返回json格式数据依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>访问： <a href="http://localhost:8080/testRestController/参数" target="_blank" rel="external">http://localhost:8080/testRestController/参数</a> 或 <a href="http://localhost:8080/testRestController/参数.json" target="_blank" rel="external">http://localhost:8080/testRestController/参数.json</a><br>返回： {“name”:”jhon”,”text”:”参数”}</p>
<h2 id="返回xml"><a href="#返回xml" class="headerlink" title="返回xml"></a>返回xml</h2><p><strong>不需要额外增加第三方依赖，只需在实体类上添加<code>@XmlRootElement</code>注解即可。</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@XmlRootElement</span><span class="comment">//该注解设置请求返回xml</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> String text;</div><div class="line">		…………</div><div class="line">		…………</div></pre></td></tr></table></figure></p>
<p>访问：<a href="http://localhost:8080/testRestController/xxx" target="_blank" rel="external">http://localhost:8080/testRestController/xxx</a> 或 <a href="http://localhost:8080/testRestController/xxx.xml" target="_blank" rel="external">http://localhost:8080/testRestController/xxx.xml</a><br>返回：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>jhon<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>实体类上添加<code>@XmlRootElement</code>注解后，默认返回<code>xml</code>格式了，如果要返回<code>json</code>，url就要加上<code>.json</code>的后缀了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实体类（POJO）&quot;&gt;&lt;a href=&quot;#实体类（POJO）&quot; class=&quot;headerlink&quot; title=&quot;实体类（POJO）&quot;&gt;&lt;/a&gt;实体类（POJO）&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; org.code0.restController.model;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; javax.xml.bind.annotation.XmlRootElement;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@Title&lt;/span&gt;: Message.java&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@Package&lt;/span&gt; org.code0.restController.model&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@Description&lt;/span&gt;: Message.java&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; Code0   &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@date&lt;/span&gt; 2017年9月14日 上午11:15:16 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Message&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String text;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/** &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; name */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/** &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; name 要设置的 name */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/** &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; text */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; text;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/** &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; text 要设置的 text */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String text)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.text = text;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="springMVC" scheme="maode.github.io/tags/springMVC/"/>
    
  </entry>
  
  <entry>
    <title>对RESTful的一些理解</title>
    <link href="maode.github.io/2017/09/13/170913-RESTful/"/>
    <id>maode.github.io/2017/09/13/170913-RESTful/</id>
    <published>2017-09-13T07:32:41.000Z</published>
    <updated>2017-09-13T08:59:50.819Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h2><p>一种架构方式、编码风格。</p>
<hr>
<p>感觉RESTful模式的关注点在于“资源”，一切皆资源，客户端对服务端发出的所有请求皆是针对某个资源的请求。RESTful对资源的动作不会过分关注，因为针对所有资源的状态和动作都是统一的。</p>
<p>比如：</p>
<h3 id="RESTful-风格"><a href="#RESTful-风格" class="headerlink" title="RESTful 风格"></a>RESTful 风格</h3><a id="more"></a>
<p>以下请求当中是没有包含动作和状态的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.../.../RESTful/person	#这是请求资源 “人”</div><div class="line">.../.../RESTful/books	#这是请求资源 “书”</div></pre></td></tr></table></figure>
<h3 id="非RESTful-风格"><a href="#非RESTful-风格" class="headerlink" title="非RESTful 风格"></a>非RESTful 风格</h3><p>以下请求当中是包含有动作或状态的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.../.../req/addPerson	#包含了动作 “增加” 一个人</div><div class="line">.../.../req/paidBooks	#包含了状态 “付费” 书籍</div></pre></td></tr></table></figure>
<h3 id="RESTful-统一的动作"><a href="#RESTful-统一的动作" class="headerlink" title="RESTful 统一的动作"></a>RESTful 统一的动作</h3><table>
<thead>
<tr>
<th style="text-align:center">动作</th>
<th style="text-align:center">一组资源的URI，比如<code>http://example.com/resources/</code></th>
<th style="text-align:center">单个资源的URI，比如<code>http://example.com/resources/142</code></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">GET</td>
<td style="text-align:center"><strong>列出</strong>URI，以及该资源组中每个资源的详细信息（后者可选）。</td>
<td style="text-align:center"><strong>获取</strong>指定的资源的详细信息，格式可以自选一个合适的网络媒体类型（比如：XML、JSON等）</td>
</tr>
<tr>
<td style="text-align:center">PUT</td>
<td style="text-align:center">使用给定的一组资源<strong>替换</strong>当前整组资源。</td>
<td style="text-align:center"><strong>替换/创建</strong>指定的资源。并将其追加到相应的资源组中。</td>
</tr>
<tr>
<td style="text-align:center">POST</td>
<td style="text-align:center">在本组资源中<strong>创建/追加</strong>一个新的资源。该操作往往返回新资源的URL。</td>
<td style="text-align:center">把指定的资源当做一个资源组，并在其下<strong>创建/追加</strong>一个新的元素，使其隶属于当前资源。</td>
</tr>
<tr>
<td style="text-align:center">DELETE</td>
<td style="text-align:center"><strong>删除</strong>整组资源。</td>
<td style="text-align:center"><strong>删除</strong>指定的元素。</td>
</tr>
</tbody>
</table>
<p><strong>另还有：</strong></p>
<h4 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a><code>HEAD</code></h4><p><code>HEAD</code>方法与<code>GET</code>方法一样，都是向服务器发出指定资源的请求。但是，服务器在响应<code>HEAD</code>请求时不会回传资源的内容部分，即：响应主体。这样，我们可以不传输全部内容的情况下，就可以获取服务器的响应头信息。<code>HEAD</code>方法常被用于客户端查看服务器的性能。</p>
<h4 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a><code>CONNECT</code></h4><p><code>CONNECT</code>方法是<code>HTTP/1.1</code>协议预留的，能够将连接改为管道方式的代理服务器。通常用于<a href="http://itbilu.com/other/relate/N16Uaoyp.html" target="_blank" rel="external">SSL</a>加密服务器的链接与非加密的HTTP代理服务器的通信。</p>
<h4 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a><code>OPTIONS</code></h4><p><code>OPTIONS</code>请求与<code>HEAD</code>类似，一般也是用于客户端查看服务器的性能。 这个方法会请求服务器返回该资源所支持的所有HTTP请求方法，该方法会用’*’来代替资源名称，向服务器发送<code>OPTIONS</code>请求，可以测试服务器功能是否正常。JavaScript的<a href="http://itbilu.com/javascript/js/VkiXuUcC.html" target="_blank" rel="external">XMLHttpRequest</a>对象进行<code>CORS</code>跨域资源共享时，就是使用<code>OPTIONS</code>方法发送嗅探请求，以判断是否有对指定资源的访问权限。</p>
<h4 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a><code>TRACE</code></h4><p><code>TRACE</code>请求服务器回显其收到的请求信息，该方法主要用于HTTP请求的测试或诊断。</p>
<h4 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a><code>PATCH</code></h4><p><code>PATCH</code>方法出现的较晚，它在2010年的<a href="http://tools.ietf.org/html/rfc5789" target="_blank" rel="external">RFC 5789</a>标准中被定义。<code>PATCH</code>请求与<code>PUT</code>请求类似，同样用于资源的更新。二者有以下两点不同：</p>
<ul>
<li>但<code>PATCH</code>一般用于资源的部分更新，而<code>PUT</code>一般用于资源的整体更新。</li>
<li>当资源不存在时，<code>PATCH</code>会创建一个新的资源，而<code>PUT</code>只会对已在资源进行更新。</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zh.wikipedia.org/wiki/REST#cite_note-3" target="_blank" rel="external">https://zh.wikipedia.org/wiki/REST#cite_note-3</a><br><a href="http://www.ruanyifeng.com/blog/2011/09/restful" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2011/09/restful</a><br><a href="https://itbilu.com/other/relate/EkwKysXIl.html" target="_blank" rel="external">https://itbilu.com/other/relate/EkwKysXIl.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RESTful&quot;&gt;&lt;a href=&quot;#RESTful&quot; class=&quot;headerlink&quot; title=&quot;RESTful&quot;&gt;&lt;/a&gt;RESTful&lt;/h2&gt;&lt;p&gt;一种架构方式、编码风格。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;感觉RESTful模式的关注点在于“资源”，一切皆资源，客户端对服务端发出的所有请求皆是针对某个资源的请求。RESTful对资源的动作不会过分关注，因为针对所有资源的状态和动作都是统一的。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;h3 id=&quot;RESTful-风格&quot;&gt;&lt;a href=&quot;#RESTful-风格&quot; class=&quot;headerlink&quot; title=&quot;RESTful 风格&quot;&gt;&lt;/a&gt;RESTful 风格&lt;/h3&gt;
    
    </summary>
    
    
      <category term="RESTful" scheme="maode.github.io/tags/RESTful/"/>
    
  </entry>
  
  <entry>
    <title>java POJO 重写toString方法工具</title>
    <link href="maode.github.io/2017/09/12/170912-java-pojo-tostring/"/>
    <id>maode.github.io/2017/09/12/170912-java-pojo-tostring/</id>
    <published>2017-09-12T07:32:41.000Z</published>
    <updated>2017-09-12T15:15:28.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h2><p>依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- fastjson --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> JSON.toJSONString(<span class="keyword">this</span>, <span class="keyword">new</span> SerializerFeature[]&#123;</div><div class="line">			SerializerFeature.WriteMapNullValue, </div><div class="line">			SerializerFeature.WriteNullListAsEmpty,</div><div class="line">            SerializerFeature.WriteNullStringAsEmpty, </div><div class="line">            SerializerFeature.WriteNullNumberAsZero, </div><div class="line">            SerializerFeature.WriteNullBooleanAsFalse,</div><div class="line">            SerializerFeature.UseISO8601DateFormat&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>忽略属性：<br>在属性上加注解 <code>@JSONField(serialize=false)</code><br>SerializerFeature详解见 <a href="#附录：">附录</a></p>
<a id="more"></a>
<h2 id="ReflectionToStringBuilder"><a href="#ReflectionToStringBuilder" class="headerlink" title="ReflectionToStringBuilder"></a>ReflectionToStringBuilder</h2><p>依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- lang3 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>使用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//普通使用，定义返回数据格式为JSON	</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> ReflectionToStringBuilder.toString(<span class="keyword">this</span>, ToStringStyle.JSON_STYLE);</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//过滤字段	</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> ReflectionToStringBuilder.toStringExclude(<span class="keyword">this</span>, <span class="string">"firstName"</span>, <span class="string">"dob"</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//过滤字段，同时定义数据格式</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">	</div><div class="line">		ReflectionToStringBuilder rtsb= <span class="keyword">new</span> ReflectionToStringBuilder(<span class="keyword">this</span>, ToStringStyle.JSON_STYLE);</div><div class="line">		rtsb.setExcludeFieldNames(<span class="string">"firstName"</span>,<span class="string">"dob"</span>);</div><div class="line">		<span class="keyword">return</span> rtsb.toString();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>感觉有点麻烦，当前类里没发现更好的写法，就先这么写着吧！更喜欢fastjson。</p>
<h2 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h2><h3 id="SerializerFeature属性"><a href="#SerializerFeature属性" class="headerlink" title="SerializerFeature属性"></a>SerializerFeature属性</h3><p>参考：<a href="http://blog.csdn.net/u010246789/article/details/52539576" target="_blank" rel="external">http://blog.csdn.net/u010246789/article/details/52539576</a></p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">QuoteFieldNames</td>
<td style="text-align:center">输出key时是否使用双引号,默认为true</td>
</tr>
<tr>
<td style="text-align:center">UseSingleQuotes</td>
<td style="text-align:center">使用单引号而不是双引号,默认为false</td>
</tr>
<tr>
<td style="text-align:center">WriteMapNullValue</td>
<td style="text-align:center">是否输出值为null的字段,默认为false</td>
</tr>
<tr>
<td style="text-align:center">WriteEnumUsingToString</td>
<td style="text-align:center">Enum输出name()或者original,默认为false</td>
</tr>
<tr>
<td style="text-align:center">UseISO8601DateFormat</td>
<td style="text-align:center">Date使用ISO8601格式输出，默认为false</td>
</tr>
<tr>
<td style="text-align:center">WriteNullListAsEmpty</td>
<td style="text-align:center">List字段如果为null,输出为[],而非null</td>
</tr>
<tr>
<td style="text-align:center">WriteNullStringAsEmpty</td>
<td style="text-align:center">字符类型字段如果为null,输出为”“,而非null</td>
</tr>
<tr>
<td style="text-align:center">WriteNullNumberAsZero</td>
<td style="text-align:center">数值字段如果为null,输出为0,而非null</td>
</tr>
<tr>
<td style="text-align:center">WriteNullBooleanAsFalse</td>
<td style="text-align:center">Boolean字段如果为null,输出为false,而非null</td>
</tr>
<tr>
<td style="text-align:center">SkipTransientField</td>
<td style="text-align:center">如果是true，类中的Get方法对应的Field是transient，序列化时将会被忽略。默认为true</td>
</tr>
<tr>
<td style="text-align:center">SortField</td>
<td style="text-align:center">按字段名称排序后输出。默认为false</td>
</tr>
<tr>
<td style="text-align:center">WriteTabAsSpecial</td>
<td style="text-align:center">把\t做转义输出，默认为false  <code>不推荐</code></td>
</tr>
<tr>
<td style="text-align:center">PrettyFormat</td>
<td style="text-align:center">结果是否格式化,默认为false</td>
</tr>
<tr>
<td style="text-align:center">WriteClassName</td>
<td style="text-align:center">序列化时写入类型信息，默认为false。反序列化是需用到</td>
</tr>
<tr>
<td style="text-align:center">DisableCircularReferenceDetect</td>
<td style="text-align:center">消除对同一对象循环引用的问题，默认为false</td>
</tr>
<tr>
<td style="text-align:center">WriteSlashAsSpecial</td>
<td style="text-align:center">对斜杠’/’进行转义</td>
</tr>
<tr>
<td style="text-align:center">BrowserCompatible</td>
<td style="text-align:center">将中文都会序列化为\uXXXX格式，字节数会多一些，但是能兼容IE 6，默认为false</td>
</tr>
<tr>
<td style="text-align:center">WriteDateUseDateFormat</td>
<td style="text-align:center">全局修改日期格式,默认为false。JSON.DEFFAULT_DATE_FORMAT = “yyyy-MM-dd”;JSON.toJSONString(obj, SerializerFeature.WriteDateUseDateFormat);</td>
</tr>
<tr>
<td style="text-align:center">DisableCheckSpecialChar</td>
<td style="text-align:center">一个对象的字符串属性中如果有特殊字符如双引号，将会在转成json时带有反斜杠转移符。如果不需要转义，可以使用这个属性。默认为false</td>
</tr>
<tr>
<td style="text-align:center">NotWriteRootClassName</td>
<td style="text-align:center">含义</td>
</tr>
<tr>
<td style="text-align:center">BeanToArray</td>
<td style="text-align:center">将对象转为array输出</td>
</tr>
<tr>
<td style="text-align:center">WriteNonStringKeyAsString</td>
<td style="text-align:center">含义</td>
</tr>
<tr>
<td style="text-align:center">NotWriteDefaultValue</td>
<td style="text-align:center">含义</td>
</tr>
<tr>
<td style="text-align:center">BrowserSecure</td>
<td style="text-align:center">含义</td>
</tr>
<tr>
<td style="text-align:center">IgnoreNonFieldGetter</td>
<td style="text-align:center">含义</td>
</tr>
<tr>
<td style="text-align:center">WriteEnumUsingName</td>
<td style="text-align:center">含义</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;fastjson&quot;&gt;&lt;a href=&quot;#fastjson&quot; class=&quot;headerlink&quot; title=&quot;fastjson&quot;&gt;&lt;/a&gt;fastjson&lt;/h2&gt;&lt;p&gt;依赖：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- fastjson --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;fastjson&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.2.38&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; JSON.toJSONString(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SerializerFeature[]&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			SerializerFeature.WriteMapNullValue, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			SerializerFeature.WriteNullListAsEmpty,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            SerializerFeature.WriteNullStringAsEmpty, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            SerializerFeature.WriteNullNumberAsZero, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            SerializerFeature.WriteNullBooleanAsFalse,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            SerializerFeature.UseISO8601DateFormat&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;忽略属性：&lt;br&gt;在属性上加注解 &lt;code&gt;@JSONField(serialize=false)&lt;/code&gt;&lt;br&gt;SerializerFeature详解见 &lt;a href=&quot;#附录：&quot;&gt;附录&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="toString" scheme="maode.github.io/tags/toString/"/>
    
      <category term="java" scheme="maode.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="maode.github.io/2017/09/05/170905-git-command/"/>
    <id>maode.github.io/2017/09/05/170905-git-command/</id>
    <published>2017-09-05T08:32:41.000Z</published>
    <updated>2017-09-28T03:08:39.254Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 告诉Github，你要使用的用户名</span></div><div class="line">$ git config --global user.name <span class="string">"Your Name Here"</span></div><div class="line"><span class="comment"># 设置邮箱 </span></div><div class="line">$ git config --global user.email <span class="string">"your_email@example.com"</span></div><div class="line"><span class="comment"># 查看用户名和邮箱</span></div><div class="line">$ git config user.name[user.email]</div><div class="line"><span class="comment"># 查看所有配置项</span></div><div class="line">$ git config -l[--list]</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 克隆项目到本地[将项目拉到本地]</span></div><div class="line">$ git <span class="built_in">clone</span> https://github.com/gavincook/test.git</div><div class="line"><span class="comment"># 将所有的改动加入缓存区</span></div><div class="line">$ git add .</div><div class="line"><span class="comment"># 将改动提交到本地仓库[提交时添加-a可省略前一步加入缓存区的操作]</span></div><div class="line">$ git commit [-a] -m <span class="string">"备注信息"</span></div><div class="line"><span class="comment"># 更新【拉取远程仓库变化并与本地分支合并】</span></div><div class="line">$ git pull [remote] [branch]</div></pre></td></tr></table></figure>
<h3 id="远程"><a href="#远程" class="headerlink" title="远程"></a>远程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 设置远程版本库地址</span></div><div class="line">$ git remote add origin https://github.com/maode/workInfo.git</div><div class="line"></div><div class="line"><span class="comment"># 将本地的master分支推送到origin主机的master分支。此处省略了origin主机的分支名，如果远程分支不存在，则会被新建。</span></div><div class="line">$ git push origin master</div><div class="line"></div><div class="line"><span class="comment"># 如果当前分支与远程分支存在追踪关系，则可以省略来源地分支名和目的地分支名都可以省略。如下：</span></div><div class="line">$ git push origin</div><div class="line"></div><div class="line"><span class="comment"># 如果当前分支只和一个远程主机有追踪分支，那么主机名也可以省略。如下：</span></div><div class="line">$ git push</div><div class="line"></div><div class="line"><span class="comment"># 如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，设置完成后就可以不加任何参数使用git push进行远程推送了。如下：</span></div><div class="line">$ git push -u origin master</div></pre></td></tr></table></figure>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>创建一个新的[本地]资源库,并推送到<a href="https://github.com/maode/workInfo.git" target="_blank" rel="external">https://github.com/maode/workInfo.git</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 1.在本地创建"README.md"文件</span></div><div class="line">$ touch README.md</div><div class="line"><span class="comment"># 2.初始化资源库【初始化一个本地未加入版本控制的现有的项目】</span></div><div class="line">$ git init</div><div class="line"><span class="comment"># 3.添加文件到版本库</span></div><div class="line">$ git add README.md</div><div class="line"><span class="comment"># 4.提交更改到本地版本库</span></div><div class="line">$ git commit -m <span class="string">"first commit"</span></div><div class="line"><span class="comment"># 5.设置远程版本库地址</span></div><div class="line">$ git remote add origin https://github.com/maode/workInfo.git</div><div class="line"><span class="comment"># 6.推送到远程版本库</span></div><div class="line">$ git push -u origin master</div></pre></td></tr></table></figure></p>
<p>比较详细的介绍可以参考<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">官方文档</a><br>或者参考这里：<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a><br>或者参考下面这张图（图片来源于网络）：<br><img src="https://raw.githubusercontent.com/maode/docs/master/git%E5%91%BD%E4%BB%A4%E6%8B%93%E6%99%AE%E5%9B%BE.png" alt="git命令拓普图"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;设置&quot;&gt;&lt;a href=&quot;#设置&quot; class=&quot;headerlink&quot; title=&quot;设置&quot;&gt;&lt;/a&gt;设置&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 告诉Github，你要使用的用户名&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git config --global user.name &lt;span class=&quot;string&quot;&gt;&quot;Your Name Here&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 设置邮箱 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git config --global user.email &lt;span class=&quot;string&quot;&gt;&quot;your_email@example.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看用户名和邮箱&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git config user.name[user.email]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看所有配置项&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git config -l[--list]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Git" scheme="maode.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Github映射自定义域名</title>
    <link href="maode.github.io/2017/09/05/170905-github-domain-name/"/>
    <id>maode.github.io/2017/09/05/170905-github-domain-name/</id>
    <published>2017-09-05T07:32:41.000Z</published>
    <updated>2017-09-05T13:31:42.921Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>向你的 Github Pages 仓库添加一个CNAME文件(文件名一定要<strong>大写</strong>)。<br>文件中只能包含一个顶级域名，像这样<code>example.com</code>。<br>如果你是用 hexo 框架搭建博客并部署到 Github Pages 上，每次执行生成命令<code>$ hexo g</code>和部署命令<code>$ hexo d</code>后，会将博客所在目录下 public 文件夹里的东西都推到 Github Pages 仓库上，并且把 CNAME 文件覆盖掉，解决这个问题可以直接把 CNAME 文件添加到 source 文件夹里，这样每次推的时候就不用担心仓库里的 CNAME 文件被覆盖掉了。</li>
</ol>
<a id="more"></a>
<ol>
<li>向你的 DNS 配置中添加 3 条记录 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@     		A             192.30.252.153</div><div class="line">@     		A             192.30.252.154</div><div class="line">www		CNAME         username.github.io</div></pre></td></tr></table></figure>
</li>
</ol>
<p>用你自己的 Github 用户名替换 username</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;向你的 Github Pages 仓库添加一个CNAME文件(文件名一定要&lt;strong&gt;大写&lt;/strong&gt;)。&lt;br&gt;文件中只能包含一个顶级域名，像这样&lt;code&gt;example.com&lt;/code&gt;。&lt;br&gt;如果你是用 hexo 框架搭建博客并部署到 Github Pages 上，每次执行生成命令&lt;code&gt;$ hexo g&lt;/code&gt;和部署命令&lt;code&gt;$ hexo d&lt;/code&gt;后，会将博客所在目录下 public 文件夹里的东西都推到 Github Pages 仓库上，并且把 CNAME 文件覆盖掉，解决这个问题可以直接把 CNAME 文件添加到 source 文件夹里，这样每次推的时候就不用担心仓库里的 CNAME 文件被覆盖掉了。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="GitHub" scheme="maode.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>maven常用命令</title>
    <link href="maode.github.io/2017/09/05/170905-maven-command/"/>
    <id>maode.github.io/2017/09/05/170905-maven-command/</id>
    <published>2017-09-05T07:32:41.000Z</published>
    <updated>2017-09-05T13:28:23.481Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mvn <span class="built_in">help</span>:effective-settings	</div><div class="line"><span class="comment">#查看当前生效的settings.xml，可用于判断某个settings配置是否生效</span></div><div class="line">mvn <span class="built_in">help</span>:effective-pom	</div><div class="line"><span class="comment">#用于查看当前生效的POM内容，指合并了所有父POM（包括Super POM）后的XML，所以可用于检测POM中某个配置是否生效 </span></div><div class="line">mvn -X	</div><div class="line"><span class="comment">#debug，可查看settings.xml文件的读取顺序</span></div><div class="line">mvn <span class="built_in">help</span>:system	</div><div class="line"><span class="comment">#打印所有可用的环境变量和Java系统属性</span></div></pre></td></tr></table></figure>
<p>暂时就这些，后面没有了！(=^ ^=)</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div
    
    </summary>
    
    
      <category term="maven" scheme="maode.github.io/tags/maven/"/>
    
  </entry>
  
</feed>
