<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code0&#39;s notepad</title>
  <subtitle>纯洁的记事本</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="maode.github.io/"/>
  <updated>2017-09-28T06:22:48.224Z</updated>
  <id>maode.github.io/</id>
  
  <author>
    <name>Code0</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Debugging Node.js with DevTools</title>
    <link href="maode.github.io/2017/09/26/170926-nodejs-debug/"/>
    <id>maode.github.io/2017/09/26/170926-nodejs-debug/</id>
    <published>2017-09-26T14:37:45.000Z</published>
    <updated>2017-09-28T06:22:48.224Z</updated>
    
    <content type="html"><![CDATA[<p>devtool 已经并入node.js v6.3.0以上版本的核心包，所以不用再installe。可以直接开整。如下：</p>
<p>调试 <code>mrd.js</code> 并在该文件第一句断点。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node --inspect --debug-brk mrd.js <span class="comment"># debug mrd.js 并在该文件第一句断点</span></div></pre></td></tr></table></figure></p>
<p>打开Chrome在地址栏输入：chrome://inspect </p>
<p>OK！现在可以开始调试了。就是如此简单。</p>
<p><strong>如果想让某次的debug过程重新走，在devtool中随便改行代码，然后保存，就可以重头再走一遍了。</strong></p>
<p>v7+ 版本还可以把以上命令简化为：<code>$ node --inspect-brk mrd.js( v7+)</code><br>我的版本低，没试！</p>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27" target="_blank" rel="external">https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27</a></p>
<p>暂时就这些，后面没有了！(=^ ^=)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;devtool 已经并入node.js v6.3.0以上版本的核心包，所以不用再installe。可以直接开整。如下：&lt;/p&gt;
&lt;p&gt;调试 &lt;code&gt;mrd.js&lt;/code&gt; 并在该文件第一句断点。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="Node.js" scheme="maode.github.io/tags/Node-js/"/>
    
      <category term="DevTools" scheme="maode.github.io/tags/DevTools/"/>
    
  </entry>
  
  <entry>
    <title>命令行（CLI）mrd开发记录</title>
    <link href="maode.github.io/2017/09/26/170926-CLI-mrd/"/>
    <id>maode.github.io/2017/09/26/170926-CLI-mrd/</id>
    <published>2017-09-26T14:28:32.000Z</published>
    <updated>2017-09-28T06:18:51.983Z</updated>
    
    <content type="html"><![CDATA[<p>首先确保安装配置好node.js的环境。官网：<a href="https://nodejs.org" target="_blank" rel="external">https://nodejs.org</a></p>
<h2 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h2><p>创建一个文件夹用来放mrd项目，如 D:\temp\mrd</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">D:\&gt; mkdir D:\temp\mrd</div><div class="line"></div><div class="line">D:\&gt; <span class="built_in">cd</span> temp\mrd</div></pre></td></tr></table></figure>
<p>初始化：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D:\temp\mrd&gt; npm init -y</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>执行完 init 命令会生成 package.json 包信息文件，修改文件内容如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"mrd"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"根据模板生成github博客文件"</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"bin/mrd"</span>,</div><div class="line">  <span class="attr">"bin"</span>: &#123;</div><div class="line">    <span class="attr">"mrd"</span>: <span class="string">"bin/mrd"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"author"</span>: <span class="string">"Code0"</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="attr">"repository"</span>: &#123;</div><div class="line">        <span class="attr">"type"</span>: <span class="string">"git"</span>,</div><div class="line">        <span class="attr">"url"</span>: <span class="string">"https://github.com/maode/mrd.git"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建包信息中的对应的路径和文件。创建完成后目录结构如下：</p>
<p><img src="/assets/blogImg/170926-CLI-1.png" alt=""></p>
<h2 id="mrd-js"><a href="#mrd-js" class="headerlink" title="mrd.js"></a>mrd.js</h2><p>如果依赖的模块没有安装过，要先安装依赖。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env node</span></div><div class="line"></div><div class="line"><span class="comment">//引入用到的模块</span></div><div class="line"><span class="keyword">var</span> shell = <span class="built_in">require</span>(<span class="string">"shelljs"</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> nunjucks = <span class="built_in">require</span>(<span class="string">'nunjucks'</span>);</div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">var</span> dateFormat = <span class="built_in">require</span>(<span class="string">'dateformat'</span>); </div><div class="line"><span class="comment">//定义变量</span></div><div class="line"><span class="keyword">var</span> tpl_path = <span class="string">'D:/GitHubRepo/Blog/post_tpl/A-mrd-temp.md'</span>;</div><div class="line"><span class="keyword">var</span> gen_path = <span class="string">'D:/GitHubRepo/Blog/source/_posts'</span>;</div><div class="line"><span class="keyword">var</span> fname;</div><div class="line"><span class="keyword">var</span> title=<span class="string">"temp"</span>;</div><div class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="keyword">var</span> dtime=dateFormat(now);<span class="comment">//使用挺好看的默认格式</span></div><div class="line"><span class="keyword">var</span> fnamePre=dateFormat(now,<span class="string">"yymmdd"</span>);<span class="comment">//生成文件名前缀</span></div><div class="line"><span class="keyword">var</span> tags;</div><div class="line"></div><div class="line"><span class="comment">//逻辑部分</span></div><div class="line"><span class="keyword">var</span> argv = <span class="built_in">require</span>(<span class="string">'yargs'</span>)</div><div class="line">	.option(<span class="string">'f'</span>,&#123;</div><div class="line">		alias: <span class="string">'from'</span>,</div><div class="line">		demand: <span class="literal">false</span>,</div><div class="line">		<span class="keyword">default</span>: tpl_path,</div><div class="line">		describe: <span class="string">'template path'</span>,</div><div class="line">		type: <span class="string">'string'</span></div><div class="line">	&#125;)</div><div class="line">	.option(<span class="string">'t'</span>,&#123;</div><div class="line">		alias: <span class="string">'to'</span>,</div><div class="line">		demand: <span class="literal">false</span>,</div><div class="line">		<span class="keyword">default</span>: gen_path,</div><div class="line">		describe: <span class="string">'generate path'</span>,</div><div class="line">		type: <span class="string">'string'</span></div><div class="line">	&#125;)</div><div class="line">	.usage(<span class="string">'Usage: mrd &lt;fileName&gt; [title] [tag1 tag2 ……]'</span>)</div><div class="line">	.example(<span class="string">'$ mrd test'</span>, <span class="string">'根据默认模板在默认路径下创建test.md'</span>)</div><div class="line">	.help(<span class="string">'h'</span>)</div><div class="line">	.alias(<span class="string">'h'</span>, <span class="string">'help'</span>)</div><div class="line">	.epilog(<span class="string">'copyright 2017'</span>)</div><div class="line">	.argv;</div><div class="line"></div><div class="line"><span class="comment">// fileName 如果没有任何命令和参数则打印帮助</span></div><div class="line"><span class="keyword">if</span>(argv._[<span class="number">0</span>])&#123;</div><div class="line">	fname=fnamePre+<span class="string">"-"</span>+argv._[<span class="number">0</span>];</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">	<span class="comment">//shell.exec("node mrd.js -h");//开发环境</span></div><div class="line">	shell.exec(<span class="string">"mrd -h"</span>);<span class="comment">//生产环境</span></div><div class="line">	process.exit(<span class="number">0</span>);</div><div class="line">	</div><div class="line">&#125;</div><div class="line"><span class="comment">// title</span></div><div class="line"><span class="keyword">if</span>(argv._[<span class="number">1</span>])&#123;</div><div class="line">	title = argv._[<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="comment">//tags</span></div><div class="line"><span class="keyword">if</span>(argv._[<span class="number">2</span>])&#123;</div><div class="line">	tags=argv._.slice(<span class="number">2</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//路径规范化</span></div><div class="line">argv.f=path.normalize(argv.f);</div><div class="line">argv.t=path.normalize(argv.t);</div><div class="line"><span class="comment">//判断生成文件的路径是否存在</span></div><div class="line"><span class="keyword">if</span>(!fs.existsSync(argv.t))&#123;</div><div class="line">	fs.mkdirSync(argv.t);</div><div class="line">&#125;</div><div class="line"><span class="comment">//读取模板文件</span></div><div class="line"><span class="keyword">var</span> tpl = fs.readFileSync(argv.f).toString();</div><div class="line"><span class="comment">//填充模板数据</span></div><div class="line"><span class="keyword">var</span> compiledData = nunjucks.renderString(tpl,&#123;<span class="attr">title</span>:title,<span class="attr">dtime</span>:dtime,<span class="attr">tags</span>:tags&#125;);</div><div class="line"><span class="keyword">var</span> fpath= path.join(argv.t,fname+<span class="string">'.md'</span>);<span class="comment">//合成生成文件的路径</span></div><div class="line"><span class="comment">//根据模板生成文件</span></div><div class="line">fs.writeFileSync(fpath, compiledData);</div><div class="line"><span class="comment">//用默认程序打开新生成的文件</span></div><div class="line">shell.exec(fpath);</div></pre></td></tr></table></figure></p>
<h2 id="bin-mrd"><a href="#bin-mrd" class="headerlink" title="bin/mrd"></a>bin/mrd</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env node</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'../mrd.js'</span>);</div></pre></td></tr></table></figure>
<h2 id="安装到全局环境"><a href="#安装到全局环境" class="headerlink" title="安装到全局环境"></a>安装到全局环境</h2><p>在mrd目录下执行：<code>D:\temp\mrd&gt; npm install -g .</code><br>或<br>在mrd目录外执行：<code>D:\temp&gt; npm install -g mrd</code></p>
<h2 id="从全局环境卸载"><a href="#从全局环境卸载" class="headerlink" title="从全局环境卸载"></a>从全局环境卸载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm uninstall -g mrd</div></pre></td></tr></table></figure>
<h2 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">D:\temp\mrd&gt;node mrd.js -h</div><div class="line">Usage: mrd &lt;fileName&gt; [title] [tag1 tag2 ……]</div><div class="line"></div><div class="line">Options:</div><div class="line">  -f, --from  template path</div><div class="line">                 [string] [default: <span class="string">"D:/GitHubRepo/Blog/post_tpl/A-mrd-temp.md"</span>]</div><div class="line"></div><div class="line">  -t, --to    generate path</div><div class="line">                          [string] [default: <span class="string">"D:/GitHubRepo/Blog/source/_posts"</span>]</div><div class="line"></div><div class="line">  -h, --<span class="built_in">help</span>  Show <span class="built_in">help</span>                                                [boolean]</div><div class="line"></div><div class="line"></div><div class="line">Examples:</div><div class="line">  mrd <span class="built_in">test</span>  根据默认模板在默认路径下创建test.md</div><div class="line"></div><div class="line">copyright 2017</div></pre></td></tr></table></figure>
<h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p><a href="https://maode.github.io/2017/09/26/170926-nodejs-debug/">https://maode.github.io/2017/09/26/170926-nodejs-debug/</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.ruanyifeng.com/blog/2015/05/command-line-with-node.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/05/command-line-with-node.html</a></p>
<p><a href="http://seejs.me/2016/08/02/commandline/" target="_blank" rel="external">http://seejs.me/2016/08/02/commandline/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先确保安装配置好node.js的环境。官网：&lt;a href=&quot;https://nodejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://nodejs.org&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;开发过程&quot;&gt;&lt;a href=&quot;#开发过程&quot; class=&quot;headerlink&quot; title=&quot;开发过程&quot;&gt;&lt;/a&gt;开发过程&lt;/h2&gt;&lt;p&gt;创建一个文件夹用来放mrd项目，如 D:\temp\mrd&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;D:\&amp;gt; mkdir D:\temp\mrd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;D:\&amp;gt; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; temp\mrd&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;初始化：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;D:\temp\mrd&amp;gt; npm init -y&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CLI" scheme="maode.github.io/tags/CLI/"/>
    
  </entry>
  
  <entry>
    <title>javap 命令详解</title>
    <link href="maode.github.io/2017/09/21/170921-javap/"/>
    <id>maode.github.io/2017/09/21/170921-javap/</id>
    <published>2017-09-21T07:32:41.000Z</published>
    <updated>2017-09-24T09:41:17.252Z</updated>
    
    <content type="html"><![CDATA[<p>D:\temp&gt;javap -help<br>Usage: javap <options> <classes><br>where possible options include:</classes></options></p>
<table>
<thead>
<tr>
<th style="text-align:left">javap 参数</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-help  –help  -?</td>
<td style="text-align:left">帮助</td>
</tr>
<tr>
<td style="text-align:left">-version</td>
<td style="text-align:left">版本</td>
</tr>
<tr>
<td style="text-align:left">-v  -verbose</td>
<td style="text-align:left">打印附加信息（类常量池信息 字节码指令 等等很多…… 基本上需要的信息都会打印）</td>
</tr>
<tr>
<td style="text-align:left">-l</td>
<td style="text-align:left">输出行和变量的表</td>
</tr>
<tr>
<td style="text-align:left">-public</td>
<td style="text-align:left">只输出public方法和域</td>
</tr>
<tr>
<td style="text-align:left">-protected</td>
<td style="text-align:left">只输出public和protected类和成员</td>
</tr>
<tr>
<td style="text-align:left">-package</td>
<td style="text-align:left">只输出包，public和protected类和成员，(这是默认的)</td>
</tr>
<tr>
<td style="text-align:left">-p  -private</td>
<td style="text-align:left">输出所有类和成员</td>
</tr>
<tr>
<td style="text-align:left">-c</td>
<td style="text-align:left">输出反汇编后的代码（包含字节码指令）</td>
</tr>
<tr>
<td style="text-align:left">-s</td>
<td style="text-align:left">输出内部类型签名</td>
</tr>
<tr>
<td style="text-align:left">-sysinfo</td>
<td style="text-align:left">显示正在处理该类的系统信息(路径、大小、日期、MD5哈希)</td>
</tr>
<tr>
<td style="text-align:left">-constants</td>
<td style="text-align:left">显示静态常量</td>
</tr>
<tr>
<td style="text-align:left">-classpath <path></path></td>
<td style="text-align:left">指定类文件的路径</td>
</tr>
<tr>
<td style="text-align:left">-bootclasspath <path></path></td>
<td style="text-align:left">重写引导类文件的位置</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ javap -c HelloWorld &gt; D://hw-log.txt	<span class="comment">#将输出的内容保存到文件</span></div></pre></td></tr></table></figure>
<p><strong>一般常用的命令参数 <code>-c</code> 和 <code>-v</code>。</strong></p>
<p>暂时就这些，后面没有了！(=^ ^=)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;D:\temp&amp;gt;javap -help&lt;br&gt;Usage: javap &lt;options&gt; &lt;classes&gt;&lt;br&gt;where possible options include:&lt;/classes&gt;&lt;/options&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr
    
    </summary>
    
    
      <category term="javap" scheme="maode.github.io/tags/javap/"/>
    
  </entry>
  
  <entry>
    <title>Java 堆、栈、方法区、几种常量池，String</title>
    <link href="maode.github.io/2017/09/19/170919-heap-stack-string/"/>
    <id>maode.github.io/2017/09/19/170919-heap-stack-string/</id>
    <published>2017-09-19T07:32:41.000Z</published>
    <updated>2017-09-24T10:44:44.942Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在JAVA中，数据的交互存在于以下地方：</strong></p>
<p><strong>寄存器（register）：</strong> 位于CPU。<br><strong>栈（stack）：</strong> 位于RAM。<br><strong>堆（heap）：</strong> 位于RAM。<br><strong>方法区（PermGen）：</strong> 位于RAM。<br><strong>非RAM存储：</strong> 如硬盘等其它存储空间。</p>
<p><strong>就速度来说，从快到慢依次为： 寄存器 &gt; 栈 &gt; 堆 &gt; 方法区 &gt; 非RAM存储。</strong></p>
<p><strong>JAVA的JVM的内存可分为3个区：<code>栈(stack)</code>、<code>堆(heap)</code>和<code>方法区(PermGen)</code>也叫永久代。</strong></p>
<a id="more"></a>
<h2 id="寄存器（register）"><a href="#寄存器（register）" class="headerlink" title="寄存器（register）"></a><strong>寄存器（register）</strong></h2><p> 这是最快的存储区，因为它位于不同于其他存储区的地方——处理器内部。但是寄存器的数量极其有限，所以寄存器由编译器根据需求进行分配。你不能直接控制，也不能在程序中感觉到寄存器存在的任何迹象。    </p>
<ul>
<li>最快的存储区, 由编译器根据需求进行分配,我们在程序中无法控制.</li>
</ul>
<h2 id="栈（stack）"><a href="#栈（stack）" class="headerlink" title="栈（stack）"></a><strong>栈（stack）</strong></h2><p>位于通用RAM中，通过它的“栈指针”可以从处理器那里获得支持。栈指针若向下移动，则分配新的内存；若向上移动，则释放那些内存。这是一种快速有效的分配存储方法，仅次于寄存器。程序编译时，JAVA编译器必须知道存储在栈内所有数据的确切大小和生命周期，因为它必须生成相应的代码，以便上下移动栈指针。这一约束限制了程序的灵活性。    </p>
<ul>
<li><p><strong>每个线程包含一个栈区</strong>，栈中只存放<strong>局部变量</strong> <a id="i1" href="#1">^1</a> （包含基本类型和引用类型）。因为基本类型变量的变量值存的是字面<a href="https://zh.wikipedia.org/wiki/%E5%80%BC_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8)" target="_blank" rel="external">值</a>，是 基本类型【原始类型|值类型】,所以大小可知。如<code>int a = 3;</code>  这里的a是一个int类型<a id="i2" href="#2">^2</a>的变量，指向<code>3</code>这个值。这些字面值的数据，由于大小可知，生存期可知【这些字面值固定定义在某个程序块里面，程序块退出后，字面值生存期就结束了】，出于追求速度的原因，就存在于栈中了，而对象由于大小不可知，所以栈中只存放了对象的引用。</p>
</li>
<li><p>每个栈中的数据都是私有的，其他栈不能访问。</p>
</li>
<li><p>栈中的<strong>基本类型</strong>变量值在该栈中是可以被共享的（共享性质有点<code>类似</code>字符串常量池，相同的值只会被创建一次）。如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a=<span class="number">3</span>;</div><div class="line"><span class="keyword">int</span> b=<span class="number">3</span>;</div></pre></td></tr></table></figure>
<p>编译器先处理<code>int a = 3；</code>首先它会在栈中创建一个 <a href="https://zh.wikipedia.org/wiki/%E5%8F%98%E9%87%8F_(%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1)#.E5.9C.A8.E6.BA.90.E4.BB.A3.E7.A0.81.E4.B8.AD" target="_blank" rel="external">变量</a> a，然后查找栈中是否有3这个值，如果没找到，就在栈中开辟一块空间将3这个值存放进来，然后将a指向3的地址。接着处理<code>int b = 3；</code>在创建完b的变量后，因为在栈中已经有3这个值，便将b直接指向3的地址。这样，就出现了a与b同时均指向3的情况。 特别注意的是，这种基本类型的变量与引用类型的变量不同。假定两个引用类型的变量同时指向一个对象，如果一个变量修改了这个对象的内部状态，那么另一个变量也即刻反映出这个变化。相反，如果是两个基本类型的变量，修改其中一个的值，不会导致另一个指向此字面值的变量也跟着改变的情况。如上例，我们定义完 a 与 b 的值后，再令a=4；那么，b不会等于4，还是等于3。在编译器内部，遇到a=4；时，它就会重新搜索栈中是否有4的字面值，如果没有，重新开辟地址存放4的值；如果已经有了，则直接将a指向这个地址。因此a值的改变不会影响到b的值。</p>
</li>
</ul>
<h2 id="堆（heap）"><a href="#堆（heap）" class="headerlink" title="堆（heap）"></a><strong>堆（heap）</strong></h2><p>一种通用性的内存池（也存在于RAM中），用于存放所有的JAVA对象，无论是成员变量，局部变量，还是类变量，它们指向的对象都存储在堆中。堆不同于栈的好处是：编译器不需要知道要从堆里分配多少存储区域，也不必知道存储的数据在堆里存活多长时间。因此，在堆里分配存储有很大的灵活性。当没有引用指向堆中的对象时，垃圾回收机制会在恰当的时候将其回收掉。当然，为这种灵活性必须要付出相应的代价。用堆进行存储分配比用栈进行存储需要更多的时间。  </p>
<ul>
<li><strong>jvm只有一个堆区(heap)，该区域被所有线程共享。</strong> 存储的全部是对象实例。堆中不存放<code>基本类型</code>和<code>对象的引用</code>，只存放对象本身，[<strong>几乎</strong>]所有的 <code>对象实例</code> 和 <code>数组</code> 都在堆中分配。</li>
</ul>
<h2 id="方法区（PermGen）"><a href="#方法区（PermGen）" class="headerlink" title="方法区（PermGen）"></a><strong>方法区（PermGen）</strong></h2><p>又叫永久代，跟堆一样，<strong>被所有的线程共享</strong>。它用于存储已经被虚拟机加载的<code>类信息</code>、<code>常量</code>、<code>静态变量</code>、<code>即时编译器编译后的代码</code>等数据。</p>
<ul>
<li><p>JDK7之前 <code>运行时常量池</code> <code>字符串常量池</code> 还有很多<a href="#关于java的元数据">元数据</a>都在方法区。</p>
</li>
<li><p>JDK7开始执行 PermGen移除（去永久代）计划，JDK8彻底移除PermGen。</p>
</li>
<li><p>JDK8彻底移除PermGen后，原本方法区中的这些对象被挪到GC堆外的一块叫做Metaspace的空间里做特殊管理，仍然间接的受GC管理。</p>
</li>
</ul>
<h2 id="非RAM存储"><a href="#非RAM存储" class="headerlink" title="非RAM存储"></a><strong>非RAM存储</strong></h2><p>硬盘等永久存储空间。若数据完全独立于一个程序之外，则程序不运行时仍可存在，并在程序的控制范围之外。其中两个最主要的例子便是“流式对象”和“固定对象”。对于流式对象，对象会变成字节流，通常会发给另一台机器，而对于固定对象，对象保存在磁盘中。即使程序中止运行，它们仍可保持自己的状态不变。对于这些类型的数据存储，一个特别有用的技艺就是它们能存在于其他媒体中，一旦需要，甚至能将它们恢复成普通的、基于RAM的对象。</p>
<h1 id="几种常量池介绍"><a href="#几种常量池介绍" class="headerlink" title="几种常量池介绍"></a>几种常量池介绍</h1><h2 id="Class文件常量池"><a href="#Class文件常量池" class="headerlink" title="Class文件常量池"></a><strong>Class文件常量池</strong></h2><p>存在于java文件编译完成后的Class文件中, Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池(Constant Pool Table)，存放编译期生成的各种<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E9%9D%A2%E5%B8%B8%E9%87%8F_(C%E8%AF%AD%E8%A8%80)" target="_blank" rel="external">字面量</a>和符号引用，这部分内容将在类加载后进入方法区的运行时常量池。</p>
<p>这里面主要存放两大类常量：</p>
<ul>
<li><p><a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E9%9D%A2%E5%B8%B8%E9%87%8F_(C%E8%AF%AD%E8%A8%80)" target="_blank" rel="external">字面量</a>(Literal)：用双引号引起来的字符串 等。</p>
</li>
<li><p>符号引用(Symbolic References)：属于编译原理方面的概念，包含三类常量：</p>
<ul>
<li><p>类和接口的全限定名(Full Qualified Name)</p>
</li>
<li><p>字段的名称和描述符(Descriptor)</p>
</li>
<li><p>方法的名称和描述符</p>
</li>
</ul>
</li>
</ul>
<p>这些可以用<a href="https://maode.github.io/2017/09/02/170921-javap/">javap</a>命令进行查看。</p>
<h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a><strong>运行时常量池</strong></h2><p>方法区的一部分。类加载后由 Class文件 衍生的产物，Class文件常量池中的数据 在类加载后进入运行时常量池。</p>
<p><a href="http://wiki.jikexueyuan.com/project/java-vm/class-loading-mechanism.html" target="_blank" rel="external">类在加载时</a>的 解析（resolve）阶段 虚拟机会将 Class文件常量池 内的数据加载到 运行时常量池 中（符号引用会替换为直接引用）。但String类型的字面量有点特殊，Class文件常量池中 String字面量牵扯到两个常量池项的类型 <code>CONSTANT_Utf8</code> 和 <code>CONSTANT_String</code>  后者是String常量的类型，但它并不直接持有String常量的内容，而是只持有一个index，这个index所指定的另一个常量池项必须是一个CONSTANT_Utf8类型的常量，而CONSTANT_Utf8才真正指向持有字符串内容的对象。<br>CONSTANT_Utf8会在类加载的过程中就全部创建出来，而CONSTANT_String则是lazy resolve的，它会在<strong>第一次引用该项的【地方】ldc指令被第一次执行到的时候</strong>才会resolve。在尚未resolve的时候，HotSpot VM<a id="i3" href="#3">^3</a>把它的类型叫做JVM_CONSTANT_UnresolvedString，内容跟Class文件里一样只是一个index；等到resolve过后这个项的常量类型就会变成最终的JVM_CONSTANT_String，而内容则变成实际的那个字符串对象引用。<br><strong>总结：</strong><br>CONSTANT_Utf8 会在类加载时 resolve 阶段进入运行时常量池。<br>CONSTANT_String 是lazy resolve 的，此时不会进入运行时常量池。</p>
<p>最直接的<strong>体现</strong>或者可以说：该字符串字面量对象的引用 进入了运行时常量池，但 该字符串字面量对象的引用 未进入字符串常量池。</p>
<p><strong>关于<code>CONSTANT_Utf8</code> 和 <code>CONSTANT_String</code> ：</strong><br>CONSTANT_Utf8：</p>
<ul>
<li><p>CONSTANT_Utf8 -&gt; Symbol* -&gt; Symbol      </p>
<p>  CONSTANT_Utf8指向一个Symbol对象的指针，然后该指针指向一个Symbol对象 。<br>  Symbol*： 指向Symbol对象的指针。<br>  Symbol：一个固定长度的头部和一个可变长度、装有实际字符内容的尾部。<a id="i4" href="#4">^4</a></p>
</li>
</ul>
<p>CONSTANT_String：</p>
<ul>
<li>CONSTANT_String 在尚未resolve的时候，HotSpot VM把它的类型叫做JVM_CONSTANT_UnresolvedString。</li>
<li>未 resolve 时的它只是持有一个指向 CONSTANT_Utf8 的指针【index】，而当 resolve 过后，则指向一个实际的Java对象的引用。</li>
<li>一个 CONSTANT_String项  在第一次被执行ldc指令时会被 resolve， 此时会去到字符串常量池查找，字符串常量池支持以Symbol为key来查询是否已经有<strong>内容匹配</strong>的项存在与否，存在则直接返回匹配项的引用，不存在则创建出内容匹配的<strong>java.lang.String对象</strong>。没错，是创建和Symbol对象的内容相匹配的<strong>java.lang.String对象</strong>，然后返回该对象的引用，并将该引用驻留在 字符串常量池。</li>
</ul>
<h2 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a><strong>字符串常量池</strong></h2><p>HotSpot VM里，记录interned string的一个全局表叫做StringTable，即：【[全局]字符串常量池】，它本质上就是个HashSet<string>，是HotSpot VM里用来实现字符串驻留功能的全局数据结构。这是个纯运行时的结构，而且是惰性（lazy）维护的。注意它只存储对java.lang.String实例的引用，而不存储String对象的内容。 注意，它只存了引用，根据这个引用可以得到具体的String对象。在驻留的过程中，StringTable::lookup() 函数是必经之路，是用来探测（probe）看某个字符串是否已经驻留在StringTable里了。</string></p>
<p>一般我们说一个字符串<strong>进入了全局的字符串常量池</strong>其实是说<strong>在这个StringTable中保存了对它的引用</strong>，反之，如果说没有在其中就是说StringTable中没有对它的引用。</p>
<p>JVM层面触发的字符串驻留（例如把Class文件里的CONSTANT_String类型常量转换为运行时对象，即：执行ldc指令的时候），以及Java代码主动触发的字符串驻留（java.lang.String.intern()），两种请求都由StringTable来处理，<strong>就是说触发字符串进入字符串常量池有两种情况</strong>。</p>
<ol>
<li>JVM层面触发：<br>一个字符串字面量在第一次引用它的地方,ldc指令被第一次执行到的时候。</li>
<li>java代码主动触发：<br>一个String对象首次执行intern()方法，且当前字符串常量池没有与该对象<strong>内容相同</strong>的对象的引用驻留时。</li>
</ol>
<p>以上两种情况都会在堆中创建String对象，并将引用驻留StringTable。</p>
<h2 id="关于-String"><a href="#关于-String" class="headerlink" title="关于 String"></a><strong>关于 String</strong></h2><p><strong>new：</strong><br>当我们使用了new来构造字符串对象的时候，不管字符串常量池中有没有相同内容的对象的引用，新的字符串对象都会在堆中被创建。</p>
<p><strong>intern：</strong><br>对象调用intern方法后，首先检查字符串常量池中是否有和该对象的<strong>内容相同</strong>的对象的引用，如果存在，则将这个引用返回，否则将该对象的引用加入并返回。</p>
<p><strong>摘抄的例子：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewTest1</span></span>&#123; </div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String ss1=<span class="string">"static"</span>; <span class="comment">// 第一句 </span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">		String s1=<span class="keyword">new</span> String(<span class="string">"he"</span>)+<span class="keyword">new</span> String(<span class="string">"llo"</span>); <span class="comment">//第二句 </span></div><div class="line">		s1.intern(); <span class="comment">// 第三句 </span></div><div class="line">		String s2=<span class="string">"hello"</span>; <span class="comment">//第四句 </span></div><div class="line">		System.out.println(s1==s2);<span class="comment">//第五句，输出是true。 </span></div><div class="line">	&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>“static” “he” “llo” “hello”都会进入Class的常量池， 按照上面说的，类加载阶段由于resolve 阶段是lazy的，所以是不会创建实例，更不会驻留字符串常量池了。但是要注意这个“static”和其他三个不一样，它是静态的，在类加载阶段中的初始化阶段，会为静态变量指定初始值，也就是要把“static”赋值给ss1，这个赋值操作要怎么搞啊，先ldc指令把它放到栈顶，然后用putstatic指令完成赋值。注意，ldc指令，根据上面说的，会创建”static”字符串对象，并且会保存一个指向它的引用到字符串常量池。OK！ 这是第一句。</p>
<p>运行main方法后，首先是第二句，一样的，要先用ldc把”he”和”llo”送到栈顶，换句话说，会创建他俩的对象，并且会保存引用到字符串常量池中；然后有个 “＋” 号对吧，内部是创建了一个StringBuilder对象，一路append，最后调用StringBuilder对象的toString方法得到一个String对象（内容是hello，注意这个toString方法会new一个String对象），并把它赋值给s1。注意啊，没有把hello的引用放入字符串常量池。</p>
<p>然后是第三句，intern方法一看，字符串常量池里面没有，它会把上面的这个hello对象的引用保存到字符串常量池，然后返回这个引用，但是这个返回值我们并没有使用变量去接收，所以没用。</p>
<p>第四句，字符串常量池里面已经有了，直接用嘛</p>
<p>第五句，已经很明显了。</p>
<p>再看另外一段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewTest2</span></span>&#123; </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">		String s1=<span class="keyword">new</span> String(<span class="string">"he"</span>)+<span class="keyword">new</span> String(<span class="string">"llo"</span>); <span class="comment">// 第一句</span></div><div class="line">		String s2=<span class="keyword">new</span> String(<span class="string">"h"</span>)+<span class="keyword">new</span> String(<span class="string">"ello"</span>); <span class="comment">// 第二句</span></div><div class="line">		String s3=s1.intern(); <span class="comment">// 第三句 </span></div><div class="line">		String s4=s2.intern(); <span class="comment">// 第四句</span></div><div class="line">		System.out.println(s1==s3); </div><div class="line">		System.out.println(s1==s4); </div><div class="line">	&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>类加载阶段，什么都没干。</p>
<p>然后运行main方法，先看第一句，会创建”he”和”llo”对象，并放入字符串常量池，然后会创建一个”hello”对象，没有放入字符串常量池，s1指向这个”hello”对象。</p>
<p>第二句，创建”h”和”ello”对象，并放入字符串常量池，然后会创建一个”hello”对象，没有放入字符串常量池，s2指向这个”hello”对象。</p>
<p>第三句，字符串常量池里面还没有，于是会把s1指向的String对象的引用放入字符串常量池（换句话说，放入池中的引用和s1指向了同一个对象），然后会把这个引用返回给了s3，所以s3==s1是true。</p>
<p>第四句，字符串常量池里面已经有了，直接将它返回给了s4，所以s4==s1是true。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><p>部分资料有疏漏和一些笼统[错误]的观点，参考时需与其他资料互相印证。<br>★标记的资料是我认为没有错误的资料，是我的最终参考，准确度、含金量 最高。<br><a href="https://www.zhihu.com/question/55994121" target="_blank" rel="external">https://www.zhihu.com/question/55994121</a>    ★<br><a href="https://www.zhihu.com/question/29833675" target="_blank" rel="external">https://www.zhihu.com/question/29833675</a>    ★<br><a href="http://rednaxelafx.iteye.com/blog/1847971#comments" target="_blank" rel="external">http://rednaxelafx.iteye.com/blog/1847971#comments</a>    ★<br><a href="http://rednaxelafx.iteye.com/blog/774673#comments" target="_blank" rel="external">http://rednaxelafx.iteye.com/blog/774673#comments</a>    ★<br><a href="http://droidyue.com/blog/2014/12/21/string-literal-pool-in-java/index.html" target="_blank" rel="external">http://droidyue.com/blog/2014/12/21/string-literal-pool-in-java/index.html</a>    ☆<br><a href="http://www.cnblogs.com/xiohao/p/4296088.html" target="_blank" rel="external">http://www.cnblogs.com/xiohao/p/4296088.html</a><br><a href="http://www.fhadmin.org/Blog/article/10000002.html" target="_blank" rel="external">http://www.fhadmin.org/Blog/article/10000002.html</a></p>
<h2 id="附录："><a href="#附录：" class="headerlink" title="附录："></a><strong>附录：</strong></h2><h3 id="关于java的元数据"><a href="#关于java的元数据" class="headerlink" title="关于java的元数据"></a>关于java的元数据</h3><p>HotSpot VM 里有一套对象专门用来存放元数据，它们包括： </p>
<ul>
<li>Klass系对象。元数据的最主要入口。用于描述类型的总体信息</li>
<li>ConstantPool/ConstantPoolCache对象。每个InstanceKlass关联着一个ConstantPool，作为该类型的运行时常量池。这个常量池的结构跟Class文件里的常量池基本上是对应的。可以参考<a href="http://hllvm.group.iteye.com/group/topic/26412#post-187861" target="_blank" rel="external">R大以前的一个回帖</a>。ConstantPoolCache主要用于存储某些字节码指令所需的解析（resolve）好的常量项，例如给[get|put]static、[get|put]field、invoke[static|special|virtual|interface|dynamic]等指令对应的常量池项用。</li>
<li>Method对象，用来描述Java方法的总体信息，像是方法入口地址、调用/循环计数器等等</li>
<li>ConstMethod对象，记录着Java方法的不变的描述信息，包括方法名、方法的访问修饰符、<strong>字节码</strong>、行号表、局部变量表等等。注意了，字节码就嵌在这ConstMethod对象里面。</li>
<li>Symbol对象，对应Class文件常量池里的JVM_CONSTANT_Utf8类型的常量。有一个VM全局的SymbolTable管理着所有Symbol。Symbol由所有Java类所共享。</li>
<li>MethodData对象，记录着Java方法执行时的profile信息，例如某方法里的某个字节码之类是否从来没遇到过null，某个条件跳转是否总是走同一个分支，等等。这些信息在解释器（多层编译模式下也在低层的编译生成的代码里）收集，然后供给HotSpot Server Compiler用于做激进优化。</li>
</ul>
<p>在PermGen移除前，上述元数据对象都在PermGen里，直接被GC管理着。<br>JDK8彻底移除PermGen后，这些对象被挪到GC堆外的一块叫做Metaspace的空间里做特殊管理，仍然间接的受GC管理。</p>
<hr>
<p><a id="1"><br>①</a> 变量是变量，变量名是变量名，变量值是变量值，对象是对象，对象的引用是对象的引用。<br>变量 由: <strong>“一个包含部分已知或未知数值或资讯（即一个<a href="https://zh.wikipedia.org/wiki/%E5%80%BC_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8)" target="_blank" rel="external">值</a>）之<a href="https://zh.wikipedia.org/wiki/%E8%A8%98%E6%86%B6%E9%AB%94%E4%BD%8D%E5%9D%80" target="_blank" rel="external">储存位址</a>”</strong> —— 变量值，以及 <strong>“相对应之<a href="https://zh.wikipedia.org/wiki/%E7%AC%A6%E8%99%9F" target="_blank" rel="external">符号名称</a>（<a href="https://zh.wikipedia.org/wiki/%E6%A8%99%E8%AD%98%E7%AC%A6" target="_blank" rel="external">识别字</a>）”</strong> —— 变量名，组成。<br>如：<br><code>int a = 1;</code>    a变量 的变量名为符号 ‘a’ ，变量值为<a href="https://zh.wikipedia.org/wiki/%E5%80%BC_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8)" target="_blank" rel="external">值</a> ‘3’。<br><code>Test t = new Test();</code> t变量 的变量名为符号 ‘t’ ，变量值为一个Test对象在内存中的存储位置（即对象的引用）。<br><a href="#i1"> ↩ </a></p>
<p><a id="2"><br>②</a> int有class但不是类,其它基本类型也是如此，int.class对应的Class对象是JVM合成出来的，并不是从Class文件加载出来的，在JVM初始化的时候就会把原始类型和void对应的Class对象创建出来。这些Class对象的创建不依赖任何外部信息，(例如说需要从Class文件加载的信息)，不需要经历类加载过程，而纯粹是JVM的实现细节。<br><a href="#i2"> ↩ </a></p>
<p><a id="3"><br>③</a> JVM的一种实现，早期由Sun维护目前由Oracle，JVM有不止一种实现。<a href="https://zh.wikipedia.org/wiki/HotSpot" target="_blank" rel="external">HotSpot VM</a><br><a href="#i3"> ↩ </a></p>
<p><a id="4"><br>④</a> JDK6及之前的HotSpot VM使用symbolOop来实现CONSTANT_Utf8的内容，symbolOop存放在PermGen里；JDK7开始HotSpot VM把symbol移到了native memory里，类型名改为Symbol。跟StringTable相似，Symbol的管理也是有一个SymbolTable来管理的。所有Symbol都是interned在SymbolTable里的。同样SymbolTable里只存Symbol*（指向Symbol对象的指针）而不存Symbol自身的内容。<br><a href="#i4"> ↩ </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;在JAVA中，数据的交互存在于以下地方：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;寄存器（register）：&lt;/strong&gt; 位于CPU。&lt;br&gt;&lt;strong&gt;栈（stack）：&lt;/strong&gt; 位于RAM。&lt;br&gt;&lt;strong&gt;堆（heap）：&lt;/strong&gt; 位于RAM。&lt;br&gt;&lt;strong&gt;方法区（PermGen）：&lt;/strong&gt; 位于RAM。&lt;br&gt;&lt;strong&gt;非RAM存储：&lt;/strong&gt; 如硬盘等其它存储空间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;就速度来说，从快到慢依次为： 寄存器 &amp;gt; 栈 &amp;gt; 堆 &amp;gt; 方法区 &amp;gt; 非RAM存储。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JAVA的JVM的内存可分为3个区：&lt;code&gt;栈(stack)&lt;/code&gt;、&lt;code&gt;堆(heap)&lt;/code&gt;和&lt;code&gt;方法区(PermGen)&lt;/code&gt;也叫永久代。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="heap、stack" scheme="maode.github.io/tags/heap%E3%80%81stack/"/>
    
      <category term="堆、栈" scheme="maode.github.io/tags/%E5%A0%86%E3%80%81%E6%A0%88/"/>
    
      <category term="常量池" scheme="maode.github.io/tags/%E5%B8%B8%E9%87%8F%E6%B1%A0/"/>
    
      <category term="String" scheme="maode.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>JSTL的版本还有aliyun maven的故事</title>
    <link href="maode.github.io/2017/09/17/170916-JSTL/"/>
    <id>maode.github.io/2017/09/17/170916-JSTL/</id>
    <published>2017-09-17T07:32:41.000Z</published>
    <updated>2017-09-28T03:56:35.598Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个比较曲折的故事~~，过程比较郁闷。<br>今天在项目中需要用到jstl，于是就上 <a href="http://mvnrepository.com/" target="_blank" rel="external">http://mvnrepository.com/</a> 搜索，一搜出来一大片，关于jstl的实现乱七八糟。</p>
<p>一开始没有多想，就选择了第一个（其实这个版本对应的jar文件已经没了，但是我选择时没有仔细看，直接复制粘贴到项目中了），这就为我下来的错误埋下了伏笔。</p>
<p><img src="/assets/blogImg/170916-jstl-1.png" alt="170916-jstl-1"></p>
<a id="more"></a>
<p>配置好依赖（jsp-api和servlet-api的依赖都配了），运行项目，报错：Failed to load or instantiate TagLibraryValidator class: org.apache.taglibs.standard.tlv.JstlCoreTLV。<br>不能加载<code>JstlCoreTLV</code>这个类，打开Libraries查看，类是存在的：</p>
<p><img src="/assets/blogImg/170916-jstl-3.png" alt="170916-jstl-3"></p>
<p>然后我就开始了各种Google，各种百度。网上大多是在讲依赖和jar包冲突的问题，仔细检查了一下，并没有这两种情况。<br>接着搜~~，然后搜到了有人说可能是，pom文件依赖只引入的接口标准，而并没有引入具体实现。是吗？好像不是！</p>
<p><img src="/assets/blogImg/170916-jstl-4.png" alt="170916-jstl-4"></p>
<p>唔~~~ 凌乱了。不知道怎么回事了。我只好试着换个其他版本看看。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- jstl --&gt;</span></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/jstl --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>更换完成后，一运行，OK了 没问题了。<br>但是  为什么呢？？？？？打开这个版本的jar文件结构和刚才的没有什么区别啊？ 于是我决定看一下这两个jar文件具体有什么区别。<br>两个jar文件，管用的大小404KB，报错的400KB，看来是有点区别的,为什么一个大一个小？会不会是在下载的过程中jar包数据没有下载完整，于是决定手动下载试试，这个时候发现了本文开头说到的问题  <a href="http://mvnrepository.com/" target="_blank" rel="external">http://mvnrepository.com/</a> 和 <a href="http://repo1.maven.org/maven2" target="_blank" rel="external">http://repo1.maven.org/maven2</a> 上面都没有该版本的jar文件。</p>
<p><img src="/assets/blogImg/170916-jstl-7.png" alt="170916-jstl-7"></p>
<p>那么我的jar文件是从哪里下载的呢？因为我使用的阿里云的maven仓库，肯定是从阿里云下载的了。随便打开了几个类，发现问题了……</p>
<p><strong>400K的<code>javax.servlet.jsp.jstl.jstl</code>版本</strong></p>
<p><img src="/assets/blogImg/170916-jstl-5.png" alt="170916-jstl-5"></p>
<p><strong>404K的<code>javax.servlet.jstl</code>版本</strong></p>
<p><img src="/assets/blogImg/170916-jstl-6.png" alt="170916-jstl-6"></p>
<p>至此已经发现问题的根源所在了。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>我试着将mvn的远程仓库配置成 <a href="http://mvnrepository.com/" target="_blank" rel="external">http://mvnrepository.com/</a> 或 <a href="http://repo1.maven.org/maven2" target="_blank" rel="external">http://repo1.maven.org/maven2</a> jar文件是无法成功下载到本地仓库的，Eclipse都会直接提示找不到jar的错，编译就会报错，但是用阿里云的远程maven仓库就不会，仔细看了一下，原来阿里云的maven仓库中<code>javax.servlet.jsp.jstl.jstl</code>有三个仓库,默认的<code>Central</code>仓库中也是只有<code>sources</code>的jar的，但是另外两个仓库<code>HongKong Nexus</code> 和 <code>jcenter</code>中都有<code>jstl-1.2.jsr</code>估计那个400K的jar就是从这两个仓库中下载下来的，这样不大好。~不大好</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个比较曲折的故事~~，过程比较郁闷。&lt;br&gt;今天在项目中需要用到jstl，于是就上 &lt;a href=&quot;http://mvnrepository.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mvnrepository.com/&lt;/a&gt; 搜索，一搜出来一大片，关于jstl的实现乱七八糟。&lt;/p&gt;
&lt;p&gt;一开始没有多想，就选择了第一个（其实这个版本对应的jar文件已经没了，但是我选择时没有仔细看，直接复制粘贴到项目中了），这就为我下来的错误埋下了伏笔。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blogImg/170916-jstl-1.png&quot; alt=&quot;170916-jstl-1&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="jstl" scheme="maode.github.io/tags/jstl/"/>
    
  </entry>
  
  <entry>
    <title>RestController返回json和xml数据</title>
    <link href="maode.github.io/2017/09/14/170914-RestController-json-xml/"/>
    <id>maode.github.io/2017/09/14/170914-RestController-json-xml/</id>
    <published>2017-09-14T07:32:41.000Z</published>
    <updated>2017-09-28T06:32:00.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实体类（POJO）"><a href="#实体类（POJO）" class="headerlink" title="实体类（POJO）"></a>实体类（POJO）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.code0.restController.model;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlRootElement;</div><div class="line"><span class="comment">/**  </span></div><div class="line"><span class="comment"> * <span class="doctag">@Title</span>: Message.java</span></div><div class="line"><span class="comment"> * <span class="doctag">@Package</span> org.code0.restController.model</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span>: Message.java</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Code0   </span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年9月14日 上午11:15:16 </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> String text;</div><div class="line"></div><div class="line">	<span class="comment">/** <span class="doctag">@return</span> name */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/** <span class="doctag">@param</span> name 要设置的 name */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/** <span class="doctag">@return</span> text */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> text;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/** <span class="doctag">@param</span> text 要设置的 text */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.text = text;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.code0.restController.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.code0.restController.model.Message;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**  </span></div><div class="line"><span class="comment"> * <span class="doctag">@Title</span>: TestRestController.java</span></div><div class="line"><span class="comment"> * <span class="doctag">@Package</span> org.code0.restController.controller</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span>: TestRestController.java</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Code0   </span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年9月14日 上午11:13:59 </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRestController</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/testRestController/&#123;text&#125;"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="function"><span class="keyword">public</span>  Message <span class="title">message</span><span class="params">(@PathVariable String text)</span></span>&#123;</div><div class="line">		</div><div class="line">		Message msg=<span class="keyword">new</span> Message();</div><div class="line">		msg.setName(<span class="string">"jhon"</span>);</div><div class="line">		msg.setText(text);</div><div class="line">		<span class="keyword">return</span> msg;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="返回json"><a href="#返回json" class="headerlink" title="返回json"></a>返回json</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- jackson, RestController返回json格式数据依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>访问： <a href="http://localhost:8080/testRestController/参数" target="_blank" rel="external">http://localhost:8080/testRestController/参数</a> 或 <a href="http://localhost:8080/testRestController/参数.json" target="_blank" rel="external">http://localhost:8080/testRestController/参数.json</a><br>返回： {“name”:”jhon”,”text”:”参数”}</p>
<h2 id="返回xml"><a href="#返回xml" class="headerlink" title="返回xml"></a>返回xml</h2><p><strong>不需要额外增加第三方依赖，只需在实体类上添加<code>@XmlRootElement</code>注解即可。</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@XmlRootElement</span><span class="comment">//该注解设置请求返回xml</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> String text;</div><div class="line">		…………</div><div class="line">		…………</div></pre></td></tr></table></figure></p>
<p>访问：<a href="http://localhost:8080/testRestController/xxx" target="_blank" rel="external">http://localhost:8080/testRestController/xxx</a> 或 <a href="http://localhost:8080/testRestController/xxx.xml" target="_blank" rel="external">http://localhost:8080/testRestController/xxx.xml</a><br>返回：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>jhon<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>实体类上添加<code>@XmlRootElement</code>注解后，默认返回<code>xml</code>格式了，如果要返回<code>json</code>，url就要加上<code>.json</code>的后缀了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实体类（POJO）&quot;&gt;&lt;a href=&quot;#实体类（POJO）&quot; class=&quot;headerlink&quot; title=&quot;实体类（POJO）&quot;&gt;&lt;/a&gt;实体类（POJO）&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; org.code0.restController.model;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; javax.xml.bind.annotation.XmlRootElement;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@Title&lt;/span&gt;: Message.java&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@Package&lt;/span&gt; org.code0.restController.model&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@Description&lt;/span&gt;: Message.java&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; Code0   &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@date&lt;/span&gt; 2017年9月14日 上午11:15:16 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Message&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String text;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/** &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; name */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/** &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; name 要设置的 name */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/** &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; text */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; text;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/** &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; text 要设置的 text */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String text)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.text = text;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="springMVC" scheme="maode.github.io/tags/springMVC/"/>
    
  </entry>
  
  <entry>
    <title>对RESTful的一些理解</title>
    <link href="maode.github.io/2017/09/13/170913-RESTful/"/>
    <id>maode.github.io/2017/09/13/170913-RESTful/</id>
    <published>2017-09-13T07:32:41.000Z</published>
    <updated>2017-09-13T08:59:50.819Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h2><p>一种架构方式、编码风格。</p>
<hr>
<p>感觉RESTful模式的关注点在于“资源”，一切皆资源，客户端对服务端发出的所有请求皆是针对某个资源的请求。RESTful对资源的动作不会过分关注，因为针对所有资源的状态和动作都是统一的。</p>
<p>比如：</p>
<h3 id="RESTful-风格"><a href="#RESTful-风格" class="headerlink" title="RESTful 风格"></a>RESTful 风格</h3><a id="more"></a>
<p>以下请求当中是没有包含动作和状态的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.../.../RESTful/person	#这是请求资源 “人”</div><div class="line">.../.../RESTful/books	#这是请求资源 “书”</div></pre></td></tr></table></figure>
<h3 id="非RESTful-风格"><a href="#非RESTful-风格" class="headerlink" title="非RESTful 风格"></a>非RESTful 风格</h3><p>以下请求当中是包含有动作或状态的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.../.../req/addPerson	#包含了动作 “增加” 一个人</div><div class="line">.../.../req/paidBooks	#包含了状态 “付费” 书籍</div></pre></td></tr></table></figure>
<h3 id="RESTful-统一的动作"><a href="#RESTful-统一的动作" class="headerlink" title="RESTful 统一的动作"></a>RESTful 统一的动作</h3><table>
<thead>
<tr>
<th style="text-align:center">动作</th>
<th style="text-align:center">一组资源的URI，比如<code>http://example.com/resources/</code></th>
<th style="text-align:center">单个资源的URI，比如<code>http://example.com/resources/142</code></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">GET</td>
<td style="text-align:center"><strong>列出</strong>URI，以及该资源组中每个资源的详细信息（后者可选）。</td>
<td style="text-align:center"><strong>获取</strong>指定的资源的详细信息，格式可以自选一个合适的网络媒体类型（比如：XML、JSON等）</td>
</tr>
<tr>
<td style="text-align:center">PUT</td>
<td style="text-align:center">使用给定的一组资源<strong>替换</strong>当前整组资源。</td>
<td style="text-align:center"><strong>替换/创建</strong>指定的资源。并将其追加到相应的资源组中。</td>
</tr>
<tr>
<td style="text-align:center">POST</td>
<td style="text-align:center">在本组资源中<strong>创建/追加</strong>一个新的资源。该操作往往返回新资源的URL。</td>
<td style="text-align:center">把指定的资源当做一个资源组，并在其下<strong>创建/追加</strong>一个新的元素，使其隶属于当前资源。</td>
</tr>
<tr>
<td style="text-align:center">DELETE</td>
<td style="text-align:center"><strong>删除</strong>整组资源。</td>
<td style="text-align:center"><strong>删除</strong>指定的元素。</td>
</tr>
</tbody>
</table>
<p><strong>另还有：</strong></p>
<h4 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a><code>HEAD</code></h4><p><code>HEAD</code>方法与<code>GET</code>方法一样，都是向服务器发出指定资源的请求。但是，服务器在响应<code>HEAD</code>请求时不会回传资源的内容部分，即：响应主体。这样，我们可以不传输全部内容的情况下，就可以获取服务器的响应头信息。<code>HEAD</code>方法常被用于客户端查看服务器的性能。</p>
<h4 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a><code>CONNECT</code></h4><p><code>CONNECT</code>方法是<code>HTTP/1.1</code>协议预留的，能够将连接改为管道方式的代理服务器。通常用于<a href="http://itbilu.com/other/relate/N16Uaoyp.html" target="_blank" rel="external">SSL</a>加密服务器的链接与非加密的HTTP代理服务器的通信。</p>
<h4 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a><code>OPTIONS</code></h4><p><code>OPTIONS</code>请求与<code>HEAD</code>类似，一般也是用于客户端查看服务器的性能。 这个方法会请求服务器返回该资源所支持的所有HTTP请求方法，该方法会用’*’来代替资源名称，向服务器发送<code>OPTIONS</code>请求，可以测试服务器功能是否正常。JavaScript的<a href="http://itbilu.com/javascript/js/VkiXuUcC.html" target="_blank" rel="external">XMLHttpRequest</a>对象进行<code>CORS</code>跨域资源共享时，就是使用<code>OPTIONS</code>方法发送嗅探请求，以判断是否有对指定资源的访问权限。</p>
<h4 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a><code>TRACE</code></h4><p><code>TRACE</code>请求服务器回显其收到的请求信息，该方法主要用于HTTP请求的测试或诊断。</p>
<h4 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a><code>PATCH</code></h4><p><code>PATCH</code>方法出现的较晚，它在2010年的<a href="http://tools.ietf.org/html/rfc5789" target="_blank" rel="external">RFC 5789</a>标准中被定义。<code>PATCH</code>请求与<code>PUT</code>请求类似，同样用于资源的更新。二者有以下两点不同：</p>
<ul>
<li>但<code>PATCH</code>一般用于资源的部分更新，而<code>PUT</code>一般用于资源的整体更新。</li>
<li>当资源不存在时，<code>PATCH</code>会创建一个新的资源，而<code>PUT</code>只会对已在资源进行更新。</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zh.wikipedia.org/wiki/REST#cite_note-3" target="_blank" rel="external">https://zh.wikipedia.org/wiki/REST#cite_note-3</a><br><a href="http://www.ruanyifeng.com/blog/2011/09/restful" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2011/09/restful</a><br><a href="https://itbilu.com/other/relate/EkwKysXIl.html" target="_blank" rel="external">https://itbilu.com/other/relate/EkwKysXIl.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RESTful&quot;&gt;&lt;a href=&quot;#RESTful&quot; class=&quot;headerlink&quot; title=&quot;RESTful&quot;&gt;&lt;/a&gt;RESTful&lt;/h2&gt;&lt;p&gt;一种架构方式、编码风格。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;感觉RESTful模式的关注点在于“资源”，一切皆资源，客户端对服务端发出的所有请求皆是针对某个资源的请求。RESTful对资源的动作不会过分关注，因为针对所有资源的状态和动作都是统一的。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;h3 id=&quot;RESTful-风格&quot;&gt;&lt;a href=&quot;#RESTful-风格&quot; class=&quot;headerlink&quot; title=&quot;RESTful 风格&quot;&gt;&lt;/a&gt;RESTful 风格&lt;/h3&gt;
    
    </summary>
    
    
      <category term="RESTful" scheme="maode.github.io/tags/RESTful/"/>
    
  </entry>
  
  <entry>
    <title>java POJO 重写toString方法工具</title>
    <link href="maode.github.io/2017/09/12/170912-java-pojo-tostring/"/>
    <id>maode.github.io/2017/09/12/170912-java-pojo-tostring/</id>
    <published>2017-09-12T07:32:41.000Z</published>
    <updated>2017-09-12T15:15:28.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h2><p>依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- fastjson --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> JSON.toJSONString(<span class="keyword">this</span>, <span class="keyword">new</span> SerializerFeature[]&#123;</div><div class="line">			SerializerFeature.WriteMapNullValue, </div><div class="line">			SerializerFeature.WriteNullListAsEmpty,</div><div class="line">            SerializerFeature.WriteNullStringAsEmpty, </div><div class="line">            SerializerFeature.WriteNullNumberAsZero, </div><div class="line">            SerializerFeature.WriteNullBooleanAsFalse,</div><div class="line">            SerializerFeature.UseISO8601DateFormat&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>忽略属性：<br>在属性上加注解 <code>@JSONField(serialize=false)</code><br>SerializerFeature详解见 <a href="#附录：">附录</a></p>
<a id="more"></a>
<h2 id="ReflectionToStringBuilder"><a href="#ReflectionToStringBuilder" class="headerlink" title="ReflectionToStringBuilder"></a>ReflectionToStringBuilder</h2><p>依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- lang3 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>使用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//普通使用，定义返回数据格式为JSON	</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> ReflectionToStringBuilder.toString(<span class="keyword">this</span>, ToStringStyle.JSON_STYLE);</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//过滤字段	</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> ReflectionToStringBuilder.toStringExclude(<span class="keyword">this</span>, <span class="string">"firstName"</span>, <span class="string">"dob"</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//过滤字段，同时定义数据格式</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">	</div><div class="line">		ReflectionToStringBuilder rtsb= <span class="keyword">new</span> ReflectionToStringBuilder(<span class="keyword">this</span>, ToStringStyle.JSON_STYLE);</div><div class="line">		rtsb.setExcludeFieldNames(<span class="string">"firstName"</span>,<span class="string">"dob"</span>);</div><div class="line">		<span class="keyword">return</span> rtsb.toString();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>感觉有点麻烦，当前类里没发现更好的写法，就先这么写着吧！更喜欢fastjson。</p>
<h2 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h2><h3 id="SerializerFeature属性"><a href="#SerializerFeature属性" class="headerlink" title="SerializerFeature属性"></a>SerializerFeature属性</h3><p>参考：<a href="http://blog.csdn.net/u010246789/article/details/52539576" target="_blank" rel="external">http://blog.csdn.net/u010246789/article/details/52539576</a></p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">QuoteFieldNames</td>
<td style="text-align:center">输出key时是否使用双引号,默认为true</td>
</tr>
<tr>
<td style="text-align:center">UseSingleQuotes</td>
<td style="text-align:center">使用单引号而不是双引号,默认为false</td>
</tr>
<tr>
<td style="text-align:center">WriteMapNullValue</td>
<td style="text-align:center">是否输出值为null的字段,默认为false</td>
</tr>
<tr>
<td style="text-align:center">WriteEnumUsingToString</td>
<td style="text-align:center">Enum输出name()或者original,默认为false</td>
</tr>
<tr>
<td style="text-align:center">UseISO8601DateFormat</td>
<td style="text-align:center">Date使用ISO8601格式输出，默认为false</td>
</tr>
<tr>
<td style="text-align:center">WriteNullListAsEmpty</td>
<td style="text-align:center">List字段如果为null,输出为[],而非null</td>
</tr>
<tr>
<td style="text-align:center">WriteNullStringAsEmpty</td>
<td style="text-align:center">字符类型字段如果为null,输出为”“,而非null</td>
</tr>
<tr>
<td style="text-align:center">WriteNullNumberAsZero</td>
<td style="text-align:center">数值字段如果为null,输出为0,而非null</td>
</tr>
<tr>
<td style="text-align:center">WriteNullBooleanAsFalse</td>
<td style="text-align:center">Boolean字段如果为null,输出为false,而非null</td>
</tr>
<tr>
<td style="text-align:center">SkipTransientField</td>
<td style="text-align:center">如果是true，类中的Get方法对应的Field是transient，序列化时将会被忽略。默认为true</td>
</tr>
<tr>
<td style="text-align:center">SortField</td>
<td style="text-align:center">按字段名称排序后输出。默认为false</td>
</tr>
<tr>
<td style="text-align:center">WriteTabAsSpecial</td>
<td style="text-align:center">把\t做转义输出，默认为false  <code>不推荐</code></td>
</tr>
<tr>
<td style="text-align:center">PrettyFormat</td>
<td style="text-align:center">结果是否格式化,默认为false</td>
</tr>
<tr>
<td style="text-align:center">WriteClassName</td>
<td style="text-align:center">序列化时写入类型信息，默认为false。反序列化是需用到</td>
</tr>
<tr>
<td style="text-align:center">DisableCircularReferenceDetect</td>
<td style="text-align:center">消除对同一对象循环引用的问题，默认为false</td>
</tr>
<tr>
<td style="text-align:center">WriteSlashAsSpecial</td>
<td style="text-align:center">对斜杠’/’进行转义</td>
</tr>
<tr>
<td style="text-align:center">BrowserCompatible</td>
<td style="text-align:center">将中文都会序列化为\uXXXX格式，字节数会多一些，但是能兼容IE 6，默认为false</td>
</tr>
<tr>
<td style="text-align:center">WriteDateUseDateFormat</td>
<td style="text-align:center">全局修改日期格式,默认为false。JSON.DEFFAULT_DATE_FORMAT = “yyyy-MM-dd”;JSON.toJSONString(obj, SerializerFeature.WriteDateUseDateFormat);</td>
</tr>
<tr>
<td style="text-align:center">DisableCheckSpecialChar</td>
<td style="text-align:center">一个对象的字符串属性中如果有特殊字符如双引号，将会在转成json时带有反斜杠转移符。如果不需要转义，可以使用这个属性。默认为false</td>
</tr>
<tr>
<td style="text-align:center">NotWriteRootClassName</td>
<td style="text-align:center">含义</td>
</tr>
<tr>
<td style="text-align:center">BeanToArray</td>
<td style="text-align:center">将对象转为array输出</td>
</tr>
<tr>
<td style="text-align:center">WriteNonStringKeyAsString</td>
<td style="text-align:center">含义</td>
</tr>
<tr>
<td style="text-align:center">NotWriteDefaultValue</td>
<td style="text-align:center">含义</td>
</tr>
<tr>
<td style="text-align:center">BrowserSecure</td>
<td style="text-align:center">含义</td>
</tr>
<tr>
<td style="text-align:center">IgnoreNonFieldGetter</td>
<td style="text-align:center">含义</td>
</tr>
<tr>
<td style="text-align:center">WriteEnumUsingName</td>
<td style="text-align:center">含义</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;fastjson&quot;&gt;&lt;a href=&quot;#fastjson&quot; class=&quot;headerlink&quot; title=&quot;fastjson&quot;&gt;&lt;/a&gt;fastjson&lt;/h2&gt;&lt;p&gt;依赖：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- fastjson --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;fastjson&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.2.38&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; JSON.toJSONString(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SerializerFeature[]&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			SerializerFeature.WriteMapNullValue, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			SerializerFeature.WriteNullListAsEmpty,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            SerializerFeature.WriteNullStringAsEmpty, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            SerializerFeature.WriteNullNumberAsZero, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            SerializerFeature.WriteNullBooleanAsFalse,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            SerializerFeature.UseISO8601DateFormat&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;忽略属性：&lt;br&gt;在属性上加注解 &lt;code&gt;@JSONField(serialize=false)&lt;/code&gt;&lt;br&gt;SerializerFeature详解见 &lt;a href=&quot;#附录：&quot;&gt;附录&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="toString" scheme="maode.github.io/tags/toString/"/>
    
      <category term="java" scheme="maode.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="maode.github.io/2017/09/05/170905-git-command/"/>
    <id>maode.github.io/2017/09/05/170905-git-command/</id>
    <published>2017-09-05T08:32:41.000Z</published>
    <updated>2017-09-28T03:08:39.254Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 告诉Github，你要使用的用户名</span></div><div class="line">$ git config --global user.name <span class="string">"Your Name Here"</span></div><div class="line"><span class="comment"># 设置邮箱 </span></div><div class="line">$ git config --global user.email <span class="string">"your_email@example.com"</span></div><div class="line"><span class="comment"># 查看用户名和邮箱</span></div><div class="line">$ git config user.name[user.email]</div><div class="line"><span class="comment"># 查看所有配置项</span></div><div class="line">$ git config -l[--list]</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 克隆项目到本地[将项目拉到本地]</span></div><div class="line">$ git <span class="built_in">clone</span> https://github.com/gavincook/test.git</div><div class="line"><span class="comment"># 将所有的改动加入缓存区</span></div><div class="line">$ git add .</div><div class="line"><span class="comment"># 将改动提交到本地仓库[提交时添加-a可省略前一步加入缓存区的操作]</span></div><div class="line">$ git commit [-a] -m <span class="string">"备注信息"</span></div><div class="line"><span class="comment"># 更新【拉取远程仓库变化并与本地分支合并】</span></div><div class="line">$ git pull [remote] [branch]</div></pre></td></tr></table></figure>
<h3 id="远程"><a href="#远程" class="headerlink" title="远程"></a>远程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 设置远程版本库地址</span></div><div class="line">$ git remote add origin https://github.com/maode/workInfo.git</div><div class="line"></div><div class="line"><span class="comment"># 将本地的master分支推送到origin主机的master分支。此处省略了origin主机的分支名，如果远程分支不存在，则会被新建。</span></div><div class="line">$ git push origin master</div><div class="line"></div><div class="line"><span class="comment"># 如果当前分支与远程分支存在追踪关系，则可以省略来源地分支名和目的地分支名都可以省略。如下：</span></div><div class="line">$ git push origin</div><div class="line"></div><div class="line"><span class="comment"># 如果当前分支只和一个远程主机有追踪分支，那么主机名也可以省略。如下：</span></div><div class="line">$ git push</div><div class="line"></div><div class="line"><span class="comment"># 如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，设置完成后就可以不加任何参数使用git push进行远程推送了。如下：</span></div><div class="line">$ git push -u origin master</div></pre></td></tr></table></figure>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>创建一个新的[本地]资源库,并推送到<a href="https://github.com/maode/workInfo.git" target="_blank" rel="external">https://github.com/maode/workInfo.git</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 1.在本地创建"README.md"文件</span></div><div class="line">$ touch README.md</div><div class="line"><span class="comment"># 2.初始化资源库【初始化一个本地未加入版本控制的现有的项目】</span></div><div class="line">$ git init</div><div class="line"><span class="comment"># 3.添加文件到版本库</span></div><div class="line">$ git add README.md</div><div class="line"><span class="comment"># 4.提交更改到本地版本库</span></div><div class="line">$ git commit -m <span class="string">"first commit"</span></div><div class="line"><span class="comment"># 5.设置远程版本库地址</span></div><div class="line">$ git remote add origin https://github.com/maode/workInfo.git</div><div class="line"><span class="comment"># 6.推送到远程版本库</span></div><div class="line">$ git push -u origin master</div></pre></td></tr></table></figure></p>
<p>比较详细的介绍可以参考<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">官方文档</a><br>或者参考这里：<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a><br>或者参考下面这张图（图片来源于网络）：<br><img src="https://raw.githubusercontent.com/maode/docs/master/git%E5%91%BD%E4%BB%A4%E6%8B%93%E6%99%AE%E5%9B%BE.png" alt="git命令拓普图"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;设置&quot;&gt;&lt;a href=&quot;#设置&quot; class=&quot;headerlink&quot; title=&quot;设置&quot;&gt;&lt;/a&gt;设置&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 告诉Github，你要使用的用户名&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git config --global user.name &lt;span class=&quot;string&quot;&gt;&quot;Your Name Here&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 设置邮箱 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git config --global user.email &lt;span class=&quot;string&quot;&gt;&quot;your_email@example.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看用户名和邮箱&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git config user.name[user.email]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看所有配置项&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git config -l[--list]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Git" scheme="maode.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>aliyun maven仓库</title>
    <link href="maode.github.io/2017/09/05/170905-aliyun-maven/"/>
    <id>maode.github.io/2017/09/05/170905-aliyun-maven/</id>
    <published>2017-09-05T07:32:41.000Z</published>
    <updated>2017-09-05T13:33:48.976Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- aliyun maven镜像</span></div><div class="line"><span class="comment">	放在.m2文件夹下 settings.xml下</span></div><div class="line"><span class="comment">--&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div></pre></td></tr></table></figure>
<p>暂时就这些，后面没有了！(=^ ^=)</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;
    
    </summary>
    
    
      <category term="maven" scheme="maode.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>maven常用命令</title>
    <link href="maode.github.io/2017/09/05/170905-maven-command/"/>
    <id>maode.github.io/2017/09/05/170905-maven-command/</id>
    <published>2017-09-05T07:32:41.000Z</published>
    <updated>2017-09-05T13:28:23.481Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mvn <span class="built_in">help</span>:effective-settings	</div><div class="line"><span class="comment">#查看当前生效的settings.xml，可用于判断某个settings配置是否生效</span></div><div class="line">mvn <span class="built_in">help</span>:effective-pom	</div><div class="line"><span class="comment">#用于查看当前生效的POM内容，指合并了所有父POM（包括Super POM）后的XML，所以可用于检测POM中某个配置是否生效 </span></div><div class="line">mvn -X	</div><div class="line"><span class="comment">#debug，可查看settings.xml文件的读取顺序</span></div><div class="line">mvn <span class="built_in">help</span>:system	</div><div class="line"><span class="comment">#打印所有可用的环境变量和Java系统属性</span></div></pre></td></tr></table></figure>
<p>暂时就这些，后面没有了！(=^ ^=)</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div
    
    </summary>
    
    
      <category term="maven" scheme="maode.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>windows下通过SSH链接GitHub</title>
    <link href="maode.github.io/2017/09/05/170905-win-ssh-github/"/>
    <id>maode.github.io/2017/09/05/170905-win-ssh-github/</id>
    <published>2017-09-05T07:32:41.000Z</published>
    <updated>2017-09-05T14:22:52.855Z</updated>
    
    <content type="html"><![CDATA[<p>下载安装一款git工具，如 <a href="https://git-for-windows.github.io/" target="_blank" rel="external">git for windows</a></p>
<p>打开 GitBash 命令窗口开始配置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"要设置的用户名"</span>	<span class="comment">#配置GitHub的name</span></div><div class="line">$ git config --global user.email <span class="string">"要设置的邮箱"</span>	<span class="comment">#配置GitHub的email</span></div></pre></td></tr></table></figure>
<p>进入到当前登录用户的目录下<br><code>$ cd ~</code><br>查看当前用户目录下是否存在<code>.ssh</code>文件夹，若不存在，则创建一个<br><code>$ mkdir .ssh</code></p>
<a id="more"></a>
<p>使用命令生成<code>SSH Key</code><br><code>$ ssh-keygen -t rsa -C &quot;引号里内容是用来生成密钥的注释文字，可以用github的登录邮箱&quot;</code><br>连敲三次回车，生成密钥。三次回车分别是跳过<code>“自定义密钥文件名”、“设置SSH Key的管理密码”、“确认SSH Key的管理密码”</code>三个步骤。</p>
<p>密钥文件生成在<code>~/.ssh</code>目录下。<code>id_rsa</code>是私钥<code>id_rsa.pub</code>是公钥。</p>
<p>用编辑器打开公钥，全选-复制，然后登录GitHub在设置项中找到添加SSH Key的选项，把公钥粘贴上，标题可根据情况自定义。</p>
<p>配置完成 输入以下命令进行测试。<br><code>$ ssh -T git@github.com</code><br>可能会看到类似以下的警告之一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">The authenticity of host &apos;github.com (192.30.252.1)&apos; can&apos;t be established.</div><div class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</div><div class="line">Are you sure you want to continue connecting (yes/no)?</div><div class="line"></div><div class="line">The authenticity of host &apos;github.com (192.30.252.1)&apos; can&apos;t be established.</div><div class="line">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</div><div class="line">Are you sure you want to continue connecting (yes/no)?</div></pre></td></tr></table></figure></p>
<p>不用管这些警告，输入yes然后回车。</p>
<p>如果成功了，会看到以下提示消息。<br><code>Hi username! You&#39;ve successfully authenticated, but GitHub does not
provide shell access.</code><br>如果报错，看这里：<a href="https://maode.github.io/2017/09/05/GitHub-link-error-170905/">链接GitHub报错</a></p>
<p>官方文档：<a href="https://help.github.com/articles/connecting-to-github-with-ssh/" target="_blank" rel="external">https://help.github.com/articles/connecting-to-github-with-ssh/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下载安装一款git工具，如 &lt;a href=&quot;https://git-for-windows.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git for windows&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;打开 GitBash 命令窗口开始配置&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git config --global user.name &lt;span class=&quot;string&quot;&gt;&quot;要设置的用户名&quot;&lt;/span&gt;	&lt;span class=&quot;comment&quot;&gt;#配置GitHub的name&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git config --global user.email &lt;span class=&quot;string&quot;&gt;&quot;要设置的邮箱&quot;&lt;/span&gt;	&lt;span class=&quot;comment&quot;&gt;#配置GitHub的email&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;进入到当前登录用户的目录下&lt;br&gt;&lt;code&gt;$ cd ~&lt;/code&gt;&lt;br&gt;查看当前用户目录下是否存在&lt;code&gt;.ssh&lt;/code&gt;文件夹，若不存在，则创建一个&lt;br&gt;&lt;code&gt;$ mkdir .ssh&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="GitHub" scheme="maode.github.io/tags/GitHub/"/>
    
      <category term="SSH" scheme="maode.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>Github映射自定义域名</title>
    <link href="maode.github.io/2017/09/05/170905-github-domain-name/"/>
    <id>maode.github.io/2017/09/05/170905-github-domain-name/</id>
    <published>2017-09-05T07:32:41.000Z</published>
    <updated>2017-09-05T13:31:42.921Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>向你的 Github Pages 仓库添加一个CNAME文件(文件名一定要<strong>大写</strong>)。<br>文件中只能包含一个顶级域名，像这样<code>example.com</code>。<br>如果你是用 hexo 框架搭建博客并部署到 Github Pages 上，每次执行生成命令<code>$ hexo g</code>和部署命令<code>$ hexo d</code>后，会将博客所在目录下 public 文件夹里的东西都推到 Github Pages 仓库上，并且把 CNAME 文件覆盖掉，解决这个问题可以直接把 CNAME 文件添加到 source 文件夹里，这样每次推的时候就不用担心仓库里的 CNAME 文件被覆盖掉了。</li>
</ol>
<a id="more"></a>
<ol>
<li>向你的 DNS 配置中添加 3 条记录 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@     		A             192.30.252.153</div><div class="line">@     		A             192.30.252.154</div><div class="line">www		CNAME         username.github.io</div></pre></td></tr></table></figure>
</li>
</ol>
<p>用你自己的 Github 用户名替换 username</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;向你的 Github Pages 仓库添加一个CNAME文件(文件名一定要&lt;strong&gt;大写&lt;/strong&gt;)。&lt;br&gt;文件中只能包含一个顶级域名，像这样&lt;code&gt;example.com&lt;/code&gt;。&lt;br&gt;如果你是用 hexo 框架搭建博客并部署到 Github Pages 上，每次执行生成命令&lt;code&gt;$ hexo g&lt;/code&gt;和部署命令&lt;code&gt;$ hexo d&lt;/code&gt;后，会将博客所在目录下 public 文件夹里的东西都推到 Github Pages 仓库上，并且把 CNAME 文件覆盖掉，解决这个问题可以直接把 CNAME 文件添加到 source 文件夹里，这样每次推的时候就不用担心仓库里的 CNAME 文件被覆盖掉了。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="GitHub" scheme="maode.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>GitHub配置完后链接不上，报错</title>
    <link href="maode.github.io/2017/09/05/170905-GitHub-link-error/"/>
    <id>maode.github.io/2017/09/05/170905-GitHub-link-error/</id>
    <published>2017-09-05T07:32:41.000Z</published>
    <updated>2017-09-05T13:26:24.286Z</updated>
    
    <content type="html"><![CDATA[<p>安装配置完Git后链接不上GitHub。<br>用<code>ssh -T git@github.com</code>命令测试连接时,报错<code>“ssh: connect to host github.com port 22: Connection timed out”</code></p>
<p>解决方法:</p>
<a id="more"></a>
<p>找到Git安装目录下的<code>/etc/ssh/ssh_config</code>文件，打开该文件在文件底部添加如下信息并保存。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Host github.com</div><div class="line"></div><div class="line">User git</div><div class="line"></div><div class="line">Hostname ssh.github.com</div><div class="line"></div><div class="line">PreferredAuthentications publickey</div><div class="line"></div><div class="line">IdentityFile ~/.ssh/id_rsa</div><div class="line"></div><div class="line">Port 443</div></pre></td></tr></table></figure></p>
<p>KO，搞定！添加完成后再次测试链接会在<code>~/.ssh/</code>目录下自动生成一个<code>known_hosts</code>文件【已知主机列表】，关于该文件的说明可以参考该文章：<a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="external">SSH原理与运用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装配置完Git后链接不上GitHub。&lt;br&gt;用&lt;code&gt;ssh -T git@github.com&lt;/code&gt;命令测试连接时,报错&lt;code&gt;“ssh: connect to host github.com port 22: Connection timed out”&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解决方法:&lt;/p&gt;
    
    </summary>
    
    
      <category term="GitHub" scheme="maode.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建GitHub博客过程</title>
    <link href="maode.github.io/2017/09/03/170903-hexo-blog-course/"/>
    <id>maode.github.io/2017/09/03/170903-hexo-blog-course/</id>
    <published>2017-09-03T07:32:41.000Z</published>
    <updated>2017-09-05T10:21:45.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><p><strong>nodejs，git</strong></p>
<ul>
<li>安装nodejs：<a href="https://nodejs.org" target="_blank" rel="external">nodejs官网</a></li>
<li>安装git：<a href="https://git-for-windows.github.io" target="_blank" rel="external">git for windows</a></li>
</ul>
<a id="more"></a>
<h2 id="hexo配置"><a href="#hexo配置" class="headerlink" title="hexo配置"></a>hexo配置</h2><p>因为hexo是使用nodejs编写的一个博客框架，所以安装完nodejs后，直接打开cmd窗口执行以下命令即可完成hexo的安装</p>
<h3 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo</div></pre></td></tr></table></figure>
<p>安装完成后执行以下命令显示hexo版本号即为安装成功<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo -v</div></pre></td></tr></table></figure></p>
<h3 id="hexo初始化"><a href="#hexo初始化" class="headerlink" title="hexo初始化"></a>hexo初始化</h3><p>选择或创建一个用来存放hexo博客文件的文件夹如<code>D:\Blog</code>，然后进行入到该路径下执行命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo init	<span class="comment">#初始化，完成后会在/source/_posts/目录下生成一篇hello World文章</span></div><div class="line">$ hexo server	<span class="comment">#启动本地web服务</span></div></pre></td></tr></table></figure></p>
<p>打开浏览器输入 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 即可看到生成的效果。</p>
<h3 id="hexo更换主题"><a href="#hexo更换主题" class="headerlink" title="hexo更换主题"></a>hexo更换主题</h3><p>hexo默认主题为 landscape，可更换为其它主题。<br>下载安装 <code>yilia</code> 主题：<br>进入hexo博客根路径下执行以下命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</div></pre></td></tr></table></figure></p>
<p>主题下载完成后会存放在 <code>/themes/</code> 路径下。<br>修改默认主题为 <code>yilia</code>：<br>打开hexo根路径下的 <code>_config.yml</code> 文件，找到<code>theme</code>选项，修改为<code>yilia</code>。<br><code>theme: yilia</code></p>
<h3 id="配置新主题"><a href="#配置新主题" class="headerlink" title="配置新主题"></a>配置新主题</h3><p>打开 /themes/yilia/_config.yml 文件，根据实际需求修改配置 <a href="#yilia主题配置">yilia主题配置</a>。完整的配置例子，可以参考<a href="https://github.com/litten/BlogBackup" target="_blank" rel="external">主题作者的博客备份</a>。</p>
<p>修改完主题的配置后执行 <code>hexo server</code> 访问 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 查看效果。</p>
<h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo new 文章名称	<span class="comment">#创建一篇新文章</span></div><div class="line">$ hexo generate		<span class="comment">#将文章生成为静态页面</span></div></pre></td></tr></table></figure>
<h3 id="部署博客静态页到GitHub"><a href="#部署博客静态页到GitHub" class="headerlink" title="部署博客静态页到GitHub"></a>部署博客静态页到GitHub</h3><p>修改<code>/_config.yml</code>文件。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line">	<span class="attr">type:</span> <span class="string">git</span></div><div class="line">	<span class="attr">repo:</span> <span class="string">git@github.com:maode/maode.github.io.git</span></div><div class="line">	<span class="attr">branch:</span> <span class="string">master</span></div></pre></td></tr></table></figure></p>
<p>安装git部署插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>执行部署命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure></p>
<p>部署命令执行后，会将<code>/public</code>路径下生成的所有静态文章页面部署至GitHub。<br>访问自己的GitHub的博客地址，查看部署情况。</p>
<p><strong>到这里博客配置与发布就算全部结束了，以后就可以安装上面的步骤进行文章的正常创建以及发布了。</strong></p>
<hr>
<h3 id="部署hexo文件和博客静态页至GitHub同一个repo下"><a href="#部署hexo文件和博客静态页至GitHub同一个repo下" class="headerlink" title="部署hexo文件和博客静态页至GitHub同一个repo下"></a>部署hexo文件和博客静态页至GitHub同一个repo下</h3><p><strong>该需求产生的原因：</strong><br>因为<code>hexo deploy</code>命令只会把每篇文章编译后的静态页面部署至GitHub，而文章的源码<code>.md</code>文件，还有hexo博客框架的相关配置只是保存在了当前的电脑上。如果哪天更换了电脑，或者其他原因导致本地的文件丢失了。就要再进行各种配置会比较麻烦，所以也可将文章源码以及hexo框架的相关配置一同部署至GitHub。</p>
<p><strong>该需求的解决方法：</strong><br>因为hexo文件夹下本身就包含一个<code>.gitignore</code>文件，而且该文件中已经将与框架配置无关的插件、日志、静态页忽略掉了，所以可直接将hexo文件夹以创建普通Git项目的方式部署至GitHub，为了便于管理也可以不再新建一个repo，直接在静态博客repo下创建一个分支存放也可。<br>如以分支的方式存放，则建议在GitHub创建好博客repo后，立即创建一个分支。因为我们两个分支存放的是完全不同的文件。而不是派生关系。</p>
<p><strong>过程如下：</strong></p>
<ol>
<li>在GitHub创建博客repo（记得勾选“用README初始化仓库”选项，否则无法进行下一步的分支创建）。</li>
<li>创建分支hexo</li>
<li>设置默认分支为hexo（因为博客静态页文件是执行<code>hexo deploy</code>命令进行部署的，而hexo框架及文章源码需要手动执行Git命令进行部署，将hexo设置为默认分支可以在执行<code>git push</code>命令时省略指定分支参数，方便些。）</li>
<li>使用<code>git clone git@github.com:maode/maode.github.io.git</code>命令克隆hexo分支到本地。</li>
<li>打开clone好的<code>maode.github.io</code>目录，将<code>.git/</code>文件夹和<code>README.md</code>文件复制到hexo文件目录下。复制完成后在hexo文件目录下执行<code>git branch</code>命令应该显示当前在hexo分支下。</li>
<li>依次执行 <code>git add . 、 git commit 、git push</code>命令部署本地hexo文件至GitHub的hexo分支。</li>
</ol>
<p>这样就结束了，以后每当写了新的文章，就可以执行<code>hexo deploy</code>命令部署文章静态页至master分支，执行Git命令部署hexo文件和源码文件至hexo分支。</p>
<p><strong>更换电脑或丢失文件后的操作</strong></p>
<ol>
<li>确认电脑环境已配置好（就是装好nodejs和Git） </li>
<li>使用<code>git clone git@github.com:maode/maode.github.io.git</code>命令克隆hexo分支到本地。</li>
<li>进入到clone好的<code>maode.github.io</code>（名太长，可以改成别的名，随意）目录下执行 hexo 和 Git部署插件 的安装命令就可以了。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo	<span class="comment">#安装hexo</span></div><div class="line">$ npm install hexo-deployer-git --save	<span class="comment">#安装git部署插件</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>注意：</strong> 不需要执行初始化命令，因为配置文件是从GitHub克隆下来的，一执行就全部恢复出厂设置了。白玩了。</p>
<hr>
<h2 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h2><h3 id="yilia主题配置"><a href="#yilia主题配置" class="headerlink" title="yilia主题配置"></a>yilia主题配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"># Header</div><div class="line"></div><div class="line">menu:</div><div class="line">  主页: /</div><div class="line"></div><div class="line"># SubNav</div><div class="line">subnav:</div><div class="line">  github: &quot;https://github.com/maode&quot;</div><div class="line">  #weibo: &quot;#&quot;</div><div class="line">  rss: /atom.xml</div><div class="line">  #zhihu: &quot;#&quot;</div><div class="line">  #qq: &quot;#&quot;</div><div class="line">  #weixin: &quot;#&quot;</div><div class="line">  #jianshu: &quot;#&quot;</div><div class="line">  #douban: &quot;#&quot;</div><div class="line">  #segmentfault: &quot;#&quot;</div><div class="line">  #bilibili: &quot;#&quot;</div><div class="line">  #acfun: &quot;#&quot;</div><div class="line">  #mail: &quot;mailto:litten225@qq.com&quot;</div><div class="line">  #facebook: &quot;#&quot;</div><div class="line">  #google: &quot;#&quot;</div><div class="line">  #twitter: &quot;#&quot;</div><div class="line">  #linkedin: &quot;#&quot;</div><div class="line"></div><div class="line">rss: /atom.xml</div><div class="line"></div><div class="line"># 是否需要修改 root 路径</div><div class="line"># 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，</div><div class="line"># 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</div><div class="line">root: </div><div class="line"></div><div class="line"># Content</div><div class="line"></div><div class="line"># 文章太长，截断按钮文字</div><div class="line">excerpt_link: more</div><div class="line"># 文章卡片右下角常驻链接，不需要请设置为false</div><div class="line">show_all_link: &apos;展开全文&apos;</div><div class="line"># 数学公式</div><div class="line">mathjax: false</div><div class="line"># 是否在新窗口打开链接</div><div class="line">open_in_new: false</div><div class="line"></div><div class="line"># 打赏</div><div class="line"># 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏</div><div class="line">reward_type: 2</div><div class="line"># 打赏wording</div><div class="line">reward_wording: &apos;谢谢你请我吃糖果&apos;</div><div class="line"># 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpg</div><div class="line">alipay: </div><div class="line"># 微信二维码图片地址</div><div class="line">weixin: </div><div class="line"></div><div class="line"># 目录</div><div class="line"># 目录设定：0-不显示目录； 1-文章对应的md文件里有toc:true属性，才有目录； 2-所有文章均显示目录</div><div class="line">toc: 1</div><div class="line"># 根据自己的习惯来设置，如果你的目录标题习惯有标号，置为true即可隐藏hexo重复的序号；否则置为false</div><div class="line">toc_hide_index: true</div><div class="line"># 目录为空时的提示</div><div class="line">toc_empty_wording: &apos;目录，不存在的…&apos;</div><div class="line"></div><div class="line"># 是否有快速回到顶部的按钮</div><div class="line">top: true</div><div class="line"></div><div class="line"># Miscellaneous</div><div class="line">baidu_analytics: &apos;&apos;</div><div class="line">google_analytics: &apos;&apos;</div><div class="line">favicon: /assets/img/favicon.ico</div><div class="line"></div><div class="line">#你的头像url</div><div class="line">avatar: /assets/img/plan.jpg</div><div class="line"></div><div class="line">#是否开启分享</div><div class="line">share_jia: true</div><div class="line"></div><div class="line">#评论：1、多说；2、网易云跟帖；3、畅言；4、Disqus 不需要使用某项，直接设置值为false，或注释掉</div><div class="line">#具体请参考wiki：https://github.com/litten/hexo-theme-yilia/wiki/</div><div class="line"></div><div class="line">#1、多说</div><div class="line">duoshuo: false</div><div class="line"></div><div class="line">#2、网易云跟帖</div><div class="line">wangyiyun: false</div><div class="line"></div><div class="line">#3、畅言</div><div class="line">changyan_appid: false</div><div class="line">changyan_conf: false</div><div class="line"></div><div class="line">#4、Disqus 在hexo根目录的config里也有disqus_shortname字段，优先使用yilia的</div><div class="line">disqus: false</div><div class="line"></div><div class="line"># 样式定制 - 一般不需要修改，除非有很强的定制欲望…</div><div class="line">style:</div><div class="line">  # 头像上面的背景颜色</div><div class="line">  header: &apos;#4d4d4d&apos;</div><div class="line">  # 右滑板块背景</div><div class="line">  slider: &apos;linear-gradient(200deg,#a0cfe4,#e8c37e)&apos;</div><div class="line"></div><div class="line"># slider的设置</div><div class="line">slider:</div><div class="line">  # 是否默认展开tags板块</div><div class="line">  showTags: false</div><div class="line"></div><div class="line"># 智能菜单</div><div class="line"># 如不需要，将该对应项置为false</div><div class="line"># 比如</div><div class="line">#smart_menu:</div><div class="line">#  friends: false</div><div class="line">smart_menu:</div><div class="line">  innerArchive: &apos;所有文章&apos;</div><div class="line">  friends: false</div><div class="line">  aboutme: &apos;关于我&apos;</div><div class="line"></div><div class="line">friends:</div><div class="line">  友情链接1: http://localhost:4000/</div><div class="line">  友情链接2: http://localhost:4000/</div><div class="line">  友情链接3: http://localhost:4000/</div><div class="line">  友情链接4: http://localhost:4000/</div><div class="line">  友情链接5: http://localhost:4000/</div><div class="line">  友情链接6: http://localhost:4000/</div><div class="line"></div><div class="line">aboutme: 很惭愧&lt;br&gt;&lt;br&gt;只做了一点微小的工作&lt;br&gt;谢谢大家</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境要求&quot;&gt;&lt;a href=&quot;#环境要求&quot; class=&quot;headerlink&quot; title=&quot;环境要求&quot;&gt;&lt;/a&gt;环境要求&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;nodejs，git&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装nodejs：&lt;a href=&quot;https://nodejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodejs官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;安装git：&lt;a href=&quot;https://git-for-windows.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git for windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="GitHub" scheme="maode.github.io/tags/GitHub/"/>
    
      <category term="hexo" scheme="maode.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse与GitHub之间的操作</title>
    <link href="maode.github.io/2017/09/02/170905-eclipse-github/"/>
    <id>maode.github.io/2017/09/02/170905-eclipse-github/</id>
    <published>2017-09-02T07:32:41.000Z</published>
    <updated>2017-09-28T03:39:39.743Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Eclipse生SSH-Key添加到GitHub"><a href="#Eclipse生SSH-Key添加到GitHub" class="headerlink" title="Eclipse生SSH Key添加到GitHub"></a>Eclipse生SSH Key添加到GitHub</h2><p>window → preference → general → network connection → SSH2 → Key Management → generate RSA Key… → ave private key…【默认保存在“~/.ssh/”目录下】→apply.</p>
<p>点击Export Via SFTP,在弹出窗口填入 <code>git@github.com</code>，然后会在ssh目录中生成一个<code>known_hosts</code>文件，该文件用来保存当前密钥对应的已知远程主机列表，如果没有该文件会报错。连不上Github。<br>若出现： <code>Failed to export ssh key to remote server</code> 的警告，不需理会。</p>
<p>然后复制中间文本域中的公钥到GitHub就可以了。</p>
<p>关于<code>known_hosts</code>文件的说明可以参考该文章：<a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="external">SSH原理与运用</a></p>
<a id="more"></a>
<h2 id="从GitHub获取项目到本地Eclipse"><a href="#从GitHub获取项目到本地Eclipse" class="headerlink" title="从GitHub获取项目到本地Eclipse"></a>从GitHub获取项目到本地Eclipse</h2><p>打开Eclipse》点击File》Import》Git》Projects from Git》Clone URI（输入GitHub项目的URL）》Next  （选择本地存放目录，视具体情况可放在Eclipse的工作空间中，比较方便管理）》Next（下载完成后就代码就被抓取到指定目录了）》选择 Use the New Project wizard》【然后根据具体项目类型 next……】》Finish。</p>
<h2 id="导入本地已存在的项目至Eclipse，如maven项目："><a href="#导入本地已存在的项目至Eclipse，如maven项目：" class="headerlink" title="导入本地已存在的项目至Eclipse，如maven项目："></a>导入本地已存在的项目至Eclipse，如maven项目：</h2><p>File》Import》Maven【Existing Maven Projects】》Next【Browser选择刚才下载好的项目】》Finish。</p>
<h2 id="将本地Eclipse项目提交至GitHub"><a href="#将本地Eclipse项目提交至GitHub" class="headerlink" title="将本地Eclipse项目提交至GitHub"></a>将本地Eclipse项目提交至GitHub</h2><p><strong>创建并关联Eclipse项目至本地repository：</strong></p>
<p>在Eclipse项目上单击右键》Team》Share project【勾选Use or create repository in parent folder of project,,然后在弹出的对话框中选择当前project】》点击Create repository》Finish。</p>
<p><strong>提交项目至GitHub：</strong></p>
<p>在github创建新的repository。</p>
<p>在项目上单击右键Team》commit【输入commit msg、author、committer】》Commit或Commit and Push.</p>
<p>在项目上单击右键Team》Remote》Push》在URI中输入GitHub项目的URL、用户名、密码》Next》Source ref:选择master[branch]，会自动填充Source ref:和Destination ref:为“refs/heads/master”》点击 Add all Branch Spec》Finish。</p>
<p>在Crete repository前会有一个“Creation of repositories in the Eclipse workspace is not recommended”提示，不建议在Eclipse的工作空间中创建本地repository，【因为可能引发一连串的问题，或影响性能】可选在其它路径下创建，随意，放在工作空间中比较方便管理，目前还没发现什么问题，有问题再说吧！</p>
<hr>
<h2 id="常用操作："><a href="#常用操作：" class="headerlink" title="常用操作："></a>常用操作：</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><strong>Remote：</strong> 远程仓库，可在此处配置多个不同的远程仓库。</p>
<p>【push…】  可以将项目push到指定的远程仓库地址。</p>
<p>【Fetch From…】  可从指定的远程仓库地址抓取项目到本地。</p>
<p>【Configure Push to Upstream…】配置推送的远程仓库。</p>
<p>【Configure Fetch from Upstream…】配置抓取的远程仓库。</p>
<p><img src="/assets/blogImg/170905-eclipse-github-1.png" alt=""></p>
<h3 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h3><p>【Pull】    更新远程仓库的变更信息至本地仓库，比较常用，每次远程版本库有变更都需要先Pull一下。</p>
<p>【commit…】  提交，提交至本地仓库。</p>
<p>【Push to Upstream】  将本地仓库推送至当前默认远程仓库的默认分支。</p>
<p>【Fetch from Upstream】  从当前默认远程仓库的默认分支抓取项目到本地仓库。</p>
<p>【Push Branch…】  将本地仓库推送至指定远程仓库的指定分支。</p>
<p><img src="/assets/blogImg/170905-eclipse-github-2.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Eclipse生SSH-Key添加到GitHub&quot;&gt;&lt;a href=&quot;#Eclipse生SSH-Key添加到GitHub&quot; class=&quot;headerlink&quot; title=&quot;Eclipse生SSH Key添加到GitHub&quot;&gt;&lt;/a&gt;Eclipse生SSH Key添加到GitHub&lt;/h2&gt;&lt;p&gt;window → preference → general → network connection → SSH2 → Key Management → generate RSA Key… → ave private key…【默认保存在“~/.ssh/”目录下】→apply.&lt;/p&gt;
&lt;p&gt;点击Export Via SFTP,在弹出窗口填入 &lt;code&gt;git@github.com&lt;/code&gt;，然后会在ssh目录中生成一个&lt;code&gt;known_hosts&lt;/code&gt;文件，该文件用来保存当前密钥对应的已知远程主机列表，如果没有该文件会报错。连不上Github。&lt;br&gt;若出现： &lt;code&gt;Failed to export ssh key to remote server&lt;/code&gt; 的警告，不需理会。&lt;/p&gt;
&lt;p&gt;然后复制中间文本域中的公钥到GitHub就可以了。&lt;/p&gt;
&lt;p&gt;关于&lt;code&gt;known_hosts&lt;/code&gt;文件的说明可以参考该文章：&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SSH原理与运用&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="GitHub" scheme="maode.github.io/tags/GitHub/"/>
    
      <category term="Eclipse" scheme="maode.github.io/tags/Eclipse/"/>
    
  </entry>
  
  <entry>
    <title>Yu Writer 编辑器下的空白模板</title>
    <link href="maode.github.io/2017/09/02/A-empty-temp-yuwi/"/>
    <id>maode.github.io/2017/09/02/A-empty-temp-yuwi/</id>
    <published>2017-09-02T07:32:41.000Z</published>
    <updated>2017-09-25T12:22:04.466Z</updated>
    
    <content type="html"><![CDATA[<p>这是自定义的Yu Writer 编辑器下的空白模板。</p>
<p>参考资料的等级：    ★☆</p>
<p>脚注：    ①②③④⑤⑥⑦⑧⑨⑩    ↩</p>
<p>暂时就这些，后面没有了！(=^ ^=)</p>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是自定义的Yu Writer 编辑器下的空白模板。&lt;/p&gt;
&lt;p&gt;参考资料的等级：    ★☆&lt;/p&gt;
&lt;p&gt;脚注：    ①②③④⑤⑥⑦⑧⑨⑩    ↩&lt;/p&gt;
&lt;p&gt;暂时就这些，后面没有了！(=^ ^=)&lt;/p&gt;
    
    </summary>
    
    
      <category term="temp" scheme="maode.github.io/tags/temp/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="maode.github.io/2017/09/01/hello-world/"/>
    <id>maode.github.io/2017/09/01/hello-world/</id>
    <published>2017-09-01T10:25:03.122Z</published>
    <updated>2017-09-04T15:04:16.261Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="hello" scheme="maode.github.io/tags/hello/"/>
    
  </entry>
  
</feed>
