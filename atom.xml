<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code0&#39;s notepad</title>
  <subtitle>纯洁的记事本</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="maode.github.io/"/>
  <updated>2018-03-10T03:02:58.826Z</updated>
  <id>maode.github.io/</id>
  
  <author>
    <name>Code0</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【转】Spring Boot配置文件的所有配置项</title>
    <link href="maode.github.io/2018/03/08/180308-SpringBoot-application/"/>
    <id>maode.github.io/2018/03/08/180308-SpringBoot-application/</id>
    <published>2018-03-08T13:02:31.000Z</published>
    <updated>2018-03-10T03:02:58.826Z</updated>
    
    <content type="html"><![CDATA[<p><strong>转自：</strong> <a href="http://blog.csdn.net/LPFSuperMan/article/details/78287265" target="_blank" rel="external">http://blog.csdn.net/LPFSuperMan/article/details/78287265</a></p>
<p>这个版本比较旧了，比较全的配置可以参照官方的介绍</p>
<p><strong>官方文档：</strong> <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html" target="_blank" rel="external">https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html</a></p>
<a id="more"></a>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div><div class="line">770</div><div class="line">771</div><div class="line">772</div><div class="line">773</div><div class="line">774</div><div class="line">775</div><div class="line">776</div><div class="line">777</div><div class="line">778</div><div class="line">779</div><div class="line">780</div><div class="line">781</div><div class="line">782</div><div class="line">783</div><div class="line">784</div><div class="line">785</div><div class="line">786</div><div class="line">787</div><div class="line">788</div><div class="line">789</div><div class="line">790</div><div class="line">791</div><div class="line">792</div><div class="line">793</div><div class="line">794</div><div class="line">795</div><div class="line">796</div><div class="line">797</div><div class="line">798</div><div class="line">799</div><div class="line">800</div><div class="line">801</div><div class="line">802</div><div class="line">803</div><div class="line">804</div><div class="line">805</div><div class="line">806</div><div class="line">807</div><div class="line">808</div><div class="line">809</div><div class="line">810</div><div class="line">811</div><div class="line">812</div><div class="line">813</div><div class="line">814</div><div class="line">815</div><div class="line">816</div><div class="line">817</div><div class="line">818</div><div class="line">819</div><div class="line">820</div><div class="line">821</div><div class="line">822</div><div class="line">823</div><div class="line">824</div><div class="line">825</div><div class="line">826</div><div class="line">827</div><div class="line">828</div><div class="line">829</div><div class="line">830</div><div class="line">831</div><div class="line">832</div><div class="line">833</div><div class="line">834</div><div class="line">835</div><div class="line">836</div><div class="line">837</div><div class="line">838</div><div class="line">839</div><div class="line">840</div><div class="line">841</div><div class="line">842</div><div class="line">843</div><div class="line">844</div><div class="line">845</div><div class="line">846</div><div class="line">847</div><div class="line">848</div><div class="line">849</div><div class="line">850</div><div class="line">851</div><div class="line">852</div><div class="line">853</div><div class="line">854</div><div class="line">855</div><div class="line">856</div><div class="line">857</div><div class="line">858</div><div class="line">859</div><div class="line">860</div><div class="line">861</div><div class="line">862</div><div class="line">863</div><div class="line">864</div><div class="line">865</div><div class="line">866</div><div class="line">867</div><div class="line">868</div><div class="line">869</div><div class="line">870</div><div class="line">871</div><div class="line">872</div><div class="line">873</div><div class="line">874</div><div class="line">875</div><div class="line">876</div><div class="line">877</div><div class="line">878</div><div class="line">879</div><div class="line">880</div><div class="line">881</div><div class="line">882</div><div class="line">883</div><div class="line">884</div><div class="line">885</div><div class="line">886</div><div class="line">887</div><div class="line">888</div><div class="line">889</div><div class="line">890</div><div class="line">891</div><div class="line">892</div><div class="line">893</div><div class="line">894</div><div class="line">895</div><div class="line">896</div><div class="line">897</div><div class="line">898</div><div class="line">899</div><div class="line">900</div><div class="line">901</div><div class="line">902</div><div class="line">903</div><div class="line">904</div><div class="line">905</div><div class="line">906</div><div class="line">907</div><div class="line">908</div><div class="line">909</div><div class="line">910</div><div class="line">911</div><div class="line">912</div><div class="line">913</div><div class="line">914</div><div class="line">915</div><div class="line">916</div><div class="line">917</div><div class="line">918</div><div class="line">919</div><div class="line">920</div><div class="line">921</div><div class="line">922</div><div class="line">923</div><div class="line">924</div><div class="line">925</div><div class="line">926</div><div class="line">927</div><div class="line">928</div><div class="line">929</div><div class="line">930</div><div class="line">931</div><div class="line">932</div><div class="line">933</div><div class="line">934</div><div class="line">935</div><div class="line">936</div><div class="line">937</div><div class="line">938</div><div class="line">939</div><div class="line">940</div><div class="line">941</div><div class="line">942</div><div class="line">943</div><div class="line">944</div><div class="line">945</div><div class="line">946</div><div class="line">947</div><div class="line">948</div><div class="line">949</div><div class="line">950</div><div class="line">951</div><div class="line">952</div><div class="line">953</div><div class="line">954</div><div class="line">955</div><div class="line">956</div><div class="line">957</div><div class="line">958</div><div class="line">959</div><div class="line">960</div><div class="line">961</div><div class="line">962</div><div class="line">963</div><div class="line">964</div><div class="line">965</div><div class="line">966</div><div class="line">967</div><div class="line">968</div><div class="line">969</div><div class="line">970</div><div class="line">971</div><div class="line">972</div><div class="line">973</div><div class="line">974</div><div class="line">975</div><div class="line">976</div><div class="line">977</div><div class="line">978</div><div class="line">979</div><div class="line">980</div><div class="line">981</div><div class="line">982</div><div class="line">983</div><div class="line">984</div><div class="line">985</div><div class="line">986</div><div class="line">987</div><div class="line">988</div><div class="line">989</div><div class="line">990</div><div class="line">991</div><div class="line">992</div><div class="line">993</div><div class="line">994</div><div class="line">995</div><div class="line">996</div><div class="line">997</div><div class="line">998</div><div class="line">999</div><div class="line">1000</div><div class="line">1001</div><div class="line">1002</div><div class="line">1003</div><div class="line">1004</div><div class="line">1005</div><div class="line">1006</div><div class="line">1007</div><div class="line">1008</div><div class="line">1009</div><div class="line">1010</div><div class="line">1011</div><div class="line">1012</div><div class="line">1013</div><div class="line">1014</div><div class="line">1015</div><div class="line">1016</div><div class="line">1017</div><div class="line">1018</div><div class="line">1019</div><div class="line">1020</div><div class="line">1021</div><div class="line">1022</div><div class="line">1023</div><div class="line">1024</div><div class="line">1025</div><div class="line">1026</div><div class="line">1027</div><div class="line">1028</div><div class="line">1029</div><div class="line">1030</div><div class="line">1031</div><div class="line">1032</div><div class="line">1033</div><div class="line">1034</div><div class="line">1035</div><div class="line">1036</div><div class="line">1037</div><div class="line">1038</div><div class="line">1039</div><div class="line">1040</div><div class="line">1041</div><div class="line">1042</div><div class="line">1043</div><div class="line">1044</div><div class="line">1045</div><div class="line">1046</div><div class="line">1047</div><div class="line">1048</div><div class="line">1049</div><div class="line">1050</div><div class="line">1051</div><div class="line">1052</div><div class="line">1053</div><div class="line">1054</div><div class="line">1055</div><div class="line">1056</div><div class="line">1057</div><div class="line">1058</div><div class="line">1059</div><div class="line">1060</div><div class="line">1061</div><div class="line">1062</div><div class="line">1063</div><div class="line">1064</div><div class="line">1065</div><div class="line">1066</div><div class="line">1067</div><div class="line">1068</div><div class="line">1069</div><div class="line">1070</div><div class="line">1071</div><div class="line">1072</div><div class="line">1073</div><div class="line">1074</div><div class="line">1075</div><div class="line">1076</div><div class="line">1077</div><div class="line">1078</div><div class="line">1079</div><div class="line">1080</div><div class="line">1081</div><div class="line">1082</div><div class="line">1083</div><div class="line">1084</div><div class="line">1085</div><div class="line">1086</div><div class="line">1087</div><div class="line">1088</div><div class="line">1089</div><div class="line">1090</div><div class="line">1091</div><div class="line">1092</div><div class="line">1093</div><div class="line">1094</div><div class="line">1095</div><div class="line">1096</div><div class="line">1097</div><div class="line">1098</div><div class="line">1099</div><div class="line">1100</div><div class="line">1101</div><div class="line">1102</div><div class="line">1103</div><div class="line">1104</div><div class="line">1105</div><div class="line">1106</div><div class="line">1107</div><div class="line">1108</div><div class="line">1109</div><div class="line">1110</div><div class="line">1111</div><div class="line">1112</div><div class="line">1113</div><div class="line">1114</div><div class="line">1115</div><div class="line">1116</div><div class="line">1117</div><div class="line">1118</div><div class="line">1119</div><div class="line">1120</div><div class="line">1121</div><div class="line">1122</div><div class="line">1123</div><div class="line">1124</div><div class="line">1125</div><div class="line">1126</div><div class="line">1127</div><div class="line">1128</div><div class="line">1129</div><div class="line">1130</div><div class="line">1131</div><div class="line">1132</div><div class="line">1133</div><div class="line">1134</div><div class="line">1135</div><div class="line">1136</div><div class="line">1137</div><div class="line">1138</div><div class="line">1139</div><div class="line">1140</div><div class="line">1141</div><div class="line">1142</div><div class="line">1143</div><div class="line">1144</div><div class="line">1145</div><div class="line">1146</div><div class="line">1147</div><div class="line">1148</div><div class="line">1149</div><div class="line">1150</div><div class="line">1151</div><div class="line">1152</div><div class="line">1153</div><div class="line">1154</div><div class="line">1155</div><div class="line">1156</div><div class="line">1157</div><div class="line">1158</div><div class="line">1159</div><div class="line">1160</div><div class="line">1161</div><div class="line">1162</div><div class="line">1163</div><div class="line">1164</div><div class="line">1165</div><div class="line">1166</div><div class="line">1167</div><div class="line">1168</div><div class="line">1169</div><div class="line">1170</div><div class="line">1171</div><div class="line">1172</div><div class="line">1173</div><div class="line">1174</div><div class="line">1175</div><div class="line">1176</div><div class="line">1177</div><div class="line">1178</div><div class="line">1179</div><div class="line">1180</div><div class="line">1181</div><div class="line">1182</div><div class="line">1183</div><div class="line">1184</div><div class="line">1185</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"><span class="comment"># 核心属性</span></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># 文件编码</span></div><div class="line">banner.charset= UTF-8</div><div class="line"><span class="comment"># 文件位置</span></div><div class="line">banner.location= classpath:banner.txt</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 日志配置</span></div><div class="line"></div><div class="line"><span class="comment"># 日志配置文件的位置。 例如对于Logback的`classpath：logback.xml`</span></div><div class="line">logging.config= </div><div class="line"><span class="comment"># 记录异常时使用的转换字。</span></div><div class="line">logging.exception-conversion-word=％wEx</div><div class="line"><span class="comment"># 日志文件名。 例如`myapp.log`</span></div><div class="line">logging.file= </div><div class="line"><span class="comment"># 日志级别严重性映射。 例如`logging.level.org.springframework =  DEBUG`</span></div><div class="line">logging.level.*= </div><div class="line"><span class="comment"># 日志文件的位置。 例如`/ var / log`</span></div><div class="line">logging.path= </div><div class="line"><span class="comment"># 用于输出到控制台的Appender模式。 只支持默认的logback设置。</span></div><div class="line">logging.pattern.console= </div><div class="line"><span class="comment"># 用于输出到文件的Appender模式。 只支持默认的logback设置。</span></div><div class="line">logging.pattern.file= </div><div class="line"><span class="comment"># 日志级别的Appender模式（默认％5p）。 只支持默认的logback设置。</span></div><div class="line">logging.pattern.level= </div><div class="line"><span class="comment">#注册日志记录系统的初始化挂钩。</span></div><div class="line">logging.register-shutdown-hook= false</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># AOP 切面</span></div><div class="line"><span class="comment"># 添加@EnableAspectJAutoProxy。</span></div><div class="line">spring.aop.auto= true</div><div class="line"><span class="comment"># 是否要创建基于子类（CGLIB）的代理（true），而不是基于标准的基于Java接口的代理（false）。</span></div><div class="line">spring.aop.proxy-target-class= false</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 应用程序上下文初始化器</span></div><div class="line"><span class="comment"># 应用指标。</span></div><div class="line">spring.application.index= </div><div class="line"><span class="comment"># 应用程序名称。</span></div><div class="line">spring.application.name= </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 国际化（消息源自动配置）</span></div><div class="line"><span class="comment">#</span></div><div class="line">spring.messages.basename= messages</div><div class="line"><span class="comment"># 以逗号分隔的基础名称列表，每个都在ResourceBundle约定之后。</span></div><div class="line"><span class="comment"># 加载的资源束文件缓存到期，以秒为单位。 设置为-1时，软件包将永久缓存。</span></div><div class="line">spring.messages.cache-seconds= -1</div><div class="line"><span class="comment"># 消息编码。</span></div><div class="line">spring.messages.encoding= UTF-8</div><div class="line"><span class="comment"># 设置是否返回到系统区域设置，如果没有找到特定语言环境的文件。</span></div><div class="line">spring.messages.fallback-to-system-locale= true</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># REDIS (Redis 配置)</span></div><div class="line"><span class="comment"># 连接工厂使用的数据库索引。</span></div><div class="line">spring.redis.database= 0</div><div class="line"><span class="comment"># Redis服务器主机。</span></div><div class="line">spring.redis.host= localhost</div><div class="line"><span class="comment"># 登录redis服务器的密码。</span></div><div class="line">spring.redis.password= </div><div class="line"><span class="comment"># 给定时间池可以分配的最大连接数。 使用负值为无限制。</span></div><div class="line">spring.redis.pool.max-active= 8</div><div class="line"><span class="comment"># 池中“空闲”连接的最大数量。 使用负值来表示无限数量的空闲连接。</span></div><div class="line">spring.redis.pool.max-idle= 8</div><div class="line"><span class="comment"># 连接分配在池耗尽之前在抛出异常之前应阻止的最大时间量（以毫秒为单位）。 使用负值无限期地阻止。</span></div><div class="line">spring.redis.pool.max-wait= -1</div><div class="line"><span class="comment"># 定义池中维护的最小空闲连接数。 此设置只有在正值时才有效果。</span></div><div class="line">spring.redis.pool.min-idle= 0</div><div class="line"><span class="comment"># redis服务器端口</span></div><div class="line">spring.redis.port= 6379</div><div class="line"><span class="comment"># redis服务器名称</span></div><div class="line">spring.redis.sentinel.master=</div><div class="line"><span class="comment"># </span></div><div class="line">spring.redis.sentinel.nodes= </div><div class="line"><span class="comment"># 连接超时（毫秒）。</span></div><div class="line">spring.redis.timeout= 0</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 管理员 （Spring应用程序管理员JMX自动配置）</span></div><div class="line"><span class="comment"># 开启应用管理功能。</span></div><div class="line">spring.application.admin.enabled= false</div><div class="line"><span class="comment"># JMX应用程序名称MBean。</span></div><div class="line">spring.application.admin.jmx-name= org.springframework.boot:type= Admin,name= SpringApplication</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 自动配置</span></div><div class="line"><span class="comment"># 自动配置类排除。</span></div><div class="line">spring.autoconfigure.exclude= </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># spring 核心配置</span></div><div class="line"><span class="comment"># 跳过搜索BeanInfo类。</span></div><div class="line">spring.beaninfo.ignore= true</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># spring 缓存配置</span></div><div class="line"><span class="comment"># 由底层缓存管理器支持的要创建的缓存名称的逗号分隔列表。</span></div><div class="line">spring.cache.cache-names= </div><div class="line"><span class="comment"># 用于初始化EhCache的配置文件的位置。</span></div><div class="line">spring.cache.ehcache.config= </div><div class="line"><span class="comment"># 用于创建缓存的规范。 检查CacheBuilderSpec有关规格格式的更多细节。</span></div><div class="line">spring.cache.guava.spec= </div><div class="line"><span class="comment"># 用于初始化Hazelcast的配置文件的位置。</span></div><div class="line">spring.cache.hazelcast.config= </div><div class="line"><span class="comment"># 用于初始化Infinispan的配置文件的位置。</span></div><div class="line">spring.cache.infinispan.config= </div><div class="line"><span class="comment"># 用于初始化缓存管理器的配置文件的位置。</span></div><div class="line">spring.cache.jcache.config= </div><div class="line"><span class="comment"># 用于检索符合JSR-107的缓存管理器的CachingProvider实现的完全限定名称。 只有在类路径上有多个JSR-107实现可用时才需要。</span></div><div class="line">spring.cache.jcache.provider= </div><div class="line"><span class="comment"># 缓存类型，默认情况下根据环境自动检测。</span></div><div class="line">spring.cache.type= </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># spring配置 （配置文件应用侦听器）</span></div><div class="line"><span class="comment"># 配置文件位置。</span></div><div class="line">spring.config.location= </div><div class="line"><span class="comment"># 配置文件名。</span></div><div class="line">spring.config.name= application</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># hazelcast配置(Hazelcast是一个高度可扩展的数据分发和集群平台，提供了高效的、可扩展的分布式数据存储、数据缓存.)</span></div><div class="line"><span class="comment"># 用于初始化Hazelcast的配置文件的位置。</span></div><div class="line">spring.hazelcast.config= </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># JMX</span></div><div class="line"><span class="comment"># JMX域名。</span></div><div class="line">spring.jmx.default-domain= </div><div class="line"><span class="comment"># 将管理bean暴露给JMX域。</span></div><div class="line">spring.jmx.enabled= true</div><div class="line"><span class="comment"># MBean服务器bean名称。</span></div><div class="line">spring.jmx.server= mbeanServer</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Email (MailProperties)  邮件属性</span></div><div class="line"><span class="comment"># 默认MimeMessage编码。</span></div><div class="line">spring.mail.default-encoding= UTF-8</div><div class="line"><span class="comment"># SMTP服务器主机。 例如`smtp.example.com`</span></div><div class="line">spring.mail.host= </div><div class="line"><span class="comment"># 会话JNDI名称。 设置时，优先于其他邮件设置。</span></div><div class="line">spring.mail.jndi-name= </div><div class="line"><span class="comment"># 登录SMTP服务器的密码。</span></div><div class="line">spring.mail.password= </div><div class="line"><span class="comment"># SMTP服务器端口。</span></div><div class="line">spring.mail.port= </div><div class="line"><span class="comment"># 其他JavaMail会话属性。</span></div><div class="line">spring.mail.properties.*= </div><div class="line"><span class="comment"># SMTP服务器使用的协议。</span></div><div class="line">spring.mail.protocol= smtp</div><div class="line"><span class="comment"># 测试邮件服务器在启动时可用。</span></div><div class="line">spring.mail.test-connection= false</div><div class="line"><span class="comment"># 登录SMTP服务器的用户。</span></div><div class="line">spring.mail.username= </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 应用设置（spring应用）</span></div><div class="line"><span class="comment"># 用于在应用程序运行时显示横幅的模式。</span></div><div class="line">spring.main.banner-mode= console</div><div class="line"><span class="comment"># 源（类名，包名或XML资源位置）包含在ApplicationContext中。</span></div><div class="line">spring.main.sources= </div><div class="line"><span class="comment"># 在Web环境中运行应用程序（默认情况下自动检测）。</span></div><div class="line">spring.main.web-environment= </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 文件编码（文件编码应用程序侦听器）</span></div><div class="line"><span class="comment"># 应用程序使用的预期字符编码。</span></div><div class="line">spring.mandatory-file-encoding= </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 输出</span></div><div class="line"><span class="comment"># 配置ANSI输出（可以是“detect”，“always”，“never”）--&gt;“检测”，“永远”，“从不”</span></div><div class="line">spring.output.ansi.enabled= detect</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># PID文件（应用程序文件写入器）</span></div><div class="line"><span class="comment"># 如果使用ApplicationPidFileWriter但是无法写入PID文件，则失败。</span></div><div class="line">spring.pid.fail-on-write-error= </div><div class="line"><span class="comment"># 要写入的PID文件的位置（如果使用ApplicationPidFileWriter）。</span></div><div class="line">spring.pid.file= </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#   简介（profiles 这个单词翻译过来就是这样... 没用过这个属性，有哪位大神用过请留言我改正，感谢。）</span></div><div class="line"><span class="comment"># 活动配置文件的逗号分隔列表。</span></div><div class="line">spring.profiles.active= </div><div class="line"><span class="comment"># 无条件地激活指定的逗号分隔的配置文件。</span></div><div class="line">spring.profiles.include= </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># SendGrid（SendGrid自动配置）</span></div><div class="line"><span class="comment"># SendGrid帐号用户名</span></div><div class="line">spring.sendgrid.username= </div><div class="line"><span class="comment"># SendGrid帐号密码</span></div><div class="line">spring.sendgrid.password= </div><div class="line"><span class="comment"># SendGrid代理主机</span></div><div class="line">spring.sendgrid.proxy.host= </div><div class="line"><span class="comment"># SendGrid代理端口</span></div><div class="line">spring.sendgrid.proxy.port= </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"><span class="comment">#   WEB属性</span></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 文件上传属性</span></div><div class="line"><span class="comment"># 启用对文件上传的支持。</span></div><div class="line">multipart.enabled= true</div><div class="line"><span class="comment"># 将文件写入磁盘后的阈值。 值可以使用后缀“MB”或“KB”表示兆字节或千字节大小。</span></div><div class="line">multipart.file-size-threshold= 0</div><div class="line"><span class="comment"># 上传文件的位置。</span></div><div class="line">multipart.location= </div><div class="line"><span class="comment"># 最大文件大小。 值可以使用后缀“MB”或“KB”表示兆字节或千字节大小。</span></div><div class="line">multipart.max-file-size= 1Mb</div><div class="line"><span class="comment"># 最大请求大小。 值可以使用后缀“MB”或“KB”表示兆字节或千字节大小。</span></div><div class="line">multipart.max-request-size= 10Mb</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 嵌入式服务器配置（服务器属性）</span></div><div class="line"><span class="comment"># 服务器应绑定到的网络地址。</span></div><div class="line">server.address= </div><div class="line"><span class="comment"># 如果启用响应压缩。</span></div><div class="line">server.compression.enabled= false</div><div class="line"><span class="comment"># 从压缩中排除的用户代理列表。</span></div><div class="line">server.compression.excluded-user-agents= </div><div class="line"><span class="comment"># 应该压缩的MIME类型的逗号分隔列表。 例如`text / html，text / css，application / json`</span></div><div class="line">server.compression.mime-types= </div><div class="line"><span class="comment"># 执行压缩所需的最小响应大小。 例如2048</span></div><div class="line">server.compression.min-response-size= </div><div class="line"><span class="comment"># Servlet上下文初始化参数。 例如`server.context-parameters.a =  alpha`</span></div><div class="line">server.context-parameters.*= </div><div class="line"><span class="comment"># 应用程序的上下文路径。</span></div><div class="line">server.context-path= </div><div class="line"><span class="comment"># 显示应用程序的名称。</span></div><div class="line">server.display-name= application</div><div class="line"><span class="comment"># 何时包含“stacktrace”属性。</span></div><div class="line">server.error.include-stacktrace= never</div><div class="line"><span class="comment"># 错误控制器的路径。</span></div><div class="line">server.error.path= /error</div><div class="line"><span class="comment"># 启动浏览器中出现服务器错误时显示的默认错误页面。</span></div><div class="line">server.error.whitelabel.enabled= true</div><div class="line"><span class="comment"># JSP servlet的类名。</span></div><div class="line">server.jsp-servlet.class-name= org.apache.jasper.servlet.JspServlet</div><div class="line"><span class="comment"># Init参数用于配置JSP servlet</span></div><div class="line">server.jsp-servlet.init-parameters.*= </div><div class="line"><span class="comment"># JSP servlet是否被注册</span></div><div class="line">server.jsp-servlet.registered= true</div><div class="line"><span class="comment"># 服务器HTTP端口。</span></div><div class="line">server.port= 8080</div><div class="line"><span class="comment"># 主调度程序servlet的路径。</span></div><div class="line">server.servlet-path= /</div><div class="line"><span class="comment"># 会话cookie的注释。</span></div><div class="line">server.session.cookie.comment= </div><div class="line"><span class="comment"># 会话cookie的域。</span></div><div class="line">server.session.cookie.domain= </div><div class="line"><span class="comment"># “HttpOnly”标志为会话cookie。</span></div><div class="line">server.session.cookie.http-only= </div><div class="line"><span class="comment"># 会话cookie的最大时长（以秒为单位）。</span></div><div class="line">server.session.cookie.max-age= </div><div class="line"><span class="comment"># 会话cookie名称。</span></div><div class="line">server.session.cookie.name= </div><div class="line"><span class="comment"># 会话cookie的路径。</span></div><div class="line">server.session.cookie.path= </div><div class="line"><span class="comment"># 会话cookie的“安全”标志。</span></div><div class="line">server.session.cookie.secure= </div><div class="line"><span class="comment"># 重启之间持续会话数据。</span></div><div class="line">server.session.persistent= false</div><div class="line"><span class="comment"># 用于存储会话数据的目录。</span></div><div class="line">server.session.store-dir= </div><div class="line"><span class="comment"># 会话超时（秒）。</span></div><div class="line">server.session.timeout= </div><div class="line"><span class="comment"># 会话跟踪模式（以下一个或多个：“cookie”，“url”，“ssl”）。</span></div><div class="line">server.session.tracking-modes= </div><div class="line"><span class="comment"># 支持SSL密码。</span></div><div class="line">server.ssl.ciphers= </div><div class="line"><span class="comment"># 客户端认证是否需要（“want”）或需要（“need”）。 需要信任存储。</span></div><div class="line">server.ssl.client-auth= </div><div class="line"><span class="comment"># ssl配置</span></div><div class="line">server.ssl.enabled= </div><div class="line">server.ssl.key-alias= </div><div class="line">server.ssl.key-password= </div><div class="line">server.ssl.key-store= </div><div class="line">server.ssl.key-store-password= </div><div class="line">server.ssl.key-store-provider= </div><div class="line">server.ssl.key-store-type= </div><div class="line">server.ssl.protocol= </div><div class="line">server.ssl.trust-store= </div><div class="line">server.ssl.trust-store-password= </div><div class="line">server.ssl.trust-store-provider= </div><div class="line">server.ssl.trust-store-type= </div><div class="line"><span class="comment"># 创建日志文件的目录。 可以相对于tomcat base dir或absolute。</span></div><div class="line">server.tomcat.accesslog.directory= </div><div class="line"><span class="comment"># 启用访问日志。</span></div><div class="line">server.tomcat.accesslog.enabled= false</div><div class="line"><span class="comment"># 访问日志的格式化模式。</span></div><div class="line">server.tomcat.accesslog.pattern= common</div><div class="line"><span class="comment"># 日志文件名前缀。</span></div><div class="line">server.tomcat.accesslog.prefix= access_log</div><div class="line"><span class="comment"># 日志文件名后缀。</span></div><div class="line">server.tomcat.accesslog.suffix= .log</div><div class="line"><span class="comment"># 在调用backgroundProcess方法之间延迟秒。</span></div><div class="line">server.tomcat.background-processor-delay= 30</div><div class="line"><span class="comment"># Tomcat基本目录。 如果未指定，将使用临时目录。</span></div><div class="line">server.tomcat.basedir= </div><div class="line"><span class="comment"># 正则表达式匹配可信IP地址。</span></div><div class="line">server.tomcat.internal-proxies= 10\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\192\\.168\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\169\\.254\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\127\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\172\\.1[6-9]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\172\\.2[0-9]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\172\\.3[0-1]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;</div><div class="line"><span class="comment"># HTTP消息头的最大大小（以字节为单位）。</span></div><div class="line">server.tomcat.max-http-header-size= 0</div><div class="line"><span class="comment"># 最大工作线程数。</span></div><div class="line">server.tomcat.max-threads= 0</div><div class="line"><span class="comment"># 用于覆盖原始端口值的HTTP头的名称。</span></div><div class="line">server.tomcat.port-header= X-Forwarded-Port</div><div class="line"><span class="comment"># 头文件，保存传入协议，通常命名为“X-Forwarded-Proto”。</span></div><div class="line">server.tomcat.protocol-header= </div><div class="line"><span class="comment"># 表示传入请求使用SSL的协议头的值。</span></div><div class="line">server.tomcat.protocol-header-https-value= https</div><div class="line"><span class="comment"># 提取远程ip的HTTP头的名称。 例如`X-FORWARDED-FOR`</span></div><div class="line">server.tomcat.remote-ip-header= </div><div class="line"><span class="comment"># 用于解码URI的字符编码。</span></div><div class="line">server.tomcat.uri-encoding= UTF-8</div><div class="line"><span class="comment"># 访问日志目录。</span></div><div class="line">server.undertow.accesslog.dir= </div><div class="line"><span class="comment"># 启用访问日志。</span></div><div class="line">server.undertow.accesslog.enabled= false</div><div class="line"><span class="comment"># 访问日志的格式化模式。</span></div><div class="line">server.undertow.accesslog.pattern= common</div><div class="line"><span class="comment"># 每个缓冲区的大小字节数。</span></div><div class="line">server.undertow.buffer-size= </div><div class="line"><span class="comment"># 每个区域的缓冲区数。</span></div><div class="line">server.undertow.buffers-per-region= </div><div class="line"><span class="comment"># 在Java堆之外分配缓冲区。</span></div><div class="line">server.undertow.direct-buffers= </div><div class="line"><span class="comment"># 为工作者创建的I / O线程数。</span></div><div class="line">server.undertow.io-threads= </div><div class="line"><span class="comment"># 工作线程数。</span></div><div class="line">server.undertow.worker-threads= </div><div class="line"><span class="comment"># 如果X-Forwarded- *头应该应用于HttpRequest。</span></div><div class="line">server.use-forward-headers= </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 自由标记（自由标记自动配置）</span></div><div class="line"><span class="comment"># 设置是否允许HttpServletRequest属性重写（隐藏）控制器生成的同名模型属性。</span></div><div class="line">spring.freemarker.allow-request-override= false</div><div class="line"><span class="comment"># 设置是否允许HttpSession属性重写（隐藏）控制器生成的相同名称的模型属性。</span></div><div class="line">spring.freemarker.allow-session-override= false</div><div class="line"><span class="comment"># 启用模板缓存。</span></div><div class="line">spring.freemarker.cache= false</div><div class="line"><span class="comment"># 模板编码。</span></div><div class="line">spring.freemarker.charset= UTF-8</div><div class="line"><span class="comment"># 检查模板位置是否存在。</span></div><div class="line">spring.freemarker.check-template-location= true</div><div class="line"><span class="comment"># Content-Type值。</span></div><div class="line">spring.freemarker.content-type= text/html</div><div class="line"><span class="comment"># 启用此技术的MVC视图分辨率。</span></div><div class="line">spring.freemarker.enabled= true</div><div class="line"><span class="comment"># 设置在与模板合并之前是否应将所有请求属性添加到模型中。</span></div><div class="line">spring.freemarker.expose-request-attributes= false</div><div class="line"><span class="comment"># 设置在与模板合并之前是否应将所有HttpSession属性添加到模型中。</span></div><div class="line">spring.freemarker.expose-session-attributes= false</div><div class="line"><span class="comment"># 设置是否公开一个RequestContext供Spring 的宏库使用，名称为“springMacroRequestContext”。</span></div><div class="line">spring.freemarker.expose-spring-macro-helpers= true</div><div class="line"><span class="comment"># 首选文件系统访问模板加载。 文件系统访问可以对模板更改进行热检测。</span></div><div class="line">spring.freemarker.prefer-file-system-access= true</div><div class="line"><span class="comment"># 前缀，在构建URL时先查看名称。</span></div><div class="line">spring.freemarker.prefix= </div><div class="line"><span class="comment"># 所有视图的RequestContext属性的名称。</span></div><div class="line">spring.freemarker.request-context-attribute= </div><div class="line"><span class="comment"># 公开的FreeMarker密钥将被传递给FreeMarker的配置。</span></div><div class="line">spring.freemarker.settings.*= </div><div class="line"><span class="comment"># 后缀，在构建URL时附加到查看名称。</span></div><div class="line">spring.freemarker.suffix= </div><div class="line"><span class="comment"># 逗号分隔的模板路径列表。</span></div><div class="line">spring.freemarker.template-loader-path= classpath:/templates/</div><div class="line"><span class="comment"># 可以解决的视图名称的白名单。</span></div><div class="line">spring.freemarker.view-names= </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># groovr模板（Groovy模板自动配置）</span></div><div class="line"><span class="comment"># 设置是否允许HttpServletRequest属性重写（隐藏）控制器生成的同名模型属性。</span></div><div class="line">spring.groovy.template.allow-request-override= false</div><div class="line"><span class="comment"># 设置是否允许HttpSession属性重写（隐藏）控制器生成的相同名称的模型属性。</span></div><div class="line">spring.groovy.template.allow-session-override= false</div><div class="line"><span class="comment"># 启用模板缓存。</span></div><div class="line">spring.groovy.template.cache= </div><div class="line"><span class="comment"># 模板编码。</span></div><div class="line">spring.groovy.template.charset= UTF-8</div><div class="line"><span class="comment"># 检查模板位置是否存在。</span></div><div class="line">spring.groovy.template.check-template-location= true</div><div class="line"><span class="comment"># 请参阅GroovyMarkupConfigurer</span></div><div class="line">spring.groovy.template.configuration.*= </div><div class="line"><span class="comment"># Content-Type值。</span></div><div class="line">spring.groovy.template.content-type= test/html</div><div class="line"><span class="comment"># 启用此技术的MVC视图分辨率。</span></div><div class="line">spring.groovy.template.enabled= true</div><div class="line"><span class="comment"># 设置在与模板合并之前是否应将所有请求属性添加到模型中。</span></div><div class="line">spring.groovy.template.expose-request-attributes= false</div><div class="line"><span class="comment"># 设置在与模板合并之前是否应将所有HttpSession属性添加到模型中。</span></div><div class="line">spring.groovy.template.expose-session-attributes= false</div><div class="line"><span class="comment"># 设置是否公开一个RequestContext供Spring Spring的宏库使用，名称为“springMacroRequestContext”。</span></div><div class="line">spring.groovy.template.expose-spring-macro-helpers= true</div><div class="line"><span class="comment"># 前缀，在构建URL时先查看名称。</span></div><div class="line">spring.groovy.template.prefix= </div><div class="line"><span class="comment"># 所有视图的RequestContext属性的名称。</span></div><div class="line">spring.groovy.template.request-context-attribute= </div><div class="line"><span class="comment"># 模板路径。</span></div><div class="line">spring.groovy.template.resource-loader-path= classpath:/templates/</div><div class="line"><span class="comment"># 后缀，在构建URL时附加到查看名称。</span></div><div class="line">spring.groovy.template.suffix= .tpl</div><div class="line"><span class="comment"># 可以解决的视图名称的白名单。</span></div><div class="line">spring.groovy.template.view-names= </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># spring Hateoas 配置</span></div><div class="line"><span class="comment"># 指定应用程序/ hal + json响应是否应发送到接受application / json的请求。</span></div><div class="line">spring.hateoas.use-hal-as-default-json-media-type= true</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># HTTP 消息转换</span></div><div class="line"><span class="comment"># 首选JSON映射程序用于HTTP消息转换。 设置为“gson”强制使用Gson，当它和Jackson都在类路径上时。</span></div><div class="line">spring.http.converters.preferred-json-mapper= jackson</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># HTTP 编码（Http编码属性）</span></div><div class="line"><span class="comment"># HTTP请求和响应的字符集。 如果未明确设置，则添加到“Content-Type”头。</span></div><div class="line">spring.http.encoding.charset= UTF-8</div><div class="line"><span class="comment"># 启用http编码支持。</span></div><div class="line">spring.http.encoding.enabled= true</div><div class="line"><span class="comment"># 将编码强制到HTTP请求和响应上配置的字符集。</span></div><div class="line">spring.http.encoding.force= true</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Jackson(解析json和序列化json) 配置</span></div><div class="line"><span class="comment"># 日期格式字符串或全限定日期格式类名。 例如`yyyy-MM-dd HH：mm：ss`。</span></div><div class="line">spring.jackson.date-format= </div><div class="line"><span class="comment"># Jones开/关功能，影响Java对象反序列化的方式。</span></div><div class="line">spring.jackson.deserialization.*= </div><div class="line"><span class="comment"># 关闭或者打开Jackson 功能</span></div><div class="line">spring.jackson.generator.*= </div><div class="line"><span class="comment"># Joda日期时间格式字符串。 如果未配置，如果配置了格式字符串，则“日期格式”将用作后备。</span></div><div class="line">spring.jackson.joda-date-time-format= </div><div class="line"><span class="comment"># 用于格式化的区域设置。</span></div><div class="line">spring.jackson.locale= </div><div class="line"><span class="comment"># jackson通用开/关功能。</span></div><div class="line">spring.jackson.mapper.*= </div><div class="line"><span class="comment"># Jackson 解析器的开/关功能。</span></div><div class="line">spring.jackson.parser.*= </div><div class="line"><span class="comment"># Jackson的PropertyNamingStrategy的一个常量。 也可以是PropertyNamingStrategy子类的完全限定类名。</span></div><div class="line">spring.jackson.property-naming-strategy= </div><div class="line"><span class="comment"># Jones开/关功能，影响Java对象序列化的方式。</span></div><div class="line">spring.jackson.serialization.*= </div><div class="line"><span class="comment"># 控制在序列化期间包含属性。 配置了Jackson的JsonInclude.Include枚举中的一个值。</span></div><div class="line">spring.jackson.serialization-inclusion= </div><div class="line"><span class="comment"># 格式化日期时使用的时区。 例如`America / Los_Angeles`</span></div><div class="line">spring.jackson.time-zone= </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Jersey 配置</span></div><div class="line"><span class="comment"># 作为应用程序的基本URI的路径。 如果指定，则覆盖“@ApplicationPath”的值。</span></div><div class="line">spring.jersey.application-path= </div><div class="line"><span class="comment"># jersey过滤器链顺序。</span></div><div class="line">spring.jersey.filter.order= 0</div><div class="line"><span class="comment">#  init参数传递到Jersey通过servlet或过滤器。</span></div><div class="line">spring.jersey.init.*= </div><div class="line"><span class="comment"># jersey整合型。可以是“servlet”也可以是“filter”。</span></div><div class="line">spring.jersey.type= servlet</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># spring 视图分解器 配置</span></div><div class="line"><span class="comment"># 启用后退解析支持。</span></div><div class="line">spring.mobile.devicedelegatingviewresolver.enable-fallback= false</div><div class="line"><span class="comment"># 启用设备视图解析器。</span></div><div class="line">spring.mobile.devicedelegatingviewresolver.enabled= false</div><div class="line"><span class="comment"># 前缀，用于查看移动设备的名称。</span></div><div class="line">spring.mobile.devicedelegatingviewresolver.mobile-prefix= mobile/</div><div class="line"><span class="comment"># 后缀，附加到查看移动设备的名称。</span></div><div class="line">spring.mobile.devicedelegatingviewresolver.mobile-suffix= </div><div class="line"><span class="comment"># 前缀，用于查看普通设备的名称。</span></div><div class="line">spring.mobile.devicedelegatingviewresolver.normal-prefix= </div><div class="line"><span class="comment"># 后缀，附加到查看普通设备的名称。</span></div><div class="line">spring.mobile.devicedelegatingviewresolver.normal-suffix= </div><div class="line"><span class="comment"># 前缀，用于查看平板设备的名称。</span></div><div class="line">spring.mobile.devicedelegatingviewresolver.tablet-prefix= tablet/</div><div class="line"><span class="comment"># 后缀，附加到查看平板电脑设备的名称。</span></div><div class="line">spring.mobile.devicedelegatingviewresolver.tablet-suffix= </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 移动网站首选项 （站点首选项自动配置）</span></div><div class="line"><span class="comment"># 启用SitePreferenceHandler。</span></div><div class="line">spring.mobile.sitepreference.enabled= true</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># MUSTACHE模板（Mustache AutoConfiguration）</span></div><div class="line"><span class="comment"># 启用模板缓存。</span></div><div class="line">spring.mustache.cache= false</div><div class="line"><span class="comment"># 模板编码。</span></div><div class="line">spring.mustache.charset= UTF-8</div><div class="line"><span class="comment"># 检查模板位置是否存在。</span></div><div class="line">spring.mustache.check-template-location= true</div><div class="line"><span class="comment"># Content-Type值</span></div><div class="line">spring.mustache.content-type= text/html</div><div class="line"><span class="comment"># 启用此技术的MVC视图分辨率。</span></div><div class="line">spring.mustache.enabled= true</div><div class="line"><span class="comment"># 前缀应用于模板名称。</span></div><div class="line">spring.mustache.prefix= classpath:/templates/</div><div class="line"><span class="comment"># 后缀应用于模板名称。</span></div><div class="line">spring.mustache.suffix= .html</div><div class="line"><span class="comment"># 可以解决的视图名称的白名单。</span></div><div class="line">spring.mustache.view-names= </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># SPRING MVC (Web Mvc 配置)</span></div><div class="line"><span class="comment"># 异步请求处理超时之前的时间量（以毫秒为单位）。</span></div><div class="line">spring.mvc.async.request-timeout= </div><div class="line"><span class="comment"># 要使用的日期格式。 例如`dd / MM / yyyy`。</span></div><div class="line">spring.mvc.date-format= </div><div class="line"><span class="comment"># 发送TRACE请求到FrameworkServlet doService方法。</span></div><div class="line">spring.mvc.dispatch-trace-request= false</div><div class="line"><span class="comment"># 发送OPTIONS请求到FrameworkServlet doService方法。</span></div><div class="line">spring.mvc.dispatch-options-request= false</div><div class="line"><span class="comment"># 启用favicon.ico的解析。</span></div><div class="line">spring.mvc.favicon.enabled= true</div><div class="line"><span class="comment"># 如果在重定向方案期间应该忽略“默认”模型的内容。</span></div><div class="line">spring.mvc.ignore-default-model-on-redirect= true</div><div class="line"><span class="comment"># 要使用的区域设置。</span></div><div class="line">spring.mvc.locale= </div><div class="line"><span class="comment"># 将文件扩展名映射到内容协商的媒体类型。</span></div><div class="line">spring.mvc.media-types.*= </div><div class="line"><span class="comment"># 消息代码格式策略。 例如`PREFIX_ERROR_CODE`。</span></div><div class="line">spring.mvc.message-codes-resolver-format= </div><div class="line"><span class="comment"># 用于静态资源的路径模式。</span></div><div class="line">spring.mvc.static-path-pattern= /**</div><div class="line"><span class="comment"># 如果没有发现处理程序来处理请求，则应抛出“NoHandlerFoundException”。</span></div><div class="line">spring.mvc.throw-exception-if-no-handler-found= false</div><div class="line"><span class="comment"># Spring MVC视图前缀。</span></div><div class="line">spring.mvc.view.prefix= </div><div class="line"><span class="comment"># Spring MVC视图后缀。</span></div><div class="line">spring.mvc.view.suffix= </div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">#SPRING RESOURCES HANDLING（ResourceProperties）资源处理</span></div><div class="line">spring.resources.add-mappings = true #启用默认资源处理。</div><div class="line">spring.resources.cache-period = #由资源处理程序提供的资源的缓存期，以秒为单位。</div><div class="line">spring.resources.chain.cache = true #在资源链中启用缓存。</div><div class="line">spring.resources.chain.enabled = #启用Spring资源处理链。默认情况下禁用，除非启用了至少一个策略。</div><div class="line">spring.resources.chain.html-application-cache = false #启用HTML5应用程序缓存清单重写。</div><div class="line">spring.resources.chain.strategy.content.enabled = false #启用内容版本策略。</div><div class="line">spring.resources.chain.strategy.content.paths = / ** #应用于版本策略的模式的逗号分隔列表。</div><div class="line">spring.resources.chain.strategy.fixed.enabled = false #启用固定版本策略。</div><div class="line">spring.resources.chain.strategy.fixed.paths = #应用于版本策略的逗号分隔的模式列表。</div><div class="line">spring.resources.chain.strategy.fixed.version = #用于版本策略的版本字符串。</div><div class="line">spring.resources.static-locations = classpath：/ META-INF / resources /，classpath：/ resources /，classpath：/ static /，classpath：/ public / #静态资源的位置。</div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">#SPRING SOCIAL（SocialWebAutoConfiguration）集群</span></div><div class="line">spring.social.auto-connection-views = false #启用支持的提供程序的连接状态视图。</div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">#SPRING SOCIAL FACEBOOK（FacebookAutoConfiguration）</span></div><div class="line">spring.social.facebook.app-id = #您的应用程序的Facebook应用程序ID</div><div class="line">spring.social.facebook.app-secret = #你的应用程序的Facebook应用程序密码</div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">#SPRING SOCIAL LINKEDIN（LinkedInAutoConfiguration）</span></div><div class="line">spring.social.linkedin.app-id = #您的应用程序的LinkedIn应用程序ID</div><div class="line">spring.social.linkedin.app-secret = #您的应用程序的LinkedIn App Secret</div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">#SPRING SOCIAL TWITTER（TwitterAutoConfiguration）</span></div><div class="line">spring.social.twitter.app-id = #你的应用程序的Twitter应用程序ID</div><div class="line">spring.social.twitter.app-secret = #你的应用程序的Twitter App Secret</div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">#THYMELEAF Thymeleaf模板引擎配置</span></div><div class="line">spring.thymeleaf.cache = true #启用模板缓存。</div><div class="line">spring.thymeleaf.check-template-location = true #检查模板位置是否存在。</div><div class="line">spring.thymeleaf.content-type = text / html #Content-Type值。</div><div class="line">spring.thymeleaf.enabled = true #启用MVC Thymeleaf视图分辨率。</div><div class="line">spring.thymeleaf.encoding = UTF-8 #模板编码。</div><div class="line">spring.thymeleaf.excluded-view-names = #应该从解决方案中排除的视图名称的逗号分隔列表。</div><div class="line">spring.thymeleaf.mode = HTML5 #应用于模板的模板模式。另请参见StandardTemplateModeHandlers。</div><div class="line">spring.thymeleaf.prefix = classpath：/ templates / #在构建URL时预先查看名称的前缀。</div><div class="line">spring.thymeleaf.suffix = .html #构建URL时附加查看名称的后缀。</div><div class="line">spring.thymeleaf.template-resolver-order = #链中模板解析器的顺序。</div><div class="line">spring.thymeleaf.view-names = #可以解析的视图名称的逗号分隔列表。</div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">#VELOCITY TEMPLATES（VelocityAutoConfiguration）</span></div><div class="line">spring.velocity.allow-request-override = false #设置是否允许HttpServletRequest属性覆盖（隐藏）控制器生成的同名的模型属性。</div><div class="line">spring.velocity.allow-session-override = false #设置是否允许HttpSession属性重写（隐藏）控制器生成的同名的模型属性。</div><div class="line">spring.velocity.cache = #启用模板缓存。</div><div class="line">spring.velocity.charset = UTF-8 #模板编码。</div><div class="line">spring.velocity.check-template-location = true #检查模板位置是否存在。</div><div class="line">spring.velocity.content-type = text / html #Content-Type值。</div><div class="line">spring.velocity.date-tool-attribute = #在视图的Velocity上下文中公开的DateTool辅助对象的名称。</div><div class="line">spring.velocity.enabled = true #启用此技术的MVC视图分辨率。</div><div class="line">spring.velocity.expose-request-attributes = false #设置在与模板合并之前是否应将所有请求属性添加到模型中。</div><div class="line">spring.velocity.expose-session-attributes = false #设置在与模板合并之前是否应将所有HttpSession属性添加到模型中。</div><div class="line">spring.velocity.expose-spring-macro-helpers = true #设置是否公开一个RequestContext供Spring Spring的宏库使用，名称为“springMacroRequestContext”。</div><div class="line">spring.velocity.number-tool-attribute = #在视图的Velocity上下文中公开的NumberTool帮助对象的名称。</div><div class="line">spring.velocity.prefer-file-system-access = true #首选文件系统访问模板加载。文件系统访问可以对模板更改进行热检测。</div><div class="line">spring.velocity.prefix = #前缀，用于在构建URL时查看名称。</div><div class="line">spring.velocity.properties。* = #附加速度属性。</div><div class="line">spring.velocity.request-context-attribute = #所有视图的RequestContext属性的名称。</div><div class="line">spring.velocity.resource-loader-path = classpath：/ templates / #模板路径。</div><div class="line">spring.velocity.suffix = .vm #构建URL时附加到查看名称的后缀。</div><div class="line">spring.velocity.toolbox-config-location = #Velocity Toolbox配置位置。例如`/ WEB-INF / toolbox.xml'</div><div class="line">spring.velocity.view-names = #可以解决的视图名称的白名单。</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">#----------------------------------------</span></div><div class="line"> <span class="comment">#安全属性</span></div><div class="line"> <span class="comment">#----------------------------------------</span></div><div class="line"> <span class="comment">#SECURITY（SecurityProperties）</span></div><div class="line">security.basic.authorize-mode = role #应用安全授权模式。</div><div class="line">security.basic.enabled = true #启用基本身份验证。</div><div class="line">security.basic.path = / ** #安全路径的逗号分隔列表。</div><div class="line">security.basic.realm = Spring #HTTP基本的领域名称。</div><div class="line">security.enable-csrf = false #启用跨站点请求伪造支持。</div><div class="line">security.filter-order = 0 #安全过滤器连锁订单。</div><div class="line">security.headers.cache = true #启用缓存控制HTTP头。</div><div class="line">security.headers.content-type = true# 启用“X-Content-Type-Options”头。</div><div class="line">security.headers.frame = true #启用“X-Frame-Options”标题。</div><div class="line">security.headers.hsts = # HTTP严格传输安全（HSTS）模式（无，域，全部）。</div><div class="line">security.headers.xss = true #启用跨站点脚本（XSS）保护。</div><div class="line">security.ignored = #从默认安全路径中排除的路径的逗号分隔列表。</div><div class="line">security.require-ssl = false #为所有请求启用安全通道。</div><div class="line">security.sessions = stateless #会话创建策略（永远不会，if_required，无状态）。</div><div class="line">security.user.name = user #默认用户名。</div><div class="line">security.user.password = #默认用户名的密码。默认情况下，启动时会记录随机密码。</div><div class="line">security.user.role = USER #为默认用户名授予角色。</div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">#SECURITY OAUTH2 CLIENT（OAuth2ClientProperties</span></div><div class="line">security.oauth2.client.client-id = #OAuth2客户端ID。</div><div class="line">security.oauth2.client.client-secret = #OAuth2客户机密码。默认生成随机密码</div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">#SECURITY OAUTH2 RESOURCES（ResourceServerProperties</span></div><div class="line">security.oauth2.resource.id = #资源的标识符。</div><div class="line">security.oauth2.resource.jwt.key-uri = #JWT令牌的URI。如果值不可用并且密钥是公共的，可以设置。</div><div class="line">security.oauth2.resource.jwt.key-value = #JWT令牌的验证密钥。可以是对称秘密或PEM编码的RSA公钥。</div><div class="line">security.oauth2.resource.prefer-token-info = true #使用令牌信息，可以设置为false以使用用户信息。</div><div class="line">security.oauth2.resource.service-id = resource #</div><div class="line">security.oauth2.resource.token-info-uri = #令牌解码端点的URI。</div><div class="line">security.oauth2.resource.token-type = #使用userInfoUri时发送的令牌类型。</div><div class="line">security.oauth2.resource.user-info-uri = #用户端点的URI。</div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">#SECURITY OAUTH2 SSO（OAuth2SsoProperties</span></div><div class="line">security.oauth2.sso.filter-order = #如果不提供显式的WebSecurityConfigurerAdapter，则应用过滤器顺序</div><div class="line">security.oauth2.sso.login-path = / login #登录页面的路径，即触发重定向到OAuth2授权服务器的路径</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"><span class="comment"># DATA PROPERTIES 数据性能</span></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># FLYWAY (FlywayProperties)</span></div><div class="line">flyway.baseline-description = #</div><div class="line">flyway.baseline-version = 1 #版本开始迁移</div><div class="line">flyway.baseline-on-migrate = #</div><div class="line">flyway.check-location = false #检查迁移脚本位置是否存在。</div><div class="line">flyway.clean-on-validation-error = #</div><div class="line">flyway.enabled = true #启用飞行路线。</div><div class="line">flyway.encoding = #</div><div class="line">flyway.ignore-failed-future-migration = #</div><div class="line">flyway.init-sqls = #执行SQL语句，以便在获取连接后立即初始化连接。</div><div class="line">flyway.locations = classpath：db / migration #迁移脚本的位置</div><div class="line">flyway.out-of-order = #如果您希望Flyway创建自己的DataSource，则需要使用#path密码</div><div class="line">flyway.placeholder-prefix = #</div><div class="line">flyway.placeholder-replacement = #</div><div class="line">flyway.placeholder-suffix = #</div><div class="line">flyway.placeholders。* = #</div><div class="line">flyway.schemas = #schemas来更新</div><div class="line">flyway.sql-migration-prefix = V #</div><div class="line">flyway.sql-migration-separator = #</div><div class="line">flyway.sql-migration-suffix = .sql #</div><div class="line">flyway.table = #</div><div class="line">flyway.url = #要迁移的数据库的JDBC url。如果未设置，则使用主配置的数据源。</div><div class="line">flyway.user = #登录要迁移的数据库的用户。</div><div class="line">flyway.validate-on-migrate = #</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># LIQUIBASE (LiquibaseProperties)</span></div><div class="line">liquibase.change-log = classpath：/db/changelog/db.changelog-master.yaml #更改日志配置路径。</div><div class="line">liquibase.check-change-log-location = true #检查更改日志位置是否存在。</div><div class="line">liquibase.contexts = #使用逗号分隔的运行时上下文列表。</div><div class="line">liquibase.default-schema = #默认数据库模式。</div><div class="line">liquibase.drop-first = false #首先删除数据库模式。</div><div class="line">liquibase.enabled = true #启用liquidibase支持。</div><div class="line">liquibase.labels = #使用逗号分隔的运行时标签列表。</div><div class="line">liquibase.parameters。* = #更改日志参数。</div><div class="line">liquibase.password = #登录要迁移的数据库的密码。</div><div class="line">liquibase.url = #要迁移的数据库的JDBC url。 如果未设置，则使用主配置的数据源。</div><div class="line">liquibase.user = #登录要迁移的数据库的用户。</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># DAO (PersistenceExceptionTranslationAutoConfiguration)</span></div><div class="line">spring.dao.exceptiontranslation.enabled= true # 启用持久异常翻译后处理器。</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># CASSANDRA (CassandraProperties)</span></div><div class="line">spring.data.cassandra.cluster-name = #Cassandra群集的名称。</div><div class="line">spring.data.cassandra.compression = #由Cassandra二进制协议支持的压缩。</div><div class="line">spring.data.cassandra.connect-timeout-millis = #套接字选项：连接超时。</div><div class="line">spring.data.cassandra.consistency-level = #查询一致性级别。</div><div class="line">spring.data.cassandra.contact-points = localhost #集群节点地址的逗号分隔列表。</div><div class="line">spring.data.cassandra.fetch-size = #查询默认的抓取大小。</div><div class="line">spring.data.cassandra.keyspace-name = #要使用的密钥空间名称。</div><div class="line">spring.data.cassandra.load-balancing-policy = #负载均衡策略的类名。</div><div class="line">spring.data.cassandra.port = #Cassandra服务器端口。</div><div class="line">spring.data.cassandra.password = #登录服务器的密码。</div><div class="line">spring.data.cassandra.read-timeout-millis = #套接字选项：读取超时。</div><div class="line">spring.data.cassandra.reconnection-policy = #重新连接策略类。</div><div class="line">spring.data.cassandra.retry-policy = #重试策略的类名。</div><div class="line">spring.data.cassandra.serial-consistency-level = #查询串行一致性级别。</div><div class="line">spring.data.cassandra.ssl = false #启用SSL支持。</div><div class="line">spring.data.cassandra.username = #登录用户的服务器。</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ELASTICSEARCH (ElasticsearchProperties)</span></div><div class="line">spring.data.elasticsearch.cluster-name = elasticsearch #弹性搜索集群名称。</div><div class="line">spring.data.elasticsearch.cluster-nodes = #集群节点地址的逗号分隔列表。 如果未指定，则启动客户端节点。</div><div class="line">spring.data.elasticsearch.properties。* = #用于配置客户端的其他属性。</div><div class="line">spring.data.elasticsearch.repositories.enabled = true #启用Elasticsearch存储库。</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># MONGODB (MongoProperties)</span></div><div class="line">spring.data.mongodb.authentication-database = #验证数据库名称。</div><div class="line">spring.data.mongodb.database = test #数据库名称。</div><div class="line">spring.data.mongodb.field-naming-strategy = #要使用的FieldNamingStrategy的完全限定名称。</div><div class="line">spring.data.mongodb.grid-fs-database = #GridFS数据库名称。</div><div class="line">spring.data.mongodb.host = localhost #Mongo服务器主机。</div><div class="line">spring.data.mongodb.password = #登录mongo服务器的密码。</div><div class="line">spring.data.mongodb.port = 27017 #Mongo服务器端口。</div><div class="line">spring.data.mongodb.repositories.enabled = true #启用Mongo存储库。</div><div class="line">spring.data.mongodb.uri = mongodb：// localhost / test #Mongo数据库URI。 设置时，主机和端口将被忽略。</div><div class="line">spring.data.mongodb.username = #登录mongo服务器的用户。</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># DATA REST (RepositoryRestProperties)</span></div><div class="line">spring.data.rest.base-path = #由Spring Data REST用于公开存储库资源的基本路径。</div><div class="line">spring.data.rest.default-page-size = #页面的默认大小。</div><div class="line">spring.data.rest.enable-enum-translation = #通过Spring Data REST默认资源包启用枚举值转换。</div><div class="line">spring.data.rest.limit-param-name = #指示一次返回多少结果的URL查询字符串参数的名称。</div><div class="line">spring.data.rest.max-page-size = #最大页面大小。</div><div class="line">spring.data.rest.page-param-name = #指示要返回的页面的URL查询字符串参数的名称。</div><div class="line">spring.data.rest.return-body-on-create = #创建一个实体后返回响应体。</div><div class="line">spring.data.rest.return-body-on-update = #更新实体后返回响应体。</div><div class="line">spring.data.rest.sort-param-name = #指示排序结果的方向的URL查询字符串参数的名称。</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># SOLR (SolrProperties)</span></div><div class="line">spring.data.solr.host = http://127.0.0.1:8983/solr #Solr主机。 如果设置了“zk-host”，则被忽略。</div><div class="line">spring.data.solr.repositories.enabled = true #启用Solr存储库。</div><div class="line">spring.data.solr.zk-host = #ZooKeeper主机地址，格式为HOST：PORT。</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 数据源 配置 (DataSourceAutoConfiguration &amp; DataSourceProperties)</span></div><div class="line">spring.datasource.continue-on-error = false #初始化数据库时发生错误时不要停止。</div><div class="line">spring.datasource.data = #Data（DML）脚本资源引用。</div><div class="line">spring.datasource.driver-class-name = #JDBC驱动程序的完全限定名称。默认情况下，根据URL自动检测。</div><div class="line">spring.datasource.initialize = true #使用'data.sql'填充数据库。</div><div class="line">spring.datasource.jmx-enabled = false #启用JMX支持（如果由底层池提供）。</div><div class="line">spring.datasource.jndi-name = #数据源的JNDI位置。设置时，类，网址，用户名和密码将被忽略。</div><div class="line">spring.datasource.max-active = #例如100</div><div class="line">spring.datasource.max-idle = #例如8</div><div class="line">spring.datasource.max等待=</div><div class="line">spring.datasource.min-evictable空闲时间-米利斯=</div><div class="line">spring.datasource.min-idle = 8</div><div class="line">spring.datasource.name = testdb #数据源的名称。</div><div class="line">spring.datasource.password = #登录数据库的密码。</div><div class="line">spring.datasource.platform = all #在资源模式（schema - $ &#123;platform&#125; .sql）中使用的平台。</div><div class="line">spring.datasource.schema = #Schema（DDL）脚本资源引用。</div><div class="line">spring.datasource.separator =;  #语句分隔符在SQL初始化脚本中。</div><div class="line">spring.datasource.sql-script-encoding = #SQL脚本编码。</div><div class="line">spring.datasource.test-on-borrow = #例如`false`</div><div class="line">spring.datasource.test-on-return = #例如`false`</div><div class="line">spring.datasource.test-while-idle = #</div><div class="line">spring.datasource.time-between-eviction-runs-millis = 1</div><div class="line">spring.datasource.type = #要使用的连接池实现的完全限定名称。默认情况下，它是从类路径自动检测的。</div><div class="line">spring.datasource.url = #数据库的JDBC url。</div><div class="line">spring.datasource.username= </div><div class="line">spring.datasource.validation-query= </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># H2 Web Console (H2ConsoleProperties)  </span></div><div class="line">spring.h2.console.enabled = false #启用控制台。</div><div class="line">spring.h2.console.path = / h2-console #控制台可用的路径。</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># JOOQ (JooqAutoConfiguration)</span></div><div class="line">spring.jooq.sql-dialect=  # 与配置的数据源通信时使用的SQLDialect JOOQ。 例如`POSTGRES`</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)</span></div><div class="line">spring.data.jpa.repositories.enabled = true #启用JPA存储库。</div><div class="line">spring.jpa.database = #目标数据库进行操作，默认情况下自动检测。可以使用“databasePlatform”属性设置。</div><div class="line">spring.jpa.database-platform = #要运行的目标数据库的名称，默认情况下自动检测。可以使用“数据库”枚举来设置。</div><div class="line">spring.jpa.generate-ddl = false #启动时初始化模式。</div><div class="line">spring.jpa.hibernate.ddl-auto = #DDL模式。这实际上是“hibernate.hbm2ddl.auto”属性的快捷方式。使用嵌入式数据库时默认为“创建删除”，否则为“否”。</div><div class="line">spring.jpa.hibernate.naming-strategy = #命名策略完全限定名。</div><div class="line">spring.jpa.open-in-view = true #注册OpenEntityManagerInViewInterceptor。将JPA EntityManager绑定到线程以进行请求的整个处理。</div><div class="line">spring.jpa.properties。* = #在JPA提供程序上设置的其他本机属性。</div><div class="line">spring.jpa.show-sql = false #启用SQL语句的日志记录。</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># JTA (JtaAutoConfiguration)</span></div><div class="line">spring.jta。* = #技术特定配置</div><div class="line">spring.jta.log-dir = #Transaction logs目录。</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ATOMIKOS</span></div><div class="line">spring.jta.atomikos.connectionfactory.borrow-connection-timeout = 30 #从池中借用连接的超时（以秒为单位）。</div><div class="line">spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag = true #创建会话时是否忽略事务标志。</div><div class="line">spring.jta.atomikos.connectionfactory.local-transaction-mode = false #是否需要本地事务。</div><div class="line">spring.jta.atomikos.connectionfactory.maintenance-interval = 60 #池的维护线程运行之间的时间（以秒为单位）。</div><div class="line">spring.jta.atomikos.connectionfactory.max-idle-time = 60 #从池中清除连接之后的时间（以秒为单位）。</div><div class="line">spring.jta.atomikos.connectionfactory.max-lifetime = 0 #在被破坏之前可以将连接合并的时间（以秒为单位）。 0表示无限制。</div><div class="line">spring.jta.atomikos.connectionfactory.max-pool-size = 1 #池的最大大小。</div><div class="line">spring.jta.atomikos.connectionfactory.min-pool-size = 1 #池的最小大小。</div><div class="line">spring.jta.atomikos.connectionfactory.reap-timeout = 0 #借用连接的收获超时（以秒为单位）。 0表示无限制。</div><div class="line">spring.jta.atomikos.connectionfactory.unique-resource-name = jmsConnectionFactory #用于在恢复期间标识资源的唯一名称。</div><div class="line">spring.jta.atomikos.datasource.borrow-connection-timeout = 30 #从池中借出连接的超时（秒）。</div><div class="line">spring.jta.atomikos.datasource.default-isolation-level = #池提供的连接的默认隔离级别。</div><div class="line">spring.jta.atomikos.datasource.login-timeout = #用于建立数据库连接的超时（以秒为单位）。</div><div class="line">spring.jta.atomikos.datasource.maintenance-interval = 60 #池的维护线程运行之间的时间（以秒为单位）。</div><div class="line">spring.jta.atomikos.datasource.max-idle-time = 60 #从池中清除连接之后的时间（以秒为单位）。</div><div class="line">spring.jta.atomikos.datasource.max-lifetime = 0 #在被破坏之前可以将连接合并的时间（以秒为单位）。 0表示无限制。</div><div class="line">spring.jta.atomikos.datasource.max-pool-size = 1 #池的最大大小。</div><div class="line">spring.jta.atomikos.datasource.min-pool-size = 1 #池的最小大小。</div><div class="line">spring.jta.atomikos.datasource.reap-timeout = 0 #借用连接的收获超时（以秒为单位）。 0表示无限制。</div><div class="line">spring.jta.atomikos.datasource.test-query = #用于在返回连接之前验证连接的SQL查询或语句。</div><div class="line">spring.jta.atomikos.datasource.unique-resource-name = dataSource #用于在恢复期间识别资源的唯一名称。</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># BITRONIX</span></div><div class="line">spring.jta.bitronix.connectionfactory.acquire-increment = 1 #生成池时要创建的连接数。</div><div class="line">spring.jta.bitronix.connectionfactory.acquisition-interval = 1 #在获取无效连接后再次尝试获取连接之前等待的时间（以秒为单位）。</div><div class="line">spring.jta.bitronix.connectionfactory.acquisition-timeout = 30 #从池中获取连接的超时（以秒为单位）。</div><div class="line">spring.jta.bitronix.connectionfactory.allow-local-transactions = true #事务管理器是否允许混合XA和非XA事务。</div><div class="line">spring.jta.bitronix.connectionfactory.apply-transaction-timeout = false #当XAResource被登记时，是否应该设置事务超时。</div><div class="line">spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled = true #资源是否应该被自动登记和删除。</div><div class="line">spring.jta.bitronix.connectionfactory.cache-producer-consumer = true #是否生产和消费者应该被缓存。</div><div class="line">spring.jta.bitronix.connectionfactory.defer-connection-release = true #提供程序是否可以在同一连接上运行许多事务，并支持事务交织。</div><div class="line">spring.jta.bitronix.connectionfactory.ignore-recovery-failures = false #是否应忽略恢复失败。</div><div class="line">spring.jta.bitronix.connectionfactory.max-idle-time = 60 #从池中清除连接之后的时间（以秒为单位）。</div><div class="line">spring.jta.bitronix.connectionfactory.max-pool-size = 10 #池的最大大小。 0表示无限制。</div><div class="line">spring.jta.bitronix.connectionfactory.min-pool-size = 0 #池的最小大小。</div><div class="line">spring.jta.bitronix.connectionfactory.password = #用于连接到JMS提供程序的密码。</div><div class="line">spring.jta.bitronix.connectionfactory.share-transaction-connections = false #ACCESSIBLE状态中的连接是否可以在事务的上下文中共享。</div><div class="line">spring.jta.bitronix.connectionfactory.test-connections = true #从池中获取连接是否应该进行测试。</div><div class="line">spring.jta.bitronix.connectionfactory.two-pc-ordering-position = 1 #在两阶段提交期间该资源应该采取的位置（始终为Integer.MIN_VALUE，始终为Integer.MAX_VALUE）。</div><div class="line">spring.jta.bitronix.connectionfactory.unique-name = jmsConnectionFactory #用于在恢复期间标识资源的唯一名称。</div><div class="line">spring.jta.bitronix.connectionfactory.use-tm-join = true启动XAResource时是否应使用TMJOIN。</div><div class="line">spring.jta.bitronix.connectionfactory.user = #用于连接到JMS提供者的用户。</div><div class="line">spring.jta.bitronix.datasource.acquire-increment = 1 #生成池时要创建的连接数。</div><div class="line">spring.jta.bitronix.datasource.acquisition-interval = 1 #在获取无效连接后再尝试获取连接之前等待的时间（以秒为单位）。</div><div class="line">spring.jta.bitronix.datasource.acquisition-timeout = 30 #从池中获取连接的超时（以秒为单位）。</div><div class="line">spring.jta.bitronix.datasource.allow-local-transactions = true #事务管理器是否允许混合XA和非XA事务。</div><div class="line">spring.jta.bitronix.datasource.apply-transaction-timeout = false #当XAResource被登记时，是否应该设置事务超时。</div><div class="line">spring.jta.bitronix.datasource.automatic-enlisting-enabled = true #资源是否应该被登记和自动删除。</div><div class="line">spring.jta.bitronix.datasource.cursor-holdability = #连接的默认游标保持性。</div><div class="line">spring.jta.bitronix.datasource.defer-connection-release = true #数据库是否可以在同一连接上运行许多事务，并支持事务交织。</div><div class="line">spring.jta.bitronix.datasource.enable-jdbc4-connection-test = #从池中获取连接时是否调用Connection.isValid（）。</div><div class="line">spring.jta.bitronix.datasource.ignore-recovery-failures = false #是否应忽略恢复失败。</div><div class="line">spring.jta.bitronix.datasource.isolation-level = #连接的默认隔离级别。</div><div class="line">spring.jta.bitronix.datasource.local-auto-commit = #本地事务的默认自动提交模式。</div><div class="line">spring.jta.bitronix.datasource.login-timeout = #用于建立数据库连接的超时（以秒为单位）。</div><div class="line">spring.jta.bitronix.datasource.max-idle-time = 60 #从池中清除连接之后的时间（以秒为单位）。</div><div class="line">spring.jta.bitronix.datasource.max-pool-size = 10 #池的最大大小。 0表示无限制。</div><div class="line">spring.jta.bitronix.datasource.min-pool-size = 0 #池的最小大小。</div><div class="line">spring.jta.bitronix.datasource.prepared-statement-cache-size = 0 #准备好的语句高速缓存的目标大小。 0禁用缓存。</div><div class="line">spring.jta.bitronix.datasource.share-transaction-connections = false #ACCESSIBLE状态下的连接是否可以在事务的上下文中共享。</div><div class="line">spring.jta.bitronix.datasource.test-query = #用于在返回连接之前验证连接的SQL查询或语句。</div><div class="line">spring.jta.bitronix.datasource.two-pc-ordering-position = 1 #在两阶段提交期间该资源应该采取的位置（始终为Integer.MIN_VALUE，始终为Integer.MAX_VALUE）。</div><div class="line">spring.jta.bitronix.datasource.unique-name = dataSource #用于在恢复期间标识资源的唯一名称。</div><div class="line">spring.jta.bitronix.datasource.use-tm-join = true启动XAResource时是否应使用TMJOIN。</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># EMBEDDED MONGODB (EmbeddedMongoProperties)</span></div><div class="line">spring.mongodb.embedded.features = SYNC_DELAY #启用功能的逗号分隔列表。</div><div class="line">spring.mongodb.embedded.version = 2.6.10 #Mongo使用版本。</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"><span class="comment"># 整合属性</span></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"></div><div class="line"> <span class="comment">#ACTIVEMQ（ActiveMQProperties）</span></div><div class="line">spring.activemq.broker-url = #ActiveMQ代理的URL。 默认自动生成。 例如`tcp：// localhost：61616`</div><div class="line">spring.activemq.in-memory = true #指定默认代理URL是否应在内存中。 如果指定了一个显式代理，则被忽略。</div><div class="line">spring.activemq.password = #登录密码的代理。</div><div class="line">spring.activemq.pooled = false #指定是否创建PooledConnectionFactory而不是常规的ConnectionFactory。</div><div class="line">spring.activemq.user = #代理登录用户。</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ARTEMIS (ArtemisProperties)</span></div><div class="line">spring.artemis.embedded.cluster-password = #群集密码。 默认情况下随机生成。</div><div class="line">spring.artemis.embedded.data-directory = #日志文件目录。 如果持久性被关闭，则不需要。</div><div class="line">spring.artemis.embedded.enabled = true #如果Artemis服务器API可用，启用嵌入式模式。</div><div class="line">spring.artemis.embedded.persistent = false #启用持久存储。</div><div class="line">spring.artemis.embedded.queues = #启动时要创建的队列的逗号分隔列表。</div><div class="line">spring.artemis.embedded.server-id = #服务器ID。 默认情况下，使用自动递增的计数器。</div><div class="line">spring.artemis.embedded.topics = #启动时要创建的主题的逗号分隔列表。</div><div class="line">spring.artemis.host = localhost #Artemis代理主机。</div><div class="line">spring.artemis.mode = #Artemis部署模式，默认情况下自动检测。 可以显式设置为“native”或“embedded”。</div><div class="line">spring.artemis.port = 61616 #Artemis 中间件端口。</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># SPRING BATCH(Batch 配置)</span></div><div class="line">spring.batch.initializer.enabled = true #如果需要，在启动时创建所需的批处理表。</div><div class="line">spring.batch.job.enabled = true #在启动时执行上下文中的所有Spring批处理作业。</div><div class="line">spring.batch.job.names = #在启动时执行的作业名称的逗号分隔列表（例如`job1，job2`）。 默认情况下，执行在上下文中找到的所有作业。</div><div class="line">spring.batch.schema = classpath：org / springframework / batch / core / schema - @@ platform @@。sql #用于初始化数据库模式的SQL文件的路径。</div><div class="line">spring.batch.table-prefix = #所有批次元数据表的表前缀。</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># HORNETQ (HornetQ 配置)</span></div><div class="line">spring.hornetq.embedded.cluster-password = #集群密码。 默认情况下随机生成。</div><div class="line">spring.hornetq.embedded.data-directory = #日志文件目录。 如果持久性被关闭，则不需要。</div><div class="line">spring.hornetq.embedded.enabled = true #如果HornetQ服务器API可用，启用嵌入式模式。</div><div class="line">spring.hornetq.embedded.persistent = false #启用持久存储。</div><div class="line">spring.hornetq.embedded.queues = #启动时要创建的队列的逗号分隔列表。</div><div class="line">spring.hornetq.embedded.server-id = #服务器ID。 默认情况下，使用自动递增的计数器。</div><div class="line">spring.hornetq.embedded.topics = #在启动时创建的主题的逗号分隔列表。</div><div class="line">spring.hornetq.host = localhost #HornetQ代理主机。</div><div class="line">spring.hornetq.mode = #HornetQ部署模式，默认情况下自动检测。 可以显式设置为“native”或“embedded”。</div><div class="line">spring.hornetq.port = 5445 #HornetQ代理端口。</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># JMS (Jms 配置)</span></div><div class="line"><span class="comment"># 连接工厂JNDI名称。 设置时，优先于其他连接工厂自动配置。</span></div><div class="line">spring.jms.jndi-name= </div><div class="line"><span class="comment"># 容器的确认模式。 默认情况下，监听器被自动确认处理。</span></div><div class="line">spring.jms.listener.acknowledge-mode= </div><div class="line"><span class="comment"># 启动时自动启动容器。</span></div><div class="line">spring.jms.listener.auto-startup= true</div><div class="line"><span class="comment"># 最小并发消费者数。</span></div><div class="line">spring.jms.listener.concurrency= </div><div class="line"><span class="comment"># 最大并发消费者数。</span></div><div class="line">spring.jms.listener.max-concurrency= </div><div class="line"><span class="comment"># 指定默认的目的地类型是否为主题。</span></div><div class="line">spring.jms.pub-sub-domain= false</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># RABBIT (Rabbit 配置)</span></div><div class="line"><span class="comment"># 客户端应连接到的逗号分隔的地址列表。</span></div><div class="line">spring.rabbitmq.addresses = </div><div class="line">spring.rabbitmq.dynamic =  true # 创建一个AmqpAdmin bean。</div><div class="line">spring.rabbitmq.host =  localhost# RabbitMQ主机。</div><div class="line">spring.rabbitmq.listener.acknowledge-mode = # 容器的确认模式。</div><div class="line">spring.rabbitmq.listener.auto-startup =  true# 启动时自动启动容器。</div><div class="line">spring.rabbitmq.listener.concurrency = # 最少消费者数。</div><div class="line">spring.rabbitmq.listener.max-concurrency = # 最大消费者数。</div><div class="line">spring.rabbitmq.listener.prefetch = # 在单个请求中要处理的消息数。它应该大于或等于事务大小（如果使用）。</div><div class="line">spring.rabbitmq.listener.transaction-size = # 在事务中要处理的消息数。为了获得最佳结果，它应该小于或等于预取计数。</div><div class="line">spring.rabbitmq.password = # 登录以对代理进行身份验证。</div><div class="line">spring.rabbitmq.port =  5672# RabbitMQ端口。</div><div class="line">spring.rabbitmq.requested-heartbeat = # 请求的心跳超时，以秒为单位;零为无。</div><div class="line">spring.rabbitmq.ssl.enabled =  false# 启用SSL支持。</div><div class="line">spring.rabbitmq.ssl.key-store =  # 保存SSL证书的密钥存储区的路径。</div><div class="line">spring.rabbitmq.ssl.key-store-password = # 用于访问密钥库的密码。</div><div class="line">spring.rabbitmq.ssl.trust-store = # 保存SSL证书的Trust存储。</div><div class="line">spring.rabbitmq.ssl.trust-store-password = # 用于访问信任存储的密码。</div><div class="line">spring.rabbitmq.username = # 登录用户对代理进行身份验证。</div><div class="line">spring.rabbitmq.virtual-host = # 连接到代理时使用的虚拟主机。</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 端点配置（EndpointCorsProperties）</span></div><div class="line"><span class="comment"># 设置是否支持凭据。 未设置时，不支持凭据。</span></div><div class="line">endpoints.cors.allow-credentials= </div><div class="line"><span class="comment"># 在请求中允许的头文件逗号分隔列表。 '*'允许所有标题。</span></div><div class="line">endpoints.cors.allowed-headers= </div><div class="line"><span class="comment"># 逗号分隔的允许的方法列表。 '*'允许所有方法。</span></div><div class="line">endpoints.cors.allowed-methods= GET</div><div class="line"><span class="comment"># 逗号分隔的起始列表允许。 '*'允许所有来源。 未设置时，禁用CORS支持。</span></div><div class="line">endpoints.cors.allowed-origins= </div><div class="line"><span class="comment"># 包含在响应中的标题的逗号分隔列表。</span></div><div class="line">endpoints.cors.exposed-headers= </div><div class="line"><span class="comment"># 客户端可以缓存飞行前请求的响应时间（秒）。</span></div><div class="line">endpoints.cors.max-age= 1800</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># JMX ENDPOINT (EndpointMBeanExportProperties) （端点MBean导出属性）</span></div><div class="line"><span class="comment"># JMX域名。 如果设置为'spring.jmx.default-domain'的值初始化。</span></div><div class="line">endpoints.jmx.domain= </div><div class="line"><span class="comment"># 启用所有端点的JMX导出。</span></div><div class="line">endpoints.jmx.enabled= true</div><div class="line"><span class="comment"># 附加静态属性以附加到表示端点的MBean的所有对象名称。</span></div><div class="line">endpoints.jmx.static-names= </div><div class="line"><span class="comment"># 确保在发生冲突时修改ObjectNames。</span></div><div class="line">endpoints.jmx.unique-names= false</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># JOLOKIA  JOLOKIA 配置</span></div><div class="line"><span class="comment"># 见Jolokia手册</span></div><div class="line">jolokia.config.*= </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 管理HTTP服务器（管理服务器属性）</span></div><div class="line"><span class="comment"># 在每个响应中添加“X-Application-Context”HTTP头。</span></div><div class="line">management.add-application-context-header= true</div><div class="line"><span class="comment"># 管理端点应绑定到的网络地址。</span></div><div class="line">management.address= </div><div class="line"><span class="comment"># 管理端点上下文路径。 例如`/ actuator`</span></div><div class="line">management.context-path= </div><div class="line"><span class="comment"># 管理端点HTTP端口。 默认使用与应用程序相同的端口。</span></div><div class="line">management.port= </div><div class="line"><span class="comment"># 启用安全性</span></div><div class="line">management.security.enabled= true</div><div class="line"><span class="comment"># 访问管理端点所需的角色。</span></div><div class="line">management.security.role= ADMIN</div><div class="line"><span class="comment"># 会话创建策略使用（always，never，if_required，stateless）（总是，永远，if_required，无状态）。</span></div><div class="line">management.security.sessions= stateless</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># HEALTH INDICATORS (previously health.*)</span></div><div class="line"><span class="comment"># 启用数据库运行状况检查</span></div><div class="line">management.health.db.enabled= true</div><div class="line"><span class="comment"># 启用默认的健康指标。</span></div><div class="line">management.health.defaults.enabled= true</div><div class="line"><span class="comment"># 启用磁盘空间运行状况检查。</span></div><div class="line">management.health.diskspace.enabled= true</div><div class="line"><span class="comment"># 用于计算可用磁盘空间的路径。</span></div><div class="line">management.health.diskspace.path= </div><div class="line"><span class="comment"># 应该可用的最小磁盘空间（以字节为单位）。</span></div><div class="line">management.health.diskspace.threshold= 0</div><div class="line"><span class="comment"># 启用弹性搜索健康检查。</span></div><div class="line">management.health.elasticsearch.enabled= true</div><div class="line"><span class="comment"># 逗号分隔的索引名称。</span></div><div class="line">management.health.elasticsearch.indices= </div><div class="line"><span class="comment"># 等待群集响应的时间（以毫秒为单位）。</span></div><div class="line">management.health.elasticsearch.response-timeout= 100</div><div class="line"><span class="comment"># 启用JMS健康检查。</span></div><div class="line">management.health.jms.enabled= true</div><div class="line"><span class="comment"># 启用邮件运行状况检查。</span></div><div class="line">management.health.mail.enabled= true</div><div class="line"><span class="comment"># 启用MongoDB健康检查。</span></div><div class="line">management.health.mongo.enabled= true</div><div class="line"><span class="comment"># 启用RabbitMQ运行状况检查。</span></div><div class="line">management.health.rabbit.enabled= true</div><div class="line"><span class="comment"># 启用Redis健康检查。</span></div><div class="line">management.health.redis.enabled= true</div><div class="line"><span class="comment"># 启用Solr运行状况检查。</span></div><div class="line">management.health.solr.enabled= true</div><div class="line"><span class="comment"># 按照严重性的顺序，以逗号分隔的健康状态列表。</span></div><div class="line">management.health.status.order= DOWN, OUT_OF_SERVICE, UNKNOWN, UP</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># TRACING ((TraceProperties) 跟踪性能</span></div><div class="line"><span class="comment"># 跟踪中包含的项目。</span></div><div class="line">management.trace.include= request-headers,response-headers,errors</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 远程 shell配置</span></div><div class="line"><span class="comment"># 验证类型。 根据环境自动检测。</span></div><div class="line">shell.auth= simple</div><div class="line"><span class="comment"># JAAS域。</span></div><div class="line">shell.auth.jaas.domain= my-domain</div><div class="line"><span class="comment"># 验证密钥的路径。 这应该指向一个有效的“.pem”文件。</span></div><div class="line">shell.auth.key.path= </div><div class="line"><span class="comment"># 登录用户。</span></div><div class="line">shell.auth.simple.user.name= user</div><div class="line"><span class="comment"># 登录用户的密码。</span></div><div class="line">shell.auth.simple.user.password= </div><div class="line"><span class="comment"># 登录到CRaSH控制台的所需的角色，以逗号分隔列表。</span></div><div class="line">shell.auth.spring.roles= ADMIN</div><div class="line"><span class="comment"># 用于查找命令的模式。</span></div><div class="line">shell.command-path-patterns= classpath*:/commands/**,classpath*:/crash/commands/**</div><div class="line"><span class="comment"># 扫描更改并在必要时更新命令（以秒为单位）。</span></div><div class="line">shell.command-refresh-interval= -1</div><div class="line"><span class="comment"># 用于查找配置的模式。</span></div><div class="line">shell.config-path-patterns= classpath*:/crash/*</div><div class="line"><span class="comment"># 逗号分隔的要禁用的命令列表。</span></div><div class="line">shell.disabled-commands= jpa*,jdbc*,jndi*</div><div class="line"><span class="comment"># 禁用逗号分隔的插件列表。 默认情况下，根据环境禁用某些插件。</span></div><div class="line">shell.disabled-plugins= </div><div class="line"><span class="comment"># 用户被提示再次登录后的毫秒数。</span></div><div class="line">shell.ssh.auth-timeout = </div><div class="line"><span class="comment"># 启用CRaSH SSH支持。</span></div><div class="line">shell.ssh.enabled= true</div><div class="line"><span class="comment"># 未使用的连接关闭之后的毫秒数。</span></div><div class="line">shell.ssh.idle-timeout = </div><div class="line"><span class="comment"># SSH服务器密钥路径。</span></div><div class="line">shell.ssh.key-path= </div><div class="line"><span class="comment"># SSH端口。</span></div><div class="line">shell.ssh.port= 2000</div><div class="line"><span class="comment"># 启用CRaSH telnet支持。 如果TelnetPlugin可用，默认情况下启用。</span></div><div class="line">shell.telnet.enabled= false</div><div class="line"><span class="comment"># Telnet端口。</span></div><div class="line">shell.telnet.port= 5000</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># GIT 信息配置</span></div><div class="line"><span class="comment"># 生成的git信息属性文件的资源引用。</span></div><div class="line">spring.git.properties= </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 标准出口</span></div><div class="line"><span class="comment"># 模式，告诉聚合器如何从源存储库中的键。</span></div><div class="line">spring.metrics.export.aggregate.key-pattern= </div><div class="line"><span class="comment"># 全局存储库的前缀如果处于活动状态。</span></div><div class="line">spring.metrics.export.aggregate.prefix= </div><div class="line"><span class="comment"># 导出刻度之间以毫秒为单位的延迟。 按照这种延迟，指标将按计划导出到外部来源。</span></div><div class="line">spring.metrics.export.delay-millis= 5000</div><div class="line"><span class="comment"># 标志以启用度量标准导出（假设MetricWriter可用）。</span></div><div class="line">spring.metrics.export.enabled= true</div><div class="line"><span class="comment"># 要排除的度量名称列表。 应用后包括。</span></div><div class="line">spring.metrics.export.excludes= </div><div class="line"><span class="comment"># 要包含的度量名称的模式列表。</span></div><div class="line">spring.metrics.export.includes= </div><div class="line"><span class="comment"># redis存储库导出的密钥（如果活动）。</span></div><div class="line">spring.metrics.export.redis.key= keys.spring.metrics</div><div class="line"><span class="comment"># redis存储库的前缀 如果处于活动状态。</span></div><div class="line">spring.metrics.export.redis.prefix= spring.metrics</div><div class="line"><span class="comment"># 标志基于不导出不变的度量值来关闭任何可用的优化。</span></div><div class="line">spring.metrics.export.send-latest= </div><div class="line"><span class="comment"># 主机的statsd服务器接收导出的指标。</span></div><div class="line">spring.metrics.export.statsd.host= </div><div class="line"><span class="comment"># 接收导出指标的statsd服务器端口。</span></div><div class="line">spring.metrics.export.statsd.port= 8125</div><div class="line"><span class="comment"># statsd导出指标的前缀。</span></div><div class="line">spring.metrics.export.statsd.prefix= </div><div class="line"><span class="comment"># 每个MetricWriter bean名称具有特定的触发器属性。</span></div><div class="line">spring.metrics.export.triggers.*= </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"><span class="comment"># DEVTOOLS属性</span></div><div class="line"><span class="comment"># ----------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment"># DEVTOOLS（开发工具属性）</span></div><div class="line"><span class="comment"># 启用一个livereload.com兼容的服务器。</span></div><div class="line">spring.devtools.livereload.enabled= true</div><div class="line"><span class="comment">#  # Server port.</span></div><div class="line">spring.devtools.livereload.port= 35729</div><div class="line"><span class="comment"># 应该排除的触发完全重新启动的其他模式。</span></div><div class="line">spring.devtools.restart.additional-exclude= </div><div class="line"><span class="comment"># 观看更改的附加路径。</span></div><div class="line">spring.devtools.restart.additional-paths= </div><div class="line"><span class="comment"># 启用自动重启功能。</span></div><div class="line">spring.devtools.restart.enabled= true</div><div class="line"><span class="comment"># 应该排除的模式触发完全重新启动。</span></div><div class="line">spring.devtools.restart.exclude= META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties</div><div class="line"><span class="comment"># 轮询类路径更改之间等待的时间量（以毫秒为单位）。</span></div><div class="line">spring.devtools.restart.poll-interval= 1000</div><div class="line"><span class="comment"># 触发重新启动之前没有任何类路径更改所需的安静时间量（以毫秒为单位）。</span></div><div class="line">spring.devtools.restart.quiet-period= 400</div><div class="line"><span class="comment"># 更改后的特定文件的名称将触发重新启动检查。 如果未指定任何类路径文件更改将触发重新启动。</span></div><div class="line">spring.devtools.restart.trigger-file= </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 远程开发工具属性</span></div><div class="line"><span class="comment"># 用于处理远程连接的上下文路径。</span></div><div class="line">spring.devtools.remote.context-path= /.~~spring-boot!~</div><div class="line"><span class="comment"># 启用远程调试支持。</span></div><div class="line">spring.devtools.remote.debug.enabled= true</div><div class="line"><span class="comment"># 本地远程调试服务器端口。</span></div><div class="line">spring.devtools.remote.debug.local-port= 8000</div><div class="line"><span class="comment"># 用于连接到远程应用程序的代理主机。</span></div><div class="line">spring.devtools.remote.proxy.host= </div><div class="line"><span class="comment"># 用于连接到远程应用程序的代理端口。</span></div><div class="line">spring.devtools.remote.proxy.port= </div><div class="line"><span class="comment"># 启用远程重启。</span></div><div class="line">spring.devtools.remote.restart.enabled= true</div><div class="line"><span class="comment"># 建立连接所需的共享密钥（需要启用远程支持）。</span></div><div class="line">spring.devtools.remote.secret= </div><div class="line"><span class="comment"># HTTP头用于传输共享密钥。&lt;/ span&gt;</span></div><div class="line">spring.devtools.remote.secret-header-name= X-AUTH-TOKEN</div></pre></td></tr></table></figure>
<p>暂时就这些，后面没有了！(=^ ^=)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;转自：&lt;/strong&gt; &lt;a href=&quot;http://blog.csdn.net/LPFSuperMan/article/details/78287265&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/LPFSuperMan/article/details/78287265&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个版本比较旧了，比较全的配置可以参照官方的介绍&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;官方文档：&lt;/strong&gt; &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="application.properties" scheme="maode.github.io/tags/application-properties/"/>
    
      <category term="SpringBoot" scheme="maode.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB安装配置</title>
    <link href="maode.github.io/2018/02/25/180225-MongoDB-install/"/>
    <id>maode.github.io/2018/02/25/180225-MongoDB-install/</id>
    <published>2018-02-25T13:36:17.000Z</published>
    <updated>2018-03-10T03:06:04.989Z</updated>
    
    <content type="html"><![CDATA[<p>官网最新版（社区版）：<a href="https://www.mongodb.com/download-center#community" target="_blank" rel="external">https://www.mongodb.com/download-center#community</a></p>
<h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>安装过程中选择  “Custom(自定义)” 可以自定义安装路径。</p>
<p>安装时注意左下角的 “install mongo compass（安装指南）” 取消勾选。否则会卡住。无法完成安装（3.6版本的）</p>
<h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><h3 id="创建数据和日志文件存放位置："><a href="#创建数据和日志文件存放位置：" class="headerlink" title="创建数据和日志文件存放位置："></a>创建数据和日志文件存放位置：</h3><p>如：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">mkdir</span> D:\software\MongoDB\Server\<span class="number">3</span>.<span class="number">6</span>\data</div><div class="line"><span class="built_in">mkdir</span> D:\software\MongoDB\Server\<span class="number">3</span>.<span class="number">6</span>\logs</div></pre></td></tr></table></figure></p>
<h3 id="启动MongoDB服务"><a href="#启动MongoDB服务" class="headerlink" title="启动MongoDB服务"></a>启动MongoDB服务</h3><p>在bin目录下执行以下命令（如果报错<a href="#安装完执行命令时报错">看这里</a>）：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod.exe --dbpath "D:\software\MongoDB\Server\<span class="number">3</span>.<span class="number">6</span>\data"</div></pre></td></tr></table></figure></p>
<p><code>--dbpath</code>指向刚才新建的数据库目录。如果不指定，默认会在C盘创建一个文件夹用来存放数据。<br>正常的话控制台会打印一大串信息，开头是启动的进程id，系统信息等等，最后一行是端口信息。如：<code>2018-02-25T22:05:23.019+0800 I NETWORK  [initandlisten] waiting for connections on port 27017</code>。</p>
<h3 id="测试链接"><a href="#测试链接" class="headerlink" title="测试链接"></a>测试链接</h3><p>目前服务已经启动，处于等待链接状态，这时另外打开一个cmd命令窗口用来测试一下链接。<br>（记得如果没有配置环境变量的话，要切换到bin目录下去执行命令）<br>在新打开的cmd命令窗口执行命令 <code>mongo</code> 如果没问题的话，控制台会打印链接信息。如下：</p>
<a id="more"></a>
<figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">code0</span>&gt;<span class="title">mongo</span></span></div><div class="line"><span class="function"><span class="title">MongoDB</span> <span class="title">shell</span> <span class="title">version</span> <span class="title">v3</span>.6.3</span></div><div class="line"><span class="function"><span class="title">connecting</span> <span class="title">to</span>: <span class="title">mongodb</span>://127.0.0.1:27017</span></div><div class="line"><span class="function"><span class="title">MongoDB</span> <span class="title">server</span> <span class="title">version</span>: 3.6.3</span></div><div class="line"><span class="function">.................后面的省略</span></div></pre></td></tr></table></figure>
<p>同时另一个用来启动服务的窗口也会有对应的链接信息显示。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">2018</span>-<span class="number">02</span>-<span class="number">25</span>T22:<span class="number">06</span>:<span class="number">17</span>.<span class="number">176</span>+<span class="number">0800</span> I NETWORK  [listener] connection accepted from <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">58527</span> #<span class="number">1</span> (<span class="number">1</span> connection now open)</div></pre></td></tr></table></figure></p>
<p>这时就代表链接成功了，可以敲几个命令感觉一下。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; show dbs</div><div class="line">admin   <span class="number">0</span>.<span class="number">000</span>GB</div><div class="line">config  <span class="number">0</span>.<span class="number">000</span>GB</div><div class="line">local   <span class="number">0</span>.<span class="number">000</span>GB</div><div class="line">&gt; use admin</div><div class="line">switched to db admin</div><div class="line">&gt; db.shutdownServer()</div><div class="line"><span class="number">2018</span>-<span class="number">02</span>-<span class="number">25</span>T22:<span class="number">44</span>:<span class="number">48</span>.<span class="number">357</span>+<span class="number">0800</span> I NETWORK  [thread1] Socket recv() 远程主机强迫关闭了一个现有的连接。 <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">27017</span></div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<p>这样就算安装成功了，以上为刚完成安装后默认的三个库。这时可以关闭服务了。使用admin库执行<code>db.shutdownServer()</code>命令，关闭服务。<br>这时启动服务的cmd窗口也会有对应的信息显示。如：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">2018</span>-<span class="number">02</span>-<span class="number">25</span>T22:<span class="number">44</span>:<span class="number">47</span>.<span class="number">830</span>+<span class="number">0800</span> I STORAGE  [conn1] WiredTigerKVEngine shutting down</div><div class="line"></div><div class="line"><span class="number">2018</span>-<span class="number">02</span>-<span class="number">25</span>T22:<span class="number">44</span>:<span class="number">48</span>.<span class="number">353</span>+<span class="number">0800</span> I STORAGE  [conn1] shutdown: removing <span class="built_in">fs</span> lock...</div><div class="line"><span class="number">2018</span>-<span class="number">02</span>-<span class="number">25</span>T22:<span class="number">44</span>:<span class="number">48</span>.<span class="number">353</span>+<span class="number">0800</span> I CONTROL  [conn1] now exiting</div><div class="line"><span class="number">2018</span>-<span class="number">02</span>-<span class="number">25</span>T22:<span class="number">44</span>:<span class="number">48</span>.<span class="number">354</span>+<span class="number">0800</span> I CONTROL  [conn1] shutting down with code:<span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>然后关闭这两个cmd窗口，测试结束。</p>
<h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><p>安装完成后，将MongoDB路径下的bin目录加入Path，方便使用，否则每次都要进入bin目录下敲命令，太麻烦。</p>
<h3 id="将MongoDB服务注册为windows服务"><a href="#将MongoDB服务注册为windows服务" class="headerlink" title="将MongoDB服务注册为windows服务"></a>将MongoDB服务注册为windows服务</h3><p>用管理员身份打开cmd窗口（非管理员用户，试了一下不管用）执行以下命令。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --logpath "D:\software\MongoDB\Server\<span class="number">3</span>.<span class="number">6</span>\logs\mongodb.log" --logappend -dbpath "D:\software\MongoDB\Server\<span class="number">3</span>.<span class="number">6</span>\data" --serviceName "mongodb" --install</div></pre></td></tr></table></figure></p>
<p>以上参数含义：<br><code>--logpath</code> 指向刚才创建的用来存放日志文件的路径。<br><code>-dbpath</code> 指向刚才创建的用来存放数据库文件的路径。<br><code>--logappend</code> 以追加的方式记录日志。<br><code>--serviceName</code> 注册的服务名。<br>注册完成后，可以在cmd窗口执行<code>services.msc</code>命令，在弹出的服务列表中能够看到我们新注册的名字为“mongodb”的服务，默认是自动启动的，如果不想自动启动，可以改为手动。手动启动的方式和启动其它windows服务是一样的。<code>net start mongodb</code>(以管理员身份运行否则”拒绝访问”)。</p>
<p><strong>关闭服务</strong>推荐使用上面介绍的 <code>db.shutdownServer()</code> 命令。</p>
<p>如果要从windows服务中<strong>注销（删除）该服务</strong>，使用命令：<br><code>mongod --remove --serviceName &quot;mongodb&quot;</code></p>
<h2 id="图形界面"><a href="#图形界面" class="headerlink" title="图形界面"></a>图形界面</h2><p>Robo 3T： <a href="https://robomongo.org/download" target="_blank" rel="external">https://robomongo.org/download</a></p>
<h2 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h2><h3 id="安装完执行命令时报错"><a href="#安装完执行命令时报错" class="headerlink" title="安装完执行命令时报错"></a>安装完执行命令时报错</h3><p>安装完成后使用时报错缺少<code>api-ms-win-crt-runtime-l1-1-0.dll</code>。试了几种方法，最后用下面这种方法搞定了。</p>
<p>缺少的dll文件包含在windows的某个更新文件中去<a href="https://support.microsoft.com/zh-tw/kb/2999226" target="_blank" rel="external">这个地址</a>安装缺少的更新文件。</p>
<p>解决方法参考：<a href="https://helpx.adobe.com/tw/creative-cloud/kb/error_on_launch.html" target="_blank" rel="external">https://helpx.adobe.com/tw/creative-cloud/kb/error_on_launch.html</a></p>
<p>其它内容参考：<a href="http://www.cnblogs.com/sufferingStriver/p/mongodberror.html" target="_blank" rel="external">http://www.cnblogs.com/sufferingStriver/p/mongodberror.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;官网最新版（社区版）：&lt;a href=&quot;https://www.mongodb.com/download-center#community&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.mongodb.com/download-center#community&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装过程&quot;&gt;&lt;a href=&quot;#安装过程&quot; class=&quot;headerlink&quot; title=&quot;安装过程&quot;&gt;&lt;/a&gt;安装过程&lt;/h2&gt;&lt;p&gt;安装过程中选择  “Custom(自定义)” 可以自定义安装路径。&lt;/p&gt;
&lt;p&gt;安装时注意左下角的 “install mongo compass（安装指南）” 取消勾选。否则会卡住。无法完成安装（3.6版本的）&lt;/p&gt;
&lt;h2 id=&quot;配置过程&quot;&gt;&lt;a href=&quot;#配置过程&quot; class=&quot;headerlink&quot; title=&quot;配置过程&quot;&gt;&lt;/a&gt;配置过程&lt;/h2&gt;&lt;h3 id=&quot;创建数据和日志文件存放位置：&quot;&gt;&lt;a href=&quot;#创建数据和日志文件存放位置：&quot; class=&quot;headerlink&quot; title=&quot;创建数据和日志文件存放位置：&quot;&gt;&lt;/a&gt;创建数据和日志文件存放位置：&lt;/h3&gt;&lt;p&gt;如：&lt;br&gt;&lt;figure class=&quot;highlight bat&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;mkdir&lt;/span&gt; D:\software\MongoDB\Server\&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;\data&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;mkdir&lt;/span&gt; D:\software\MongoDB\Server\&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;\logs&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;启动MongoDB服务&quot;&gt;&lt;a href=&quot;#启动MongoDB服务&quot; class=&quot;headerlink&quot; title=&quot;启动MongoDB服务&quot;&gt;&lt;/a&gt;启动MongoDB服务&lt;/h3&gt;&lt;p&gt;在bin目录下执行以下命令（如果报错&lt;a href=&quot;#安装完执行命令时报错&quot;&gt;看这里&lt;/a&gt;）：&lt;br&gt;&lt;figure class=&quot;highlight bat&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mongod.exe --dbpath &quot;D:\software\MongoDB\Server\&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;\data&quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--dbpath&lt;/code&gt;指向刚才新建的数据库目录。如果不指定，默认会在C盘创建一个文件夹用来存放数据。&lt;br&gt;正常的话控制台会打印一大串信息，开头是启动的进程id，系统信息等等，最后一行是端口信息。如：&lt;code&gt;2018-02-25T22:05:23.019+0800 I NETWORK  [initandlisten] waiting for connections on port 27017&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;测试链接&quot;&gt;&lt;a href=&quot;#测试链接&quot; class=&quot;headerlink&quot; title=&quot;测试链接&quot;&gt;&lt;/a&gt;测试链接&lt;/h3&gt;&lt;p&gt;目前服务已经启动，处于等待链接状态，这时另外打开一个cmd命令窗口用来测试一下链接。&lt;br&gt;（记得如果没有配置环境变量的话，要切换到bin目录下去执行命令）&lt;br&gt;在新打开的cmd命令窗口执行命令 &lt;code&gt;mongo&lt;/code&gt; 如果没问题的话，控制台会打印链接信息。如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="MongoDB" scheme="maode.github.io/tags/MongoDB/"/>
    
      <category term="Database" scheme="maode.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>nodejs安装的modules的环境变量配置</title>
    <link href="maode.github.io/2018/02/21/180221-nodejs-modules-Path/"/>
    <id>maode.github.io/2018/02/21/180221-nodejs-modules-Path/</id>
    <published>2018-02-21T03:29:46.000Z</published>
    <updated>2018-02-21T03:48:53.289Z</updated>
    
    <content type="html"><![CDATA[<p>昨天不小心把环境变量给覆写了，凭印象补充了一些，今天发现 nodejs下安装的所有module的 CLI命令 都失效了。寻思了好一会才想到应该怎么配置回来，记录一下。</p>
<p>nodejs通过npm命令全局安装的所有 modules 的 CLI命令 默认应该全都是被注册到了<code>C:\Users\code0\AppData\Roaming\npm</code>这个目录中，把这个目录加到环境变量的<code>Path</code>中，所有的 CLI命令 就都复活了。</p>
<p>暂时就这些，后面没有了！(=^ ^=)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天不小心把环境变量给覆写了，凭印象补充了一些，今天发现 nodejs下安装的所有module的 CLI命令 都失效了。寻思了好一会才想到应该怎么配置回来，记录一下。&lt;/p&gt;
&lt;p&gt;nodejs通过npm命令全局安装的所有 modules 的 CLI命令 默认应该全都是被注
    
    </summary>
    
    
      <category term="nodejs" scheme="maode.github.io/tags/nodejs/"/>
    
      <category term="环境变量" scheme="maode.github.io/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>gradle安装配置</title>
    <link href="maode.github.io/2018/02/20/180220-gradle-install/"/>
    <id>maode.github.io/2018/02/20/180220-gradle-install/</id>
    <published>2018-02-20T08:18:59.000Z</published>
    <updated>2018-03-10T04:22:53.829Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>官网下载压缩包解压安装：<a href="https://gradle.org/releases/" target="_blank" rel="external">https://gradle.org/releases/</a></p>
<p>其它安装方式见：<a href="https://gradle.org/install/" target="_blank" rel="external">https://gradle.org/install/</a></p>
<h3 id="配置环境变量："><a href="#配置环境变量：" class="headerlink" title="配置环境变量："></a>配置环境变量：</h3><ul>
<li><p>在环境变量中添加一个变量<code>GRADLE_HOME</code>指向gradle的根目录。</p>
<figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setx GRADLE_HOME "C:\software\gradle-<span class="number">4</span>.<span class="number">5</span>.<span class="number">1</span>"</div></pre></td></tr></table></figure>
</li>
<li><p>将gradle的可执行文件路径追加至Path。</p>
<figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setx <span class="built_in">Path</span> "<span class="variable">%Path%</span>;<span class="variable">%GRADLE_HOME%</span>\bin"</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="自定义gradle本地仓库"><a href="#自定义gradle本地仓库" class="headerlink" title="自定义gradle本地仓库"></a>自定义gradle本地仓库</h3><p>有几种不同的方式，大多采用配置环境变量的方式。<br>设置一个名称为<code>GRADLE_USER_HOME</code>的环境变量指向自定义的仓库目录。</p>
<a id="more"></a>
<figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setx GRADLE_USER_HOME "D:\repos\gradle"</div></pre></td></tr></table></figure>
<p>或使用以下命令：<code>gradle -g 目录路径</code>,例如<code>gradle -g D:\Gradle\.gradle</code></p>
<h3 id="复用maven本地仓库"><a href="#复用maven本地仓库" class="headerlink" title="复用maven本地仓库"></a>复用maven本地仓库</h3><p><strong>前提：</strong><br>gradle复用maven本地仓库，是通过maven的<code>settings.xml</code>配置文件来搜索maven本地仓库路径的，<br>gradle默认会按以下顺序去查找本地的仓库：<br>USER_HOME/.m2/settings.xml &gt;&gt; M2_HOME/conf/settings.xml &gt;&gt; USER_HOME/.m2/repository所以要保证C盘用户目录存在<code>settings.xml</code>或者设置了<code>M2_HOME</code>环境变量。</p>
<p>确认具备以上条件后。在项目的<code>build.gradle</code>文件中调用<code>mavenLocal</code>方法即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">  mavenLocal()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="修改全局默认仓库"><a href="#修改全局默认仓库" class="headerlink" title="修改全局默认仓库"></a>修改全局默认仓库</h3><p>进入Gradle安装目录下的<code>init.d</code>文件夹,新建<code>init.gradle</code>文件,并在文件中加入以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">allprojects&#123;</div><div class="line">    repositories &#123;</div><div class="line">        def ALIYUN_REPOSITORY_URL = &apos;http://maven.aliyun.com/nexus/content/groups/public&apos;</div><div class="line">        def ALIYUN_JCENTER_URL = &apos;http://maven.aliyun.com/nexus/content/repositories/jcenter&apos;</div><div class="line">        all &#123; ArtifactRepository repo -&gt;</div><div class="line">            if(repo instanceof MavenArtifactRepository)&#123;</div><div class="line">                def url = repo.url.toString()</div><div class="line">                if (url.startsWith(&apos;https://repo1.maven.org/maven2&apos;)) &#123;</div><div class="line">                    project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_REPOSITORY_URL.&quot;</div><div class="line">                    remove repo</div><div class="line">                &#125;</div><div class="line">                if (url.startsWith(&apos;https://jcenter.bintray.com/&apos;)) &#123;</div><div class="line">                    project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_JCENTER_URL.&quot;</div><div class="line">                    remove repo</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        maven &#123;</div><div class="line">        	url ALIYUN_REPOSITORY_URL</div><div class="line">            url ALIYUN_JCENTER_URL</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="提升编译速度"><a href="#提升编译速度" class="headerlink" title="提升编译速度"></a>提升编译速度</h3><p>开启守护进程和并行编译：<br>在 <code>用户目录\.gradle</code> 或 <code>GRADLE_USER_HOME</code> 路径下创建一个 <code>gradle.properties</code> 并填入以下内容：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">##开启守护进程</span></div><div class="line">org.gradle.daemon=true</div><div class="line"><span class="comment">##使用并行编译</span></div><div class="line">org.gradle.parallel=true</div></pre></td></tr></table></figure></p>
<p>不同系统下的用户目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">C:\Users\&lt;username&gt; (Windows Vista &amp; 7+)</div><div class="line">/Users/&lt;username&gt; (Mac OS X)</div><div class="line">/home/&lt;username&gt; (Linux)</div></pre></td></tr></table></figure></p>
<p>参考资料：<br><a href="http://blog.csdn.net/x_iya/article/details/75040806" target="_blank" rel="external">gradle本地、远程仓库配置</a><br><a href="http://blog.csdn.net/kl28978113/article/details/53018225" target="_blank" rel="external">Gradle 修改本地仓库的位置</a><br><a href="https://tvzr.com/change-the-mirror-of-gradle-to-aliyun.html" target="_blank" rel="external">配置Gradle的镜像为阿里云镜像</a><br><a href="https://benweizhu.gitbooks.io/gradle-best-practice/content/the-gradle-daemon.html" target="_blank" rel="external">Gradle守护进程</a><br><a href="http://tiki.cat/2016/05/26/android-studio-gradle-build-run-faster/" target="_blank" rel="external">知道Android 中Gradle 的这些技巧，提升编译构建速度</a></p>
<p>详细了解可参考：<a href="https://www.gitbook.com/book/benweizhu/gradle-best-practice/details" target="_blank" rel="external">Gradle最佳实践</a></p>
<p>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;下载安装&quot;&gt;&lt;a href=&quot;#下载安装&quot; class=&quot;headerlink&quot; title=&quot;下载安装&quot;&gt;&lt;/a&gt;下载安装&lt;/h3&gt;&lt;p&gt;官网下载压缩包解压安装：&lt;a href=&quot;https://gradle.org/releases/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gradle.org/releases/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其它安装方式见：&lt;a href=&quot;https://gradle.org/install/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gradle.org/install/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;配置环境变量：&quot;&gt;&lt;a href=&quot;#配置环境变量：&quot; class=&quot;headerlink&quot; title=&quot;配置环境变量：&quot;&gt;&lt;/a&gt;配置环境变量：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在环境变量中添加一个变量&lt;code&gt;GRADLE_HOME&lt;/code&gt;指向gradle的根目录。&lt;/p&gt;
&lt;figure class=&quot;highlight bat&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;setx GRADLE_HOME &quot;C:\software\gradle-&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将gradle的可执行文件路径追加至Path。&lt;/p&gt;
&lt;figure class=&quot;highlight bat&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;setx &lt;span class=&quot;built_in&quot;&gt;Path&lt;/span&gt; &quot;&lt;span class=&quot;variable&quot;&gt;%Path%&lt;/span&gt;;&lt;span class=&quot;variable&quot;&gt;%GRADLE_HOME%&lt;/span&gt;\bin&quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;自定义gradle本地仓库&quot;&gt;&lt;a href=&quot;#自定义gradle本地仓库&quot; class=&quot;headerlink&quot; title=&quot;自定义gradle本地仓库&quot;&gt;&lt;/a&gt;自定义gradle本地仓库&lt;/h3&gt;&lt;p&gt;有几种不同的方式，大多采用配置环境变量的方式。&lt;br&gt;设置一个名称为&lt;code&gt;GRADLE_USER_HOME&lt;/code&gt;的环境变量指向自定义的仓库目录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="gradle" scheme="maode.github.io/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>【转】Git只获取部分目录的内容（稀疏检出）</title>
    <link href="maode.github.io/2018/02/19/180219-Git-sparsecheckout/"/>
    <id>maode.github.io/2018/02/19/180219-Git-sparsecheckout/</id>
    <published>2018-02-19T13:28:10.000Z</published>
    <updated>2018-03-10T04:25:25.288Z</updated>
    
    <content type="html"><![CDATA[<p><strong>转自：</strong> <a href="https://zhgcao.github.io/2016/05/11/git-sparse-checkout/" target="_blank" rel="external">Git只获取部分目录的内容（稀疏检出）</a></p>
<hr>
<p>公司的开发从SVN切换到Git，在SVN下，可以很方便的只获取版本库中一个或多个目录的内容，但是Git的克隆，默认是直接拉取整个远程仓库，如果项目比较大，大量和自己无关的内容也会拉到本地，占用很多硬盘空间。</p>
<p>在网上搜了一下，Git在1.7版本后，已经支持只Checkout部分内容，这个功能叫做 sparse checkout（稀疏检出）。</p>
<h3 id="打开-sparse-checkout-功能"><a href="#打开-sparse-checkout-功能" class="headerlink" title="打开 sparse checkout 功能"></a>打开 sparse checkout 功能</h3><p>如果本地还没有建版本库，要用这个功能，先进入要放版本库的目录，在命令行执行几条命令：</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git init &lt;project&gt;</div><div class="line">$ <span class="built_in">cd</span> &lt;project&gt;</div><div class="line">$ git remote add origin ssh://&lt;user&gt;@&lt;repository<span class="string">'s url&gt;</span></div><div class="line"><span class="string">$ git config core.sparsecheckout true</span></div><div class="line"><span class="string">$ echo "path1/" &gt;&gt; .git/info/sparse-checkout</span></div><div class="line"><span class="string">$ echo "path2/" &gt;&gt; .git/info/sparse-checkout</span></div><div class="line"><span class="string">$ git pull origin master</span></div></pre></td></tr></table></figure>
<p>第一条命令<code>git init &lt;project&gt;</code>，先建立一个空的版本库，用实际的目录名替代。<br>第二条命令<code>cd &lt;project&gt;</code>，进入创建的新的版本库的目录。<br>第三条命令<code>git remote add origin ssh://&lt;user&gt;@&lt;repository&#39;s url&gt;</code>，添加远程库的地址。<br>第四条命令<code>git config core.sparsecheckout true</code>，打开sparse checkout功能。<br>第五第六条命令<code>echo &quot;path1/&quot; &gt;&gt; .git/info/sparse-checkout</code>，添加2个目录到checkout的列表。路径是版本库下的相对路径，也可以用文本编辑器编辑这个文件。<br>第七条命令<code>git pull origin master</code>，拉取远程的 master 分支，也可以拉其他分支。</p>
<p>如果只拉取最近一次的变更，忽略以前的变更记录，在拉取时可以加参数depth，如<code>git pull --depth=1 origin master</code> （浅克隆）</p>
<p>如果以后修改了 .git/info/sparse-checkout，增加或删除部分目录，可以执行如下命令重新Checkout</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div></pre></td></tr></table></figure>
<p>或执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">read</span>-tree -mu HEAD</div></pre></td></tr></table></figure>
<p>如果本地已经建了版本库，要使用这个功能，可以进入版本库的目录，执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git config core.sparsecheckout <span class="literal">true</span></div><div class="line">$ <span class="built_in">echo</span> <span class="string">"path1/"</span> &gt;&gt; .git/info/sparse-checkout</div><div class="line">$ <span class="built_in">echo</span> <span class="string">"path2/"</span> &gt;&gt; .git/info/sparse-checkout</div><div class="line">$ git checkout master</div></pre></td></tr></table></figure>
<p>要关闭 sparse checkout功 能，仅仅修改设置，将core.sparsecheckout设为false是不生效的，需要修改 .git/info/sparse-checkout 文件，用一个<code>*</code>号替代其中的内容，然后执行 checkout 或 read-tree 命令。</p>
<h3 id="sparse-checkout-文件设置"><a href="#sparse-checkout-文件设置" class="headerlink" title="sparse-checkout 文件设置"></a>sparse-checkout 文件设置</h3><p>子目录的匹配<br>在 sparse-checkout 文件中，如果目录名称前带斜杠，如<code>/docs/</code>，将只匹配项目根目录下的docs目录，如果目录名称前不带斜杠，如<code>docs/</code>，其他目录下如果也有这个名称的目录，如<code>test/docs/</code>也能被匹配。<br>而如果写了多级目录，如<code>docs/05/</code>，则不管前面是否带有斜杠，都只匹配项目根目录下的目录，如<code>test/docs/05/</code>不能被匹配。</p>
<p>通配符 <code>*</code> (星号)<br>在 sparse-checkout 文件中，支持通配符 <code>*</code>，如可以写成以下格式：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*docs/</div><div class="line">index.*</div><div class="line">*.gif</div></pre></td></tr></table></figure>
<p>排除项 <code>!</code> (感叹号)<br>在 sparse-checkout 文件中，也支持排除项 <code>!</code>，如只想排除排除项目下的 <code>docs</code> 目录，可以按如下格式写：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">!/docs/</div></pre></td></tr></table></figure>
<p>要注意一点：如果要关闭sparsecheckout功能，全取整个项目库，可以写一个<code>*</code>号，但如果有排除项，必须写<code>/*</code>，同时排除项要写在通配符后面。</p>
<p>(完)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;转自：&lt;/strong&gt; &lt;a href=&quot;https://zhgcao.github.io/2016/05/11/git-sparse-checkout/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git只获取部分目录的内容（稀疏检出）&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;公司的开发从SVN切换到Git，在SVN下，可以很方便的只获取版本库中一个或多个目录的内容，但是Git的克隆，默认是直接拉取整个远程仓库，如果项目比较大，大量和自己无关的内容也会拉到本地，占用很多硬盘空间。&lt;/p&gt;
&lt;p&gt;在网上搜了一下，Git在1.7版本后，已经支持只Checkout部分内容，这个功能叫做 sparse checkout（稀疏检出）。&lt;/p&gt;
&lt;h3 id=&quot;打开-sparse-checkout-功能&quot;&gt;&lt;a href=&quot;#打开-sparse-checkout-功能&quot; class=&quot;headerlink&quot; title=&quot;打开 sparse checkout 功能&quot;&gt;&lt;/a&gt;打开 sparse checkout 功能&lt;/h3&gt;&lt;p&gt;如果本地还没有建版本库，要用这个功能，先进入要放版本库的目录，在命令行执行几条命令：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="maode.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>缓存以及Spring cache介绍</title>
    <link href="maode.github.io/2018/02/19/180219-Spring-cache/"/>
    <id>maode.github.io/2018/02/19/180219-Spring-cache/</id>
    <published>2018-02-19T11:46:27.000Z</published>
    <updated>2018-03-10T04:24:51.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缓存简介"><a href="#缓存简介" class="headerlink" title="缓存简介"></a>缓存简介</h2><p>缓存，我的理解是：让数据更接近于使用者；工作机制是：先从缓存中读取数据，如果没有再从慢速设备上读取实际数据（数据也会存入缓存）；缓存什么：那些经常读取且不经常修改的数据/那些昂贵（CPU/IO）的且对于相同的请求有相同的计算结果的数据。如CPU–L1/L2–内存–磁盘就是一个典型的例子，CPU需要数据时先从L1/L2中读取，如果没有到内存中找，如果还没有会到磁盘上找。还有如用过Maven的朋友都应该知道，我们找依赖的时候，先从本机仓库找，再从本地服务器仓库找，最后到远程仓库服务器找；还有如京东的物流为什么那么快？他们在各个地都有分仓库，如果该仓库有货物那么送货的速度是非常快的。</p>
<h2 id="缓存命中率"><a href="#缓存命中率" class="headerlink" title="缓存命中率"></a>缓存命中率</h2><p>即从缓存中读取数据的次数 与 总读取次数的比率，命中率越高越好：</p>
<p>命中率 = 从缓存中读取次数 / (总读取次数[从缓存中读取次数 + 从慢速设备上读取的次数])</p>
<p>Miss率 = 没有从缓存中读取的次数 / (总读取次数[从缓存中读取次数 + 从慢速设备上读取的次数])</p>
<p>这是一个非常重要的监控指标，如果做缓存一定要健康这个指标来看缓存是否工作良好；</p>
<a id="more"></a>
<h2 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h2><h3 id="Eviction-policy"><a href="#Eviction-policy" class="headerlink" title="Eviction policy"></a>Eviction policy</h3><p>移除策略，即如果缓存满了，从缓存中移除数据的策略；常见的有LFU、LRU、FIFO：</p>
<p>FIFO（First In First Out）：先进先出算法，即先放入缓存的先被移除；</p>
<p>LRU（Least Recently Used）：最久未使用算法，使用时间距离现在最久的那个被移除；</p>
<p>LFU（Least Frequently Used）：最近最少使用算法，一定时间段内使用次数（频率）最少的那个被移除；</p>
<h3 id="TTL（Time-To-Live-）"><a href="#TTL（Time-To-Live-）" class="headerlink" title="TTL（Time To Live ）"></a>TTL（Time To Live ）</h3><p>存活期，即从缓存中创建时间点开始直到它到期的一个时间段（不管在这个时间段内有没有访问都将过期）</p>
<h3 id="TTI（Time-To-Idle）"><a href="#TTI（Time-To-Idle）" class="headerlink" title="TTI（Time To Idle）"></a>TTI（Time To Idle）</h3><p>空闲期，即一个数据多久没被访问将从缓存中移除的时间。</p>
<h2 id="Spring-cache简介"><a href="#Spring-cache简介" class="headerlink" title="Spring cache简介"></a>Spring cache简介</h2><p>Spring 3.1 引入了激动人心的基于注释（annotation）的缓存（cache）技术，它本质上不是一个具体的缓存实现方案（例如 EHCache 或者 OSCache），而是一个对缓存使用的抽象，通过在既有代码中添加少量它定义的各种 annotation，即能够达到缓存方法的返回对象的效果。</p>
<p>Spring 的缓存技术还具备相当的灵活性，不仅能够使用 SpEL（Spring Expression Language）来定义缓存的 key 和各种 condition，还提供开箱即用的缓存临时存储方案，也支持和主流的专业缓存例如 EHCache 集成。</p>
<p>其特点总结如下：</p>
<ul>
<li>通过少量的配置 annotation 注释即可使得既有代码支持缓存</li>
<li>支持开箱即用 Out-Of-The-Box，即不用安装和部署额外第三方组件即可使用缓存</li>
<li>支持 Spring Express Language，能使用对象的任何属性或者方法来定义缓存的 key 和 condition</li>
<li>支持 AspectJ，并通过其实现任何方法的缓存支持</li>
<li>支持自定义 key 和自定义缓存管理者，具有相当的灵活性和扩展性</li>
</ul>
<p>本文将针对上述特点对 Spring cache 进行详细的介绍，主要通过一个简单的例子和原理介绍展开，然后我们将一起看一个比较实际的缓存例子，最后会介绍 spring cache 的使用限制和注意事项。OK，Let ’ s begin!</p>
<h2 id="不使用第三方组件的缓存实现"><a href="#不使用第三方组件的缓存实现" class="headerlink" title="不使用第三方组件的缓存实现"></a>不使用第三方组件的缓存实现</h2><p>这里先展示一个完全自定义的缓存实现，即不用任何第三方的组件来实现某种对象的内存缓存。</p>
<p>场景是：对一个账号查询方法做缓存，以账号名称为 key，账号对象为 value，当以相同的账号名称查询账号的时候，直接从缓存中返回结果，否则更新缓存。账号查询服务还支持 reload 缓存（即清空缓存）。</p>
<p>首先定义一个实体类：账号类，具备基本的 id 和 name 属性，且具备 getter 和 setter 方法</p>
<h5 id="清单-1-Account-java"><a href="#清单-1-Account-java" class="headerlink" title="清单 1. Account.java"></a>清单 1. Account.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cacheOfAnno; </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123; </div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id; </div><div class="line">  <span class="keyword">private</span> String name; </div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(String name)</span> </span>&#123; </div><div class="line">    <span class="keyword">this</span>.name = name; </div><div class="line">  &#125; </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">return</span> id; </div><div class="line">  &#125; </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123; </div><div class="line">    <span class="keyword">this</span>.id = id; </div><div class="line">  &#125; </div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">return</span> name; </div><div class="line">  &#125; </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; </div><div class="line">    <span class="keyword">this</span>.name = name; </div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后定义一个缓存管理器，这个管理器负责实现缓存逻辑，支持对象的增加、修改和删除，支持值对象的泛型。如下：</p>
<h5 id="清单-2-MyCacheManager-java"><a href="#清单-2-MyCacheManager-java" class="headerlink" title="清单 2. MyCacheManager.java"></a>清单 2. MyCacheManager.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> oldcache; </div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.Map; </div><div class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap; </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCacheManager</span>&lt;<span class="title">T</span>&gt; </span>&#123; </div><div class="line">  <span class="keyword">private</span> Map&lt;String,T&gt; cache = </div><div class="line">      <span class="keyword">new</span> ConcurrentHashMap&lt;String,T&gt;(); </div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">(Object key)</span> </span>&#123; </div><div class="line">    <span class="keyword">return</span> cache.get(key); </div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOrUpdateCache</span><span class="params">(String key,T value)</span> </span>&#123; </div><div class="line">    cache.put(key, value); </div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evictCache</span><span class="params">(String key)</span> </span>&#123;<span class="comment">// 根据 key 来删除缓存中的一条记录</span></div><div class="line">    <span class="keyword">if</span>(cache.containsKey(key)) &#123; </div><div class="line">      cache.remove(key); </div><div class="line">    &#125; </div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evictCache</span><span class="params">()</span> </span>&#123;<span class="comment">// 清空缓存中的所有记录</span></div><div class="line">    cache.clear(); </div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好，现在我们有了实体类和一个缓存管理器，还需要一个提供账号查询的服务类，此服务类使用缓存管理器来支持账号查询缓存，如下：</p>
<h5 id="清单-3-MyAccountService-java"><a href="#清单-3-MyAccountService-java" class="headerlink" title="清单 3. MyAccountService.java"></a>清单 3. MyAccountService.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> oldcache; </div><div class="line"> </div><div class="line"><span class="keyword">import</span> cacheOfAnno.Account; </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAccountService</span> </span>&#123; </div><div class="line">  <span class="keyword">private</span> MyCacheManager&lt;Account&gt; cacheManager; </div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyAccountService</span><span class="params">()</span> </span>&#123; </div><div class="line">    cacheManager = <span class="keyword">new</span> MyCacheManager&lt;Account&gt;();<span class="comment">// 构造一个缓存管理器</span></div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> Account <span class="title">getAccountByName</span><span class="params">(String acctName)</span> </span>&#123; </div><div class="line">    Account result = cacheManager.getValue(acctName);<span class="comment">// 首先查询缓存</span></div><div class="line">    <span class="keyword">if</span>(result!=<span class="keyword">null</span>) &#123; </div><div class="line">      System.out.println(<span class="string">"get from cache..."</span>+acctName); </div><div class="line">      <span class="keyword">return</span> result;<span class="comment">// 如果在缓存中，则直接返回缓存的结果</span></div><div class="line">    &#125; </div><div class="line">    result = getFromDB(acctName);<span class="comment">// 否则到数据库中查询</span></div><div class="line">    <span class="keyword">if</span>(result!=<span class="keyword">null</span>) &#123;<span class="comment">// 将数据库查询的结果更新到缓存中</span></div><div class="line">      cacheManager.addOrUpdateCache(acctName, result); </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> result; </div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reload</span><span class="params">()</span> </span>&#123; </div><div class="line">    cacheManager.evictCache(); </div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">private</span> Account <span class="title">getFromDB</span><span class="params">(String acctName)</span> </span>&#123; </div><div class="line">    System.out.println(<span class="string">"real querying db..."</span>+acctName); </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Account(acctName); </div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们开始写一个测试类，用于测试刚才的缓存是否有效</p>
<h5 id="清单-4-Main-java"><a href="#清单-4-Main-java" class="headerlink" title="清单 4. Main.java"></a>清单 4. Main.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> oldcache; </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123; </div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">    MyAccountService s = <span class="keyword">new</span> MyAccountService(); </div><div class="line">    <span class="comment">// 开始查询账号</span></div><div class="line">    s.getAccountByName(<span class="string">"somebody"</span>);<span class="comment">// 第一次查询，应该是数据库查询</span></div><div class="line">    s.getAccountByName(<span class="string">"somebody"</span>);<span class="comment">// 第二次查询，应该直接从缓存返回</span></div><div class="line">    </div><div class="line">    s.reload();<span class="comment">// 重置缓存</span></div><div class="line">    System.out.println(<span class="string">"after reload..."</span>); </div><div class="line">    </div><div class="line">    s.getAccountByName(<span class="string">"somebody"</span>);<span class="comment">// 应该是数据库查询</span></div><div class="line">    s.getAccountByName(<span class="string">"somebody"</span>);<span class="comment">// 第二次查询，应该直接从缓存返回</span></div><div class="line">    </div><div class="line">  &#125; </div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>按照分析，执行结果应该是：首先从数据库查询，然后直接返回缓存中的结果，重置缓存后，应该先从数据库查询，然后返回缓存中的结果，实际的执行结果如下：</p>
<h5 id="清单-5-运行结果"><a href="#清单-5-运行结果" class="headerlink" title="清单 5. 运行结果"></a>清单 5. 运行结果</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">real querying db...somebody<span class="comment">// 第一次从数据库加载</span></div><div class="line">get from cache...somebody<span class="comment">// 第二次从缓存加载</span></div><div class="line">after reload...<span class="comment">// 清空缓存</span></div><div class="line">real querying db...somebody<span class="comment">// 又从数据库加载</span></div><div class="line">get from cache...somebody<span class="comment">// 从缓存加载</span></div></pre></td></tr></table></figure>
<p>可以看出我们的缓存起效了，但是这种自定义的缓存方案有如下劣势：</p>
<ul>
<li>缓存代码和业务代码耦合度太高，如上面的例子，AccountService 中的 getAccountByName（）方法中有了太多缓存的逻辑，不便于维护和变更</li>
<li>不灵活，这种缓存方案不支持按照某种条件的缓存，比如只有某种类型的账号才需要缓存，这种需求会导致代码的变更</li>
<li>缓存的存储这块写的比较死，不能灵活的切换为使用第三方的缓存模块</li>
</ul>
<p>如果你的代码中有上述代码的影子，那么你可以考虑按照下面的介绍来优化一下你的代码结构了，也可以说是简化，你会发现，你的代码会变得优雅的多！</p>
<h2 id="使用Spring-cache的缓存实现"><a href="#使用Spring-cache的缓存实现" class="headerlink" title="使用Spring cache的缓存实现"></a>使用Spring cache的缓存实现</h2><h3 id="用Spring-cache实现一个Hello-World例子"><a href="#用Spring-cache实现一个Hello-World例子" class="headerlink" title="用Spring cache实现一个Hello World例子"></a>用Spring cache实现一个Hello World例子</h3><p>本 Hello World 类似于其他任何的 Hello World 程序，从最简单实用的角度展现 spring cache 的魅力，它基于刚才自定义缓存方案的实体类 Account.java，重新定义了 AccountService.java 和测试类 Main.java（注意这个例子不用自己定义缓存管理器，因为 spring 已经提供了缺省实现）</p>
<h3 id="需要的-jar-包"><a href="#需要的-jar-包" class="headerlink" title="需要的 jar 包"></a>需要的 jar 包</h3><p>为了实用 spring cache 缓存方案，在工程的 classpath 必须具备下列 jar 包。</p>
<h5 id="图-1-工程依赖的-jar-包图"><a href="#图-1-工程依赖的-jar-包图" class="headerlink" title="图 1. 工程依赖的 jar 包图"></a>图 1. 工程依赖的 jar 包图</h5><p><img src="https://www.ibm.com/developerworks/cn/opensource/os-cn-spring-cache/image001.jpg" alt="图 1. 工程依赖的 jar 包图"></p>
<p>注意这里我引入的是最新的 spring 3.2.0.M1 版本 jar 包，其实只要是 spring 3.1 以上，都支持 spring cache。其中 spring-context-*.jar 包含了 cache 需要的类。</p>
<h3 id="定义实体类、服务类和相关配置文件"><a href="#定义实体类、服务类和相关配置文件" class="headerlink" title="定义实体类、服务类和相关配置文件"></a>定义实体类、服务类和相关配置文件</h3><p>实体类就是上面自定义缓存方案定义的 Account.java，这里重新定义了服务类，如下：</p>
<h5 id="清单-6-AccountService-java"><a href="#清单-6-AccountService-java" class="headerlink" title="清单 6. AccountService.java"></a>清单 6. AccountService.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cacheOfAnno; </div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CacheEvict; </div><div class="line"><span class="keyword">import</span> org.springframework.cache.annotation.Cacheable; </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountService</span> </span>&#123; </div><div class="line">  <span class="meta">@Cacheable</span>(value=<span class="string">"accountCache"</span>)<span class="comment">// 使用了一个缓存名叫 accountCache </span></div><div class="line">  <span class="function"><span class="keyword">public</span> Account <span class="title">getAccountByName</span><span class="params">(String userName)</span> </span>&#123; </div><div class="line">    <span class="comment">// 方法内部实现不考虑缓存逻辑，直接实现业务</span></div><div class="line">    System.out.println(<span class="string">"real query account."</span>+userName); </div><div class="line">    <span class="keyword">return</span> getFromDB(userName); </div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">private</span> Account <span class="title">getFromDB</span><span class="params">(String acctName)</span> </span>&#123; </div><div class="line">    System.out.println(<span class="string">"real querying db..."</span>+acctName); </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Account(acctName); </div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，此类的 getAccountByName 方法上有一个注释 annotation，即 @Cacheable(value=”accountCache”)，这个注释的意思是，当调用这个方法的时候，会从一个名叫 accountCache 的缓存中查询，如果没有，则执行实际的方法（即查询数据库），并将执行的结果存入缓存中，否则返回缓存中的对象。这里的缓存中的 key 就是参数 userName，value 就是 Account 对象。“accountCache”缓存是在 spring*.xml 中定义的名称。</p>
<p>好，因为加入了 spring，所以我们还需要一个 spring 的配置文件来支持基于注释的缓存</p>
<h5 id="清单-7-Spring-cache-anno-xml"><a href="#清单-7-Spring-cache-anno-xml" class="headerlink" title="清单 7. Spring-cache-anno.xml"></a>清单 7. Spring-cache-anno.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">  <span class="attr">xmlns:cache</span>=<span class="string">"http://www.springframework.org/schema/cache"</span></span></div><div class="line"><span class="tag">   <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></div><div class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></div><div class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/cache </span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/cache/spring-cache.xsd"</span>&gt;</span> </div><div class="line">    </div><div class="line">  <span class="tag">&lt;<span class="name">cache:annotation-driven</span> /&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountServiceBean"</span> <span class="attr">class</span>=<span class="string">"cacheOfAnno.AccountService"</span>/&gt;</span> </div><div class="line"> </div><div class="line">   <span class="comment">&lt;!-- generic cache manager --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManager"</span></span></div><div class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"org.springframework.cache.support.SimpleCacheManager"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"caches"</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">set</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">bean</span></span></div><div class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"</span></span></div><div class="line"><span class="tag">          <span class="attr">p:name</span>=<span class="string">"default"</span> /&gt;</span> </div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">bean</span></span></div><div class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"</span></span></div><div class="line"><span class="tag">          <span class="attr">p:name</span>=<span class="string">"accountCache"</span> /&gt;</span> </div><div class="line">      <span class="tag">&lt;/<span class="name">set</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意这个 spring 配置文件有一个关键的支持缓存的配置项：<code>&lt;cache:annotation-driven /&gt;，</code>这个配置项缺省使用了一个名字叫 cacheManager 的缓存管理器，这个缓存管理器有一个 spring 的缺省实现，即 org.springframework.cache.support.SimpleCacheManager，这个缓存管理器实现了我们刚刚自定义的缓存管理器的逻辑，它需要配置一个属性 caches，即此缓存管理器管理的缓存集合，除了缺省的名字叫 default 的缓存，我们还自定义了一个名字叫 accountCache 的缓存，使用了缺省的内存存储方案 ConcurrentMapCacheFactoryBean，它是基于 java.util.concurrent.ConcurrentHashMap 的一个内存缓存实现方案。</p>
<p>OK，现在我们具备了测试条件，测试代码如下：</p>
<h5 id="清单-8-Main-java"><a href="#清单-8-Main-java" class="headerlink" title="清单 8. Main.java"></a>清单 8. Main.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cacheOfAnno; </div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext; </div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext; </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123; </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext( </div><div class="line">       <span class="string">"spring-cache-anno.xml"</span>);<span class="comment">// 加载 spring 配置文件</span></div><div class="line">    </div><div class="line">    AccountService s = (AccountService) context.getBean(<span class="string">"accountServiceBean"</span>); </div><div class="line">    <span class="comment">// 第一次查询，应该走数据库</span></div><div class="line">    System.out.print(<span class="string">"first query..."</span>); </div><div class="line">    s.getAccountByName(<span class="string">"somebody"</span>); </div><div class="line">    <span class="comment">// 第二次查询，应该不查数据库，直接返回缓存的值</span></div><div class="line">    System.out.print(<span class="string">"second query..."</span>); </div><div class="line">    s.getAccountByName(<span class="string">"somebody"</span>); </div><div class="line">    System.out.println(); </div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的测试代码主要进行了两次查询，第一次应该会查询数据库，第二次应该返回缓存，不再查数据库，我们执行一下，看看结果</p>
<h5 id="清单-9-执行结果"><a href="#清单-9-执行结果" class="headerlink" title="清单 9. 执行结果"></a>清单 9. 执行结果</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">first query...real query account.somebody<span class="comment">// 第一次查询</span></div><div class="line">real querying db...somebody<span class="comment">// 对数据库进行了查询</span></div><div class="line">second query...<span class="comment">// 第二次查询，没有打印数据库查询日志，直接返回了缓存中的结果</span></div></pre></td></tr></table></figure>
<p>可以看出我们设置的基于注释的缓存起作用了，而在 AccountService.java 的代码中，我们没有看到任何的缓存逻辑代码，只有一行注释：@Cacheable(value=”accountCache”)，就实现了基本的缓存方案，是不是很强大？</p>
<h3 id="如何清空缓存"><a href="#如何清空缓存" class="headerlink" title="如何清空缓存"></a>如何清空缓存</h3><p>好，到目前为止，我们的 spring cache 缓存程序已经运行成功了，但是还不完美，因为还缺少一个重要的缓存管理逻辑：清空缓存，当账号数据发生变更，那么必须要清空某个缓存，另外还需要定期的清空所有缓存，以保证缓存数据的可靠性。</p>
<p>为了加入清空缓存的逻辑，我们只要对 AccountService.java 进行修改，从业务逻辑的角度上看，它有两个需要清空缓存的地方</p>
<ul>
<li>当外部调用更新了账号，则我们需要更新此账号对应的缓存</li>
<li>当外部调用说明重新加载，则我们需要清空所有缓存</li>
</ul>
<h5 id="清单-10-AccountService-java"><a href="#清单-10-AccountService-java" class="headerlink" title="清单 10. AccountService.java"></a>清单 10. AccountService.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cacheOfAnno; </div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CacheEvict; </div><div class="line"><span class="keyword">import</span> org.springframework.cache.annotation.Cacheable; </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountService</span> </span>&#123; </div><div class="line">  <span class="meta">@Cacheable</span>(value=<span class="string">"accountCache"</span>)<span class="comment">// 使用了一个缓存名叫 accountCache </span></div><div class="line">  <span class="function"><span class="keyword">public</span> Account <span class="title">getAccountByName</span><span class="params">(String userName)</span> </span>&#123; </div><div class="line">    <span class="comment">// 方法内部实现不考虑缓存逻辑，直接实现业务</span></div><div class="line">    <span class="keyword">return</span> getFromDB(userName); </div><div class="line">  &#125; </div><div class="line">  <span class="meta">@CacheEvict</span>(value=<span class="string">"accountCache"</span>,key=<span class="string">"#account.getName()"</span>)<span class="comment">// 清空 accountCache 缓存  public void updateAccount(Account account) &#123;</span></div><div class="line">    updateDB(account); </div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  <span class="meta">@CacheEvict</span>(value=<span class="string">"accountCache"</span>,allEntries=<span class="keyword">true</span>)<span class="comment">// 清空 accountCache 缓存</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reload</span><span class="params">()</span> </span>&#123; </div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">private</span> Account <span class="title">getFromDB</span><span class="params">(String acctName)</span> </span>&#123; </div><div class="line">    System.out.println(<span class="string">"real querying db..."</span>+acctName); </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Account(acctName); </div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateDB</span><span class="params">(Account account)</span> </span>&#123; </div><div class="line">    System.out.println(<span class="string">"real update db..."</span>+account.getName()); </div><div class="line">  &#125; </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="清单-11-Main-java"><a href="#清单-11-Main-java" class="headerlink" title="清单 11. Main.java"></a>清单 11. Main.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cacheOfAnno; </div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext; </div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext; </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123; </div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext( </div><div class="line">       <span class="string">"spring-cache-anno.xml"</span>);<span class="comment">// 加载 spring 配置文件</span></div><div class="line">    </div><div class="line">    AccountService s = (AccountService) context.getBean(<span class="string">"accountServiceBean"</span>); </div><div class="line">    <span class="comment">// 第一次查询，应该走数据库</span></div><div class="line">    System.out.print(<span class="string">"first query..."</span>); </div><div class="line">    s.getAccountByName(<span class="string">"somebody"</span>); </div><div class="line">    <span class="comment">// 第二次查询，应该不查数据库，直接返回缓存的值</span></div><div class="line">    System.out.print(<span class="string">"second query..."</span>); </div><div class="line">    s.getAccountByName(<span class="string">"somebody"</span>); </div><div class="line">    System.out.println(); </div><div class="line">    </div><div class="line">    System.out.println(<span class="string">"start testing clear cache..."</span>);    <span class="comment">// 更新某个记录的缓存，首先构造两个账号记录，然后记录到缓存中</span></div><div class="line">    Account account1 = s.getAccountByName(<span class="string">"somebody1"</span>); </div><div class="line">    Account account2 = s.getAccountByName(<span class="string">"somebody2"</span>); </div><div class="line">    <span class="comment">// 开始更新其中一个    account1.setId(1212);</span></div><div class="line">    s.updateAccount(account1); </div><div class="line">    s.getAccountByName(<span class="string">"somebody1"</span>);<span class="comment">// 因为被更新了，所以会查询数据库    s.getAccountByName("somebody2");// 没有更新过，应该走缓存    s.getAccountByName("somebody1");// 再次查询，应该走缓存    // 更新所有缓存</span></div><div class="line">    s.reload(); </div><div class="line">    s.getAccountByName(<span class="string">"somebody1"</span>);<span class="comment">// 应该会查询数据库    s.getAccountByName("somebody2");// 应该会查询数据库    s.getAccountByName("somebody1");// 应该走缓存    s.getAccountByName("somebody2");// 应该走缓存</span></div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="清单-12-运行结果"><a href="#清单-12-运行结果" class="headerlink" title="清单 12. 运行结果"></a>清单 12. 运行结果</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">first query...real querying db...somebody </div><div class="line">second query... </div><div class="line">start testing clear cache... </div><div class="line">real querying db...somebody1 </div><div class="line">real querying db...somebody2 </div><div class="line">real update db...somebody1 </div><div class="line">real querying db...somebody1 </div><div class="line">real querying db...somebody1 </div><div class="line">real querying db...somebody2</div></pre></td></tr></table></figure>
<p>结果和我们期望的一致，所以，我们可以看出，spring cache 清空缓存的方法很简单，就是通过 @CacheEvict 注释来标记要清空缓存的方法，当这个方法被调用后，即会清空缓存。注意其中一个 @CacheEvict(value=”accountCache”,key=”#account.getName()”)，其中的 Key 是用来指定缓存的 key 的，这里因为我们保存的时候用的是 account 对象的 name 字段，所以这里还需要从参数 account 对象中获取 name 的值来作为 key，前面的 # 号代表这是一个 SpEL 表达式，此表达式可以遍历方法的参数对象，具体语法可以参考 Spring 的相关文档手册。</p>
<h3 id="如何按照条件操作缓存"><a href="#如何按照条件操作缓存" class="headerlink" title="如何按照条件操作缓存"></a>如何按照条件操作缓存</h3><p>前面介绍的缓存方法，没有任何条件，即所有对 accountService 对象的 getAccountByName 方法的调用都会起动缓存效果，不管参数是什么值，如果有一个需求，就是只有账号名称的长度小于等于 4 的情况下，才做缓存，大于 4 的不使用缓存，那怎么实现呢？</p>
<p>Spring cache 提供了一个很好的方法，那就是基于 SpEL 表达式的 condition 定义，这个 condition 是 @Cacheable 注释的一个属性，下面我来演示一下</p>
<h5 id="清单-13-AccountService-java（getAccountByName-方法修订，支持条件）"><a href="#清单-13-AccountService-java（getAccountByName-方法修订，支持条件）" class="headerlink" title="清单 13. AccountService.java（getAccountByName 方法修订，支持条件）"></a>清单 13. AccountService.java（getAccountByName 方法修订，支持条件）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 缓存名叫 accountCache </span></div><div class="line"><span class="meta">@Cacheable</span>(value=<span class="string">"accountCache"</span>,condition=<span class="string">"#userName.length() &lt;= 4"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">getAccountByName</span><span class="params">(String userName)</span> </span>&#123; </div><div class="line"><span class="comment">// 方法内部实现不考虑缓存逻辑，直接实现业务</span></div><div class="line"><span class="keyword">return</span> getFromDB(userName); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意其中的 condition=”#userName.length() &lt;=4”，这里使用了 SpEL 表达式访问了参数 userName 对象的 length() 方法，条件表达式返回一个布尔值，true/false，当条件为 true，则进行缓存操作，否则直接调用方法执行的返回结果。</p>
<h5 id="清单-14-测试方法"><a href="#清单-14-测试方法" class="headerlink" title="清单 14. 测试方法"></a>清单 14. 测试方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">s.getAccountByName(<span class="string">"somebody"</span>);<span class="comment">// 长度大于 4，不会被缓存</span></div><div class="line">s.getAccountByName(<span class="string">"sbd"</span>);<span class="comment">// 长度小于 4，会被缓存</span></div><div class="line">s.getAccountByName(<span class="string">"somebody"</span>);<span class="comment">// 还是查询数据库</span></div><div class="line">s.getAccountByName(<span class="string">"sbd"</span>);<span class="comment">// 会从缓存返回</span></div></pre></td></tr></table></figure>
<h5 id="清单-15-运行结果"><a href="#清单-15-运行结果" class="headerlink" title="清单 15. 运行结果"></a>清单 15. 运行结果</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">real querying db...somebody </div><div class="line">real querying db...sbd </div><div class="line">real querying db...somebody</div></pre></td></tr></table></figure>
<p>可见对长度大于 4 的账号名 (somebody) 没有缓存，每次都查询数据库。</p>
<h3 id="如果有多个参数，如何进行-key-的组合"><a href="#如果有多个参数，如何进行-key-的组合" class="headerlink" title="如果有多个参数，如何进行 key 的组合"></a>如果有多个参数，如何进行 key 的组合</h3><p>假设 AccountService 现在有一个需求，要求根据账号名、密码和是否发送日志查询账号信息，很明显，这里我们需要根据账号名、密码对账号对象进行缓存，而第三个参数“是否发送日志”对缓存没有任何影响。所以，我们可以利用 SpEL 表达式对缓存 key 进行设计</p>
<h5 id="清单-16-Account-java（增加-password-属性）"><a href="#清单-16-Account-java（增加-password-属性）" class="headerlink" title="清单 16. Account.java（增加 password 属性）"></a>清单 16. Account.java（增加 password 属性）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> String password; </div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123; </div><div class="line">  <span class="keyword">return</span> password; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123; </div><div class="line">  <span class="keyword">this</span>.password = password; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="清单-17-AccountService-java（增加-getAccount-方法，支持组合-key）"><a href="#清单-17-AccountService-java（增加-getAccount-方法，支持组合-key）" class="headerlink" title="清单 17. AccountService.java（增加 getAccount 方法，支持组合 key）"></a>清单 17. AccountService.java（增加 getAccount 方法，支持组合 key）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Cacheable</span>(value=<span class="string">"accountCache"</span>,key=<span class="string">"#userName.concat(#password)"</span>) </div><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">getAccount</span><span class="params">(String userName,String password,<span class="keyword">boolean</span> sendLog)</span> </span>&#123; </div><div class="line">  <span class="comment">// 方法内部实现不考虑缓存逻辑，直接实现业务</span></div><div class="line">  <span class="keyword">return</span> getFromDB(userName,password); </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意上面的 key 属性，其中引用了方法的两个参数 userName 和 password，而 sendLog 属性没有考虑，因为其对缓存没有影响。</p>
<h5 id="清单-18-Main-java"><a href="#清单-18-Main-java" class="headerlink" title="清单 18. Main.java"></a>清单 18. Main.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">  ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext( </div><div class="line">     <span class="string">"spring-cache-anno.xml"</span>);<span class="comment">// 加载 spring 配置文件</span></div><div class="line">  </div><div class="line">  AccountService s = (AccountService) context.getBean(<span class="string">"accountServiceBean"</span>); </div><div class="line">  s.getAccount(<span class="string">"somebody"</span>, <span class="string">"123456"</span>, <span class="keyword">true</span>);<span class="comment">// 应该查询数据库</span></div><div class="line">  s.getAccount(<span class="string">"somebody"</span>, <span class="string">"123456"</span>, <span class="keyword">true</span>);<span class="comment">// 应该走缓存</span></div><div class="line">  s.getAccount(<span class="string">"somebody"</span>, <span class="string">"123456"</span>, <span class="keyword">false</span>);<span class="comment">// 应该走缓存</span></div><div class="line">  s.getAccount(<span class="string">"somebody"</span>, <span class="string">"654321"</span>, <span class="keyword">true</span>);<span class="comment">// 应该查询数据库</span></div><div class="line">  s.getAccount(<span class="string">"somebody"</span>, <span class="string">"654321"</span>, <span class="keyword">true</span>);<span class="comment">// 应该走缓存</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述测试，是采用了相同的账号，不同的密码组合进行查询，那么一共有两种组合情况，所以针对数据库的查询应该只有两次。</p>
<h5 id="清单-19-运行结果"><a href="#清单-19-运行结果" class="headerlink" title="清单 19. 运行结果"></a>清单 19. 运行结果</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">real querying db...userName=somebody password=<span class="number">123456</span> </div><div class="line">real querying db...userName=somebody password=<span class="number">654321</span></div></pre></td></tr></table></figure>
<p>和我们预期的一致。</p>
<h3 id="如何做到：既要保证方法被调用，又希望结果被缓存"><a href="#如何做到：既要保证方法被调用，又希望结果被缓存" class="headerlink" title="如何做到：既要保证方法被调用，又希望结果被缓存"></a>如何做到：既要保证方法被调用，又希望结果被缓存</h3><p>根据前面的例子，我们知道，如果使用了 @Cacheable 注释，则当重复使用相同参数调用方法的时候，方法本身不会被调用执行，即方法本身被略过了，取而代之的是方法的结果直接从缓存中找到并返回了。</p>
<p>现实中并不总是如此，有些情况下我们希望方法一定会被调用，因为其除了返回一个结果，还做了其他事情，例如记录日志，调用接口等，这个时候，我们可以用 @CachePut 注释，这个注释可以确保方法被执行，同时方法的返回值也被记录到缓存中。</p>
<h5 id="清单-20-AccountService-java"><a href="#清单-20-AccountService-java" class="headerlink" title="清单 20. AccountService.java"></a>清单 20. AccountService.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Cacheable</span>(value=<span class="string">"accountCache"</span>)<span class="comment">// 使用了一个缓存名叫 accountCache </span></div><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">getAccountByName</span><span class="params">(String userName)</span> </span>&#123; </div><div class="line">  <span class="comment">// 方法内部实现不考虑缓存逻辑，直接实现业务</span></div><div class="line">  <span class="keyword">return</span> getFromDB(userName); </div><div class="line">&#125; </div><div class="line"><span class="meta">@CachePut</span>(value=<span class="string">"accountCache"</span>,key=<span class="string">"#account.getName()"</span>)<span class="comment">// 更新 accountCache 缓存</span></div><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123; </div><div class="line">  <span class="keyword">return</span> updateDB(account); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">private</span> Account <span class="title">updateDB</span><span class="params">(Account account)</span> </span>&#123; </div><div class="line">  System.out.println(<span class="string">"real updating db..."</span>+account.getName()); </div><div class="line">  <span class="keyword">return</span> account; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="清单-21-Main-java"><a href="#清单-21-Main-java" class="headerlink" title="清单 21. Main.java"></a>清单 21. Main.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">  ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext( </div><div class="line">     <span class="string">"spring-cache-anno.xml"</span>);<span class="comment">// 加载 spring 配置文件</span></div><div class="line">  </div><div class="line">  AccountService s = (AccountService) context.getBean(<span class="string">"accountServiceBean"</span>); </div><div class="line">  </div><div class="line">  Account account = s.getAccountByName(<span class="string">"someone"</span>); </div><div class="line">  account.setPassword(<span class="string">"123"</span>); </div><div class="line">  s.updateAccount(account); </div><div class="line">  account.setPassword(<span class="string">"321"</span>); </div><div class="line">  s.updateAccount(account); </div><div class="line">  account = s.getAccountByName(<span class="string">"someone"</span>); </div><div class="line">  System.out.println(account.getPassword()); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上面的代码所示，我们首先用 getAccountByName 方法查询一个人 someone 的账号，这个时候会查询数据库一次，但是也记录到缓存中了。然后我们修改了密码，调用了 updateAccount 方法，这个时候会执行数据库的更新操作且记录到缓存，我们再次修改密码并调用 updateAccount 方法，然后通过 getAccountByName 方法查询，这个时候，由于缓存中已经有数据，所以不会查询数据库，而是直接返回最新的数据，所以打印的密码应该是“321”</p>
<h5 id="清单-22-运行结果"><a href="#清单-22-运行结果" class="headerlink" title="清单 22. 运行结果"></a>清单 22. 运行结果</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">real querying db...someone </div><div class="line">real updating db...someone </div><div class="line">real updating db...someone </div><div class="line"><span class="number">321</span></div></pre></td></tr></table></figure>
<p>和分析的一样，只查询了一次数据库，更新了两次数据库，最终的结果是最新的密码。说明 @CachePut 确实可以保证方法被执行，且结果一定会被缓存。</p>
<h3 id="Cacheable、-CachePut、-CacheEvict-注释介绍"><a href="#Cacheable、-CachePut、-CacheEvict-注释介绍" class="headerlink" title="@Cacheable、@CachePut、@CacheEvict 注释介绍"></a>@Cacheable、@CachePut、@CacheEvict 注释介绍</h3><p>通过上面的例子，我们可以看到 spring cache 主要使用两个注释标签，即 @Cacheable、@CachePut 和 @CacheEvict，我们总结一下其作用和配置方法。</p>
<h5 id="表-1-Cacheable-作用和配置方法"><a href="#表-1-Cacheable-作用和配置方法" class="headerlink" title="表 1. @Cacheable 作用和配置方法"></a>表 1. @Cacheable 作用和配置方法</h5><table>
<thead>
<tr>
<th><strong>@Cacheable 的作用</strong></th>
<th>主要针对方法配置，能够根据方法的请求参数对其结果进行缓存</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>@Cacheable 主要的参数</strong></td>
</tr>
<tr>
<td>value</td>
<td>缓存的名称，在 spring 配置文件中定义，必须指定至少一个</td>
<td>例如：</td>
</tr>
</tbody>
</table>
<p>@Cacheable(value=”mycache”) 或者<br>@Cacheable(value={”cache1”,”cache2”} |<br>| key | 缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合 | 例如：<br>@Cacheable(value=”testcache”,key=”#userName”) |<br>| condition | 缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存 | 例如：<br>@Cacheab |</p>
<h5 id="表-2-CachePut-作用和配置方法"><a href="#表-2-CachePut-作用和配置方法" class="headerlink" title="表 2. @CachePut 作用和配置方法"></a>表 2. @CachePut 作用和配置方法</h5><table>
<thead>
<tr>
<th><strong>@CachePut 的作用</strong></th>
<th>主要针对方法配置，能够根据方法的请求参数对其结果进行缓存，和 @Cacheable 不同的是，它每次都会触发真实方法的调用</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>@CachePut 主要的参数</strong></td>
</tr>
<tr>
<td>value</td>
<td>缓存的名称，在 spring 配置文件中定义，必须指定至少一个</td>
<td>例如：</td>
</tr>
</tbody>
</table>
<p>@Cacheable(value=”mycache”) 或者<br>@Cacheable(value={”cache1”,”cache2”} |<br>| key | 缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合 | 例如：<br>@Cacheable(value=”testcache”,key=”#userName”) |<br>| condition | 缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存 | 例如：<br>@Cacheable(value=”testcache”,condition=”#userName.length()&gt;2”) |</p>
<h5 id="表-3-CacheEvict-作用和配置方法"><a href="#表-3-CacheEvict-作用和配置方法" class="headerlink" title="表 3. @CacheEvict 作用和配置方法"></a>表 3. @CacheEvict 作用和配置方法</h5><table>
<thead>
<tr>
<th><strong>@CachEvict 的作用</strong></th>
<th>主要针对方法配置，能够根据一定的条件对缓存进行清空</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>@CacheEvict 主要的参数</strong></td>
</tr>
<tr>
<td>value</td>
<td>缓存的名称，在 spring 配置文件中定义，必须指定至少一个</td>
<td>例如：</td>
</tr>
</tbody>
</table>
<p>@CachEvict(value=”mycache”) 或者<br>@CachEvict(value={”cache1”,”cache2”} |<br>| key | 缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合 | 例如：<br>@CachEvict(value=”testcache”,key=”#userName”) |<br>| condition | 缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才清空缓存 | 例如：<br>@CachEvict(value=”testcache”,<br>condition=”#userName.length()&gt;2”) |<br>| allEntries | 是否清空所有缓存内容，缺省为 false，如果指定为 true，则方法调用后将立即清空所有缓存 | 例如：<br>@CachEvict(value=”testcache”,allEntries=true) |<br>| beforeInvocation | 是否在方法执行前就清空，缺省为 false，如果指定为 true，则在方法还没有执行的时候就清空缓存，缺省情况下，如果方法执行抛出异常，则不会清空缓存 | 例如：<br>@CachEvict(value=”testcache”，beforeInvocation=true) |</p>
<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>和 spring 的事务管理类似，spring cache 的关键原理就是 spring AOP，通过 spring AOP，其实现了在方法调用前、调用后获取方法的入参和返回值，进而实现了缓存的逻辑。我们来看一下下面这个图：</p>
<h5 id="图-2-原始方法调用图"><a href="#图-2-原始方法调用图" class="headerlink" title="图 2. 原始方法调用图"></a>图 2. 原始方法调用图</h5><p><img src="https://www.ibm.com/developerworks/cn/opensource/os-cn-spring-cache/image002.jpg" alt="图 2. 原始方法调用图"></p>
<p>上图显示，当客户端“Calling code”调用一个普通类 Plain Object 的 foo() 方法的时候，是直接作用在 pojo 类自身对象上的，客户端拥有的是被调用者的直接的引用。</p>
<p>而 Spring cache 利用了 Spring AOP 的动态代理技术，即当客户端尝试调用 pojo 的 foo（）方法的时候，给他的不是 pojo 自身的引用，而是一个动态生成的代理类</p>
<h5 id="图-3-动态代理调用图"><a href="#图-3-动态代理调用图" class="headerlink" title="图 3. 动态代理调用图"></a>图 3. 动态代理调用图</h5><p><img src="https://www.ibm.com/developerworks/cn/opensource/os-cn-spring-cache/image003.jpg" alt="图 3. 动态代理调用图"></p>
<p>如上图所示，这个时候，实际客户端拥有的是一个代理的引用，那么在调用 foo() 方法的时候，会首先调用 proxy 的 foo() 方法，这个时候 proxy 可以整体控制实际的 pojo.foo() 方法的入参和返回值，比如缓存结果，比如直接略过执行实际的 foo() 方法等，都是可以轻松做到的。</p>
<h2 id="扩展性"><a href="#扩展性" class="headerlink" title="扩展性"></a>扩展性</h2><p>直到现在，我们已经学会了如何使用开箱即用的 spring cache，这基本能够满足一般应用对缓存的需求，但现实总是很复杂，当你的用户量上去或者性能跟不上，总需要进行扩展，这个时候你或许对其提供的内存缓存不满意了，因为其不支持高可用性，也不具备持久化数据能力，这个时候，你就需要自定义你的缓存方案了，还好，spring 也想到了这一点。</p>
<p>我们先不考虑如何持久化缓存，毕竟这种第三方的实现方案很多，我们要考虑的是，怎么利用 spring 提供的扩展点实现我们自己的缓存，且在不改原来已有代码的情况下进行扩展。</p>
<p>首先，我们需要提供一个 CacheManager 接口的实现，这个接口告诉 spring 有哪些 cache 实例，spring 会根据 cache 的名字查找 cache 的实例。另外还需要自己实现 Cache 接口，Cache 接口负责实际的缓存逻辑，例如增加键值对、存储、查询和清空等。利用 Cache 接口，我们可以对接任何第三方的缓存系统，例如 EHCache、OSCache，甚至一些内存数据库例如 memcache 或者 h2db 等。下面我举一个简单的例子说明如何做。</p>
<h5 id="清单-23-MyCacheManager"><a href="#清单-23-MyCacheManager" class="headerlink" title="清单 23. MyCacheManager"></a>清单 23. MyCacheManager</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cacheOfAnno; </div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.Collection; </div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.springframework.cache.support.AbstractCacheManager; </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCacheManager</span> <span class="keyword">extends</span> <span class="title">AbstractCacheManager</span> </span>&#123; </div><div class="line">  <span class="keyword">private</span> Collection&lt;? extends MyCache&gt; caches; </div><div class="line">  </div><div class="line">  <span class="comment">/** </span></div><div class="line"><span class="comment">  * Specify the collection of Cache instances to use for this CacheManager. </span></div><div class="line"><span class="comment">  */</span> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCaches</span><span class="params">(Collection&lt;? extends MyCache&gt; caches)</span> </span>&#123; </div><div class="line">    <span class="keyword">this</span>.caches = caches; </div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="meta">@Override</span> </div><div class="line">  <span class="keyword">protected</span> Collection&lt;? extends MyCache&gt; loadCaches() &#123; </div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.caches; </div><div class="line">  &#125; </div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的自定义的 CacheManager 实际继承了 spring 内置的 AbstractCacheManager，实际上仅仅管理 MyCache 类的实例。</p>
<h5 id="清单-24-MyCache"><a href="#清单-24-MyCache" class="headerlink" title="清单 24. MyCache"></a>清单 24. MyCache</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cacheOfAnno; </div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.HashMap; </div><div class="line"><span class="keyword">import</span> java.util.Map; </div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.springframework.cache.Cache; </div><div class="line"><span class="keyword">import</span> org.springframework.cache.support.SimpleValueWrapper; </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123; </div><div class="line">  <span class="keyword">private</span> String name; </div><div class="line">  <span class="keyword">private</span> Map&lt;String,Account&gt; store = <span class="keyword">new</span> HashMap&lt;String,Account&gt;();; </div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyCache</span><span class="params">()</span> </span>&#123; </div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyCache</span><span class="params">(String name)</span> </span>&#123; </div><div class="line">    <span class="keyword">this</span>.name = name; </div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  <span class="meta">@Override</span> </div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">return</span> name; </div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; </div><div class="line">    <span class="keyword">this</span>.name = name; </div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="meta">@Override</span> </div><div class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">getNativeCache</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">return</span> store; </div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="meta">@Override</span> </div><div class="line">  <span class="function"><span class="keyword">public</span> ValueWrapper <span class="title">get</span><span class="params">(Object key)</span> </span>&#123; </div><div class="line">    ValueWrapper result = <span class="keyword">null</span>; </div><div class="line">    Account thevalue = store.get(key); </div><div class="line">    <span class="keyword">if</span>(thevalue!=<span class="keyword">null</span>) &#123; </div><div class="line">      thevalue.setPassword(<span class="string">"from mycache:"</span>+name); </div><div class="line">      result = <span class="keyword">new</span> SimpleValueWrapper(thevalue); </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> result; </div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="meta">@Override</span> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Object key, Object value)</span> </span>&#123; </div><div class="line">    Account thevalue = (Account)value; </div><div class="line">    store.put((String)key, thevalue); </div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="meta">@Override</span> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evict</span><span class="params">(Object key)</span> </span>&#123; </div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="meta">@Override</span> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123; </div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的自定义缓存只实现了很简单的逻辑，但这是我们自己做的，也很令人激动是不是，主要看 get 和 put 方法，其中的 get 方法留了一个后门，即所有的从缓存查询返回的对象都将其 password 字段设置为一个特殊的值，这样我们等下就能演示“我们的缓存确实在起作用！”了。</p>
<p>这还不够，spring 还不知道我们写了这些东西，需要通过 spring*.xml 配置文件告诉它</p>
<h5 id="清单-25-Spring-cache-anno-xml"><a href="#清单-25-Spring-cache-anno-xml" class="headerlink" title="清单 25. Spring-cache-anno.xml"></a>清单 25. Spring-cache-anno.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag"> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">  <span class="attr">xmlns:cache</span>=<span class="string">"http://www.springframework.org/schema/cache"</span></span></div><div class="line"><span class="tag">  <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span> </span></div><div class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></div><div class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/cache </span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/cache/spring-cache.xsd"</span>&gt;</span> </div><div class="line">    </div><div class="line">  <span class="tag">&lt;<span class="name">cache:annotation-driven</span> /&gt;</span> </div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountServiceBean"</span> <span class="attr">class</span>=<span class="string">"cacheOfAnno.AccountService"</span>/&gt;</span> </div><div class="line"> </div><div class="line">   <span class="comment">&lt;!-- generic cache manager --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManager"</span> <span class="attr">class</span>=<span class="string">"cacheOfAnno.MyCacheManager"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"caches"</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">set</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">bean</span></span></div><div class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"cacheOfAnno.MyCache"</span></span></div><div class="line"><span class="tag">          <span class="attr">p:name</span>=<span class="string">"accountCache"</span> /&gt;</span> </div><div class="line">      <span class="tag">&lt;/<span class="name">set</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意上面配置文件的黑体字，这些配置说明了我们的 cacheManager 和我们自己的 cache 实例。</p>
<p>好，什么都不说，测试！</p>
<h5 id="清单-26-Main-java"><a href="#清单-26-Main-java" class="headerlink" title="清单 26. Main.java"></a>清单 26. Main.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">  ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext( </div><div class="line">     <span class="string">"spring-cache-anno.xml"</span>);<span class="comment">// 加载 spring 配置文件</span></div><div class="line">  </div><div class="line">  AccountService s = (AccountService) context.getBean(<span class="string">"accountServiceBean"</span>); </div><div class="line">  </div><div class="line">  Account account = s.getAccountByName(<span class="string">"someone"</span>); </div><div class="line">  System.out.println(<span class="string">"passwd="</span>+account.getPassword()); </div><div class="line">  account = s.getAccountByName(<span class="string">"someone"</span>); </div><div class="line">  System.out.println(<span class="string">"passwd="</span>+account.getPassword()); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的测试代码主要是先调用 getAccountByName 进行一次查询，这会调用数据库查询，然后缓存到 mycache 中，然后我打印密码，应该是空的；下面我再次查询 someone 的账号，这个时候会从 mycache 中返回缓存的实例，记得上面的后门么？我们修改了密码，所以这个时候打印的密码应该是一个特殊的值</p>
<h5 id="清单-27-运行结果"><a href="#清单-27-运行结果" class="headerlink" title="清单 27. 运行结果"></a>清单 27. 运行结果</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">real querying db...someone </div><div class="line">passwd=<span class="keyword">null</span> </div><div class="line">passwd=from mycache:accountCache</div></pre></td></tr></table></figure>
<p>结果符合预期，即第一次查询数据库，且密码为空，第二次打印了一个特殊的密码。说明我们的 myCache 起作用了。</p>
<h2 id="注意和限制"><a href="#注意和限制" class="headerlink" title="注意和限制"></a>注意和限制</h2><h3 id="基于-proxy-的-spring-aop-带来的内部调用问题"><a href="#基于-proxy-的-spring-aop-带来的内部调用问题" class="headerlink" title="基于 proxy 的 spring aop 带来的内部调用问题"></a>基于 proxy 的 spring aop 带来的内部调用问题</h3><p>上面介绍过 spring cache 的原理，即它是基于动态生成的 proxy 代理机制来对方法的调用进行切面，这里关键点是对象的引用问题，如果对象的方法是内部调用（即 this 引用）而不是外部引用，则会导致 proxy 失效，那么我们的切面就失效，也就是说上面定义的各种注释包括 @Cacheable、@CachePut 和 @CacheEvict 都会失效，我们来演示一下。</p>
<h5 id="清单-28-AccountService-java"><a href="#清单-28-AccountService-java" class="headerlink" title="清单 28. AccountService.java"></a>清单 28. AccountService.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">getAccountByName2</span><span class="params">(String userName)</span> </span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.getAccountByName(userName); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="meta">@Cacheable</span>(value=<span class="string">"accountCache"</span>)<span class="comment">// 使用了一个缓存名叫 accountCache </span></div><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">getAccountByName</span><span class="params">(String userName)</span> </span>&#123; </div><div class="line">  <span class="comment">// 方法内部实现不考虑缓存逻辑，直接实现业务</span></div><div class="line">  <span class="keyword">return</span> getFromDB(userName); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面我们定义了一个新的方法 getAccountByName2，其自身调用了 getAccountByName 方法，这个时候，发生的是内部调用（this），所以没有走 proxy，导致 spring cache 失效</p>
<h5 id="清单-29-Main-java"><a href="#清单-29-Main-java" class="headerlink" title="清单 29. Main.java"></a>清单 29. Main.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">  ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext( </div><div class="line">     <span class="string">"spring-cache-anno.xml"</span>);<span class="comment">// 加载 spring 配置文件</span></div><div class="line">  </div><div class="line">  AccountService s = (AccountService) context.getBean(<span class="string">"accountServiceBean"</span>); </div><div class="line">  </div><div class="line">  s.getAccountByName2(<span class="string">"someone"</span>); </div><div class="line">  s.getAccountByName2(<span class="string">"someone"</span>); </div><div class="line">  s.getAccountByName2(<span class="string">"someone"</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="清单-30-运行结果"><a href="#清单-30-运行结果" class="headerlink" title="清单 30. 运行结果"></a>清单 30. 运行结果</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">real querying db...someone </div><div class="line">real querying db...someone </div><div class="line">real querying db...someone</div></pre></td></tr></table></figure>
<p>可见，结果是每次都查询数据库，缓存没起作用。要避免这个问题，就是要避免对缓存方法的内部调用，或者避免使用基于 proxy 的 AOP 模式，可以使用基于 aspectJ 的 AOP 模式来解决这个问题。</p>
<h3 id="CacheEvict-的可靠性问题"><a href="#CacheEvict-的可靠性问题" class="headerlink" title="@CacheEvict 的可靠性问题"></a>@CacheEvict 的可靠性问题</h3><p>我们看到，@CacheEvict 注释有一个属性 beforeInvocation，缺省为 false，即缺省情况下，都是在实际的方法执行完成后，才对缓存进行清空操作。期间如果执行方法出现异常，则会导致缓存清空不被执行。我们演示一下</p>
<h5 id="清单-31-AccountService-java"><a href="#清单-31-AccountService-java" class="headerlink" title="清单 31. AccountService.java"></a>清单 31. AccountService.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@CacheEvict</span>(value=<span class="string">"accountCache"</span>,allEntries=<span class="keyword">true</span>)<span class="comment">// 清空 accountCache 缓存</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reload</span><span class="params">()</span> </span>&#123; </div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意上面的代码，我们在 reload 的时候抛出了运行期异常，这会导致清空缓存失败。</p>
<h5 id="清单-32-Main-java"><a href="#清单-32-Main-java" class="headerlink" title="清单 32. Main.java"></a>清单 32. Main.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">  ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext( </div><div class="line">     <span class="string">"spring-cache-anno.xml"</span>);<span class="comment">// 加载 spring 配置文件</span></div><div class="line">  </div><div class="line">  AccountService s = (AccountService) context.getBean(<span class="string">"accountServiceBean"</span>); </div><div class="line">  </div><div class="line">  s.getAccountByName(<span class="string">"someone"</span>); </div><div class="line">  s.getAccountByName(<span class="string">"someone"</span>); </div><div class="line">  <span class="keyword">try</span> &#123; </div><div class="line">    s.reload(); </div><div class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123; </div><div class="line">  &#125; </div><div class="line">  s.getAccountByName(<span class="string">"someone"</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的测试代码先查询了两次，然后 reload，然后再查询一次，结果应该是只有第一次查询走了数据库，其他两次查询都从缓存，第三次也走缓存因为 reload 失败了。</p>
<h5 id="清单-33-运行结果"><a href="#清单-33-运行结果" class="headerlink" title="清单 33. 运行结果"></a>清单 33. 运行结果</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">real querying db...someone</div></pre></td></tr></table></figure>
<p>和预期一样。那么我们如何避免这个问题呢？我们可以用 @CacheEvict 注释提供的 beforeInvocation 属性，将其设置为 true，这样，在方法执行前我们的缓存就被清空了。可以确保缓存被清空。</p>
<h5 id="清单-34-AccountService-java"><a href="#清单-34-AccountService-java" class="headerlink" title="清单 34. AccountService.java"></a>清单 34. AccountService.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@CacheEvict</span>(value=<span class="string">"accountCache"</span>,allEntries=<span class="keyword">true</span>,beforeInvocation=<span class="keyword">true</span>)</div><div class="line"><span class="comment">// 清空 accountCache 缓存</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reload</span><span class="params">()</span> </span>&#123; </div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意上面的代码，我们在 @CacheEvict 注释中加了 beforeInvocation 属性，确保缓存被清空。</p>
<p>执行相同的测试代码</p>
<h5 id="清单-35-运行结果"><a href="#清单-35-运行结果" class="headerlink" title="清单 35. 运行结果"></a>清单 35. 运行结果</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">real querying db...someone </div><div class="line">real querying db...someone</div></pre></td></tr></table></figure>
<p>这样，第一次和第三次都从数据库取数据了，缓存清空有效。</p>
<h3 id="非-public-方法问题"><a href="#非-public-方法问题" class="headerlink" title="非 public 方法问题"></a>非 public 方法问题</h3><p>和内部调用问题类似，非 public 方法如果想实现基于注释的缓存，必须采用基于 AspectJ 的 AOP 机制，这里限于篇幅不再细述。</p>
<h2 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h2><h3 id="Dummy-CacheManager-的配置和作用"><a href="#Dummy-CacheManager-的配置和作用" class="headerlink" title="Dummy CacheManager 的配置和作用"></a>Dummy CacheManager 的配置和作用</h3><p>有的时候，我们在代码迁移、调试或者部署的时候，恰好没有 cache 容器，比如 memcache 还不具备条件，h2db 还没有装好等，如果这个时候你想调试代码，岂不是要疯掉？这里有一个办法，在不具备缓存条件的时候，在不改代码的情况下，禁用缓存。</p>
<p>方法就是修改 spring*.xml 配置文件，设置一个找不到缓存就不做任何操作的标志位，如下</p>
<h5 id="清单-36-Spring-cache-anno-xml"><a href="#清单-36-Spring-cache-anno-xml" class="headerlink" title="清单 36. Spring-cache-anno.xml"></a>清单 36. Spring-cache-anno.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">  <span class="attr">xmlns:cache</span>=<span class="string">"http://www.springframework.org/schema/cache"</span></span></div><div class="line"><span class="tag">  <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span> </span></div><div class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></div><div class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/cache </span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/cache/spring-cache.xsd"</span>&gt;</span> </div><div class="line">    </div><div class="line">  <span class="tag">&lt;<span class="name">cache:annotation-driven</span> /&gt;</span> </div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountServiceBean"</span> <span class="attr">class</span>=<span class="string">"cacheOfAnno.AccountService"</span>/&gt;</span> </div><div class="line"> </div><div class="line">   <span class="comment">&lt;!-- generic cache manager --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"simpleCacheManager"</span></span></div><div class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"org.springframework.cache.support.SimpleCacheManager"</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"caches"</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">set</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">bean</span></span></div><div class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"</span></span></div><div class="line"><span class="tag">          <span class="attr">p:name</span>=<span class="string">"default"</span> /&gt;</span> </div><div class="line">      <span class="tag">&lt;/<span class="name">set</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </div><div class="line">  </div><div class="line">  <span class="comment">&lt;!-- dummy cacheManager  --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManager"</span></span></div><div class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"org.springframework.cache.support.CompositeCacheManager"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManagers"</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">list</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"simpleCacheManager"</span> /&gt;</span> </div><div class="line">      <span class="tag">&lt;/<span class="name">list</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"fallbackToNoOpCache"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意以前的 cacheManager 变为了 simpleCacheManager，且没有配置 accountCache 实例，后面的 cacheManager 的实例是一个 CompositeCacheManager，他利用了前面的 simpleCacheManager 进行查询，如果查询不到，则根据标志位 fallbackToNoOpCache 来判断是否不做任何缓存操作。</p>
<h5 id="清单-37-运行结果"><a href="#清单-37-运行结果" class="headerlink" title="清单 37. 运行结果"></a>清单 37. 运行结果</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">real querying db...someone </div><div class="line">real querying db...someone </div><div class="line">real querying db...someone</div></pre></td></tr></table></figure>
<p>可以看出，缓存失效。每次都查询数据库。因为我们没有配置它需要的 accountCache 实例。</p>
<p>如果将上面 xml 配置文件的 fallbackToNoOpCache 设置为 false，再次运行，则会得到</p>
<h5 id="清单-38-运行结果"><a href="#清单-38-运行结果" class="headerlink" title="清单 38. 运行结果"></a>清单 38. 运行结果</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Exception in thread <span class="string">"main"</span> java.lang.IllegalArgumentException: </div><div class="line">  Cannot find cache named [accountCache] <span class="keyword">for</span> CacheableOperation </div><div class="line">    [<span class="keyword">public</span> cacheOfAnno.Account </div><div class="line">    cacheOfAnno.AccountService.getAccountByName(java.lang.String)]</div><div class="line">    caches=[accountCache] | condition=<span class="string">''</span> | key=<span class="string">''</span></div></pre></td></tr></table></figure>
<p>可见，在找不到 accountCache，且没有将 fallbackToNoOpCache 设置为 true 的情况下，系统会抛出异常。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>总之，注释驱动的 spring cache 能够极大的减少我们编写常见缓存的代码量，通过少量的注释标签和配置文件，即可达到使代码具备缓存的能力。且具备很好的灵活性和扩展性。但是我们也应该看到，spring cache 由于急于 spring AOP 技术，尤其是动态的 proxy 技术，导致其不能很好的支持方法的内部调用或者非 public 方法的缓存设置，当然这都是可以解决的问题，通过学习这个技术，我们能够认识到，AOP 技术的应用还是很广泛的，如果有兴趣，我相信你也能基于 AOP 实现自己的缓存方案。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://jinnianshilongnian.iteye.com/blog/2001040" target="_blank" rel="external">Spring Cache抽象</a></p>
<p><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-spring-cache/" target="_blank" rel="external">注释驱动的 Spring cache 缓存介绍</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缓存简介&quot;&gt;&lt;a href=&quot;#缓存简介&quot; class=&quot;headerlink&quot; title=&quot;缓存简介&quot;&gt;&lt;/a&gt;缓存简介&lt;/h2&gt;&lt;p&gt;缓存，我的理解是：让数据更接近于使用者；工作机制是：先从缓存中读取数据，如果没有再从慢速设备上读取实际数据（数据也会存入缓存）；缓存什么：那些经常读取且不经常修改的数据/那些昂贵（CPU/IO）的且对于相同的请求有相同的计算结果的数据。如CPU–L1/L2–内存–磁盘就是一个典型的例子，CPU需要数据时先从L1/L2中读取，如果没有到内存中找，如果还没有会到磁盘上找。还有如用过Maven的朋友都应该知道，我们找依赖的时候，先从本机仓库找，再从本地服务器仓库找，最后到远程仓库服务器找；还有如京东的物流为什么那么快？他们在各个地都有分仓库，如果该仓库有货物那么送货的速度是非常快的。&lt;/p&gt;
&lt;h2 id=&quot;缓存命中率&quot;&gt;&lt;a href=&quot;#缓存命中率&quot; class=&quot;headerlink&quot; title=&quot;缓存命中率&quot;&gt;&lt;/a&gt;缓存命中率&lt;/h2&gt;&lt;p&gt;即从缓存中读取数据的次数 与 总读取次数的比率，命中率越高越好：&lt;/p&gt;
&lt;p&gt;命中率 = 从缓存中读取次数 / (总读取次数[从缓存中读取次数 + 从慢速设备上读取的次数])&lt;/p&gt;
&lt;p&gt;Miss率 = 没有从缓存中读取的次数 / (总读取次数[从缓存中读取次数 + 从慢速设备上读取的次数])&lt;/p&gt;
&lt;p&gt;这是一个非常重要的监控指标，如果做缓存一定要健康这个指标来看缓存是否工作良好；&lt;/p&gt;
    
    </summary>
    
    
      <category term="cache" scheme="maode.github.io/tags/cache/"/>
    
      <category term="缓存" scheme="maode.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>【转】BAT批处理脚本教程</title>
    <link href="maode.github.io/2018/02/18/180218-BAT-tutorial/"/>
    <id>maode.github.io/2018/02/18/180218-BAT-tutorial/</id>
    <published>2018-02-18T10:36:47.000Z</published>
    <updated>2018-02-21T11:16:43.054Z</updated>
    
    <content type="html"><![CDATA[<p><strong>转自：</strong> <a href="http://xiangkg.blog.163.com/blog" target="_blank" rel="external">http://xiangkg.blog.163.com/blog</a></p>
<p><a href="#前言">前言</a></p>
<h2 id="第一章-批处理基础"><a href="#第一章-批处理基础" class="headerlink" title="第一章 批处理基础"></a>第一章 批处理基础</h2><p>批处理定义：顾名思义，批处理文件是将一系列命令按一定的顺序集合为一个可执行的文本文件，其扩展名为BAT或者CMD。这些命令统称批处理命令。</p>
<p>小知识：可以在键盘上按下Ctrl+C组合键来强行终止一个批处理的执行过程。</p>
<p>了解了大概意思后,我们正式开始学习.先看一个简单的例子!<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">echo</span> "欢迎来到非常BAT!"</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>把上面的3条命令保存为文件test.bat或者test.cmd然后执行,<br>他就会在屏幕上显示以下二行话<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">欢迎来到非常BAT!</div><div class="line">请按任意键继续. . .</div></pre></td></tr></table></figure></p>
<p>这就是一个简单批处理文件了，这个批处理文件一共就用了2条命令 “echo” 和”pause” 还有一个特殊符号”@”</p>
<p>从上面这个简单的批处理中,我们可以发现其实批处理就是运用一些含有特殊意义的符号和一些完成指定功能的命令组合而成,那么在批处理中有多少这样的特殊符号和功能命令呢？我们现在就来仔细了解一下一些最常用的!</p>
<p>(以下内容来源网络,请各位仔细阅读,好进入下节的实例说明)</p>
<a id="more"></a>
<h3 id="第一节-常用批处理内部命令简介"><a href="#第一节-常用批处理内部命令简介" class="headerlink" title="第一节 常用批处理内部命令简介"></a>第一节 常用批处理内部命令简介</h3><h4 id="REM-和"><a href="#REM-和" class="headerlink" title="REM 和 ::"></a>REM 和 <code>::</code></h4><p>REM为注释命令，一般用来给程序加上注解，该命令后的内容不被执行，但能回显。</p>
<p><code>::</code> 也可以起注释作用, 而且更简洁有效; 但有两点需要注意：</p>
<ol>
<li>任何以冒号<code>:</code>开头的字符行, 在批处理中都被视作标号, 而直接忽略其后的所有内容。而标号分为有效和无效两种。<br>有效标号：冒号后紧跟一个以字母数字开头的字符串，goto语句可以识别。<br>无效标号：冒号后紧跟一个非字母数字的一个特殊符号，goto无法识别的标号。</li>
</ol>
<p>无效可以起到注释作用，所以 <code>::</code> 常被用作注释符号，其实 <code>:+</code> 也可起注释作用。</p>
<ol>
<li>与<code>rem</code>不同的是, <code>::</code>后的字符行在执行时不会回显, 无论是否用echo on打开命令行回显状态, 因为命令解释器不认为他是一个有效的命令行, 就此点来看, rem 在某些场合下将比 <code>::</code> 更为适用; 另外, rem 可以用于 config.sys 文件中。</li>
</ol>
<p>行内注释格式：%注释内容%  （不常用，容易引起语法错误，慎用少用）</p>
<h4 id="ECHO-和"><a href="#ECHO-和" class="headerlink" title="ECHO 和 @"></a>ECHO 和 @</h4><p>@字符放在命令前将关闭该命令回显，无论此时echo是否为打开状态。</p>
<p>echo命令的作用列举如下：</p>
<p>（1）打开回显或关闭回显功能</p>
<p> 格式：echo [{ on|off }]<br>如果想关闭“ECHO OFF”命令行自身的显示，则需要在该命令行前加上“@”。</p>
<p>（2）显示当前ECHO设置状态<br> 格式：echo</p>
<p>（3）输出提示信息</p>
<pre><code>格式：ECHO 信息内容
</code></pre><p>上述是ECHO命令常见的三种用法，也是大家熟悉和会用的，但作为DOS命令淘金者你还应该知道下面的技巧：</p>
<p>（4）关闭DOS命令提示符<br>在DOS提示符状态下键入ECHO OFF，能够关闭DOS提示符的显示使屏幕只留下光标，直至键入ECHO ON，提示符才会重新出现。</p>
<p>（5）输出空行，即相当于输入一个回车</p>
<pre><code>格式：ECHO．
</code></pre><p>值得注意的是命令行中的“．”要紧跟在ECHO后面中间不能有空格，否则“．”将被当作提示信息输出到屏幕。另外“．”可以用 <code>,:;&quot;/[\]+</code> 等任一符号替代。</p>
<p>命令ECHO．输出的回车，经DOS管道转向可以作为其它命令的输入，比如echo.|time即相当于在TIME命令执行后给出一个回车。所以执行时系统会在显示当前时间后，自动返回到DOS提示符状态</p>
<p>（6）答复命令中的提问</p>
<pre><code>格式：ECHO 答复语|命令文件名
</code></pre><p>上述格式可以用于简化一些需要人机对话的命令（如：<code>CHKDSK／F；FORMAT Drive:；del *.*</code>）的操作，它是通过DOS管道命令把ECHO命令输出的预置答复语作为人机对话命令的输入。下面的例子就相当于在调用的命令出现人机对话时输入“Y”回车：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">C:&gt;<span class="title">ECHO</span> <span class="title">Y</span>|<span class="title">CHKDSK</span>/<span class="title">F</span></span></div><div class="line"><span class="function"><span class="title">C</span>:&gt;<span class="title">ECHO</span> <span class="title">Y</span>|<span class="title">DEL</span> <span class="title">A</span> :*.*</span></div></pre></td></tr></table></figure></p>
<p>（7）建立新文件或增加文件内容</p>
<p>格式：ECHO 文件内容&gt;文件名<br>      ECHO 文件内容&gt;&gt;文件名</p>
<p>例如：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">C:&gt;<span class="title">ECHO</span> @<span class="title">ECHO</span> <span class="title">OFF</span>&gt;<span class="title">AUTOEXEC.BAT</span> 建立自动批处理文件</span></div><div class="line"><span class="function"><span class="title">C</span>:&gt;<span class="title">ECHO</span> <span class="title">C</span>:\<span class="title">CPAV</span>\<span class="title">BOOTSAFE</span>&gt;&gt;<span class="title">AUTOEXEC.BAT</span> 向自动批处理文件中追加内容</span></div></pre></td></tr></table></figure></p>
<p>（8）向打印机输出打印内容或打印控制码</p>
<p>格式：ECHO 打印机控制码&gt;PRN</p>
<pre><code>ECHO 打印内容&gt;PRN
</code></pre><p>用得很少，了解就可以了</p>
<p>下面的例子是向M－1724打印机输入打印控制码。＜Alt＞156是按住Alt键在小键盘键入156，类似情况依此类推：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function">C:&gt;<span class="title">ECHO</span> +156+42+116&gt;<span class="title">PRN</span>（输入下划线命令<span class="title">FS</span>＊<span class="title">t</span>）</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="title">C</span>:&gt;<span class="title">ECHO</span> [<span class="title">PRN</span>"&gt;+155@&gt;<span class="title">PRN</span>](<span class="title">mailto</span>:+155@)（输入初始化命令<span class="title">ESC</span>@）</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="title">C</span>:&gt;<span class="title">ECHO</span>.&gt;<span class="title">PRN</span>（换行）</span></div></pre></td></tr></table></figure></p>
<p>（9）使喇叭鸣响<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">C:&gt;<span class="title">ECHO</span> ^<span class="title">G</span></span></div></pre></td></tr></table></figure></p>
<p>“^G”是在dos窗口中用Ctrl＋G或Alt＋007输入，输入多个^G可以产生多声鸣响。使用方法是直接将其加入批处理文件中或做成批处理文件调用。<br>这里的“^G”属于特殊符号的使用，请看本文后面的章节</p>
<h4 id="PAUSE-暂停"><a href="#PAUSE-暂停" class="headerlink" title="PAUSE 暂停"></a>PAUSE 暂停</h4><p>   PAUSE，玩游戏的人都知道，暂停的意思<br>   在这里就是停止系统命令的执行并显示下面的内容。</p>
<p>例：<br><code>C:&gt;PAUSE</code></p>
<p>运行显示：<br><code>请按任意键继续. . .</code></p>
<p>要显示其他提示语，可以这样用：<br><code>Echo 其他提示语 &amp; pause &gt; nul</code></p>
<h4 id="errorlevel-程序返回码"><a href="#errorlevel-程序返回码" class="headerlink" title="errorlevel  程序返回码"></a>errorlevel  程序返回码</h4><p>echo %errorlevel%<br>每个命令运行结束，可以用这个命令行格式查看返回码<br>用于判断刚才的命令是否执行成功<br>默认值为0，一般命令执行出错会设 errorlevel 为1</p>
<h4 id="title-设置cmd窗口的标题"><a href="#title-设置cmd窗口的标题" class="headerlink" title="title 设置cmd窗口的标题"></a>title 设置cmd窗口的标题</h4><p>设置cmd窗口的标题，批处理编程常用。<br>title 新标题        #可以看到cmd窗口的标题栏变了</p>
<h4 id="COLOR-设置cmd窗口前景和背景颜色"><a href="#COLOR-设置cmd窗口前景和背景颜色" class="headerlink" title="COLOR 设置cmd窗口前景和背景颜色"></a>COLOR 设置cmd窗口前景和背景颜色</h4><p>设置默认的控制台前景和背景颜色。批处理编程常用。</p>
<p>COLOR [attr]</p>
<p>  attr        指定控制台输出的颜色属性</p>
<p>颜色属性由两个十六进制数字指定 – 第一个为背景，第二个则为<br>前景。每个数字可以为以下任何值之一：</p>
<pre><code>0 = 黑色       8 = 灰色
1 = 蓝色       9 = 淡蓝色
2 = 绿色       A = 淡绿色
3 = 湖蓝色     B = 淡浅绿色
4 = 红色       C = 淡红色
5 = 紫色       D = 淡紫色
6 = 黄色       E = 淡黄色
7 = 白色       F = 亮白色
</code></pre><p>如果没有给定任何参数，该命令会将颜色还原到 CMD.EXE 启动时<br>的颜色。这个值来自当前控制台窗口. /T 开关或<br>DefaultColor 注册表值。</p>
<p>如果用相同的前景和背景颜色来执行 COLOR 命令，COLOR 命令<br>会将 ERRORLEVEL 设置为 1。</p>
<p>例如： “COLOR fc” 在亮白色上产生亮红色</p>
<h4 id="mode-配置系统设备"><a href="#mode-配置系统设备" class="headerlink" title="mode 配置系统设备"></a>mode 配置系统设备</h4><p>配置系统设备。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">串行口:　　　     MODE COMm[:] [BAUD=b] [PARITY=p] [DATA=d] [STOP=s]</div><div class="line">                                [to=on|off] [xon=on|off] [odsr=on|off]</div><div class="line">                                [octs=on|off] [dtr=on|off|hs]</div><div class="line">                                [rts=on|off|hs|tg] [idsr=on|off]</div><div class="line"></div><div class="line">设备状态:      MODE [device] [/STATUS]</div><div class="line"></div><div class="line">打印重定向:　　 MODE LPTn[:]=COMm[:]</div><div class="line"></div><div class="line">选定代码页:　　 MODE CON[:] CP SELECT=yyy</div><div class="line"></div><div class="line">代码页状态:　　 MODE CON[:] CP [/STATUS]</div><div class="line"></div><div class="line">显示模式:　　   MODE CON[:] [COLS=c] [LINES=n]</div><div class="line"></div><div class="line">击键率:　       MODE CON[:] [RATE=r DELAY=d]</div></pre></td></tr></table></figure></p>
<p>例：设置dos窗口和颜色<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">mode</span> <span class="built_in">con</span> cols=<span class="number">113</span> lines=<span class="number">15</span> &amp; <span class="built_in">color</span> <span class="number">9</span>f</div></pre></td></tr></table></figure></p>
<p>此命令设置DOS窗口大小：15行，113列</p>
<h4 id="GOTO-和"><a href="#GOTO-和" class="headerlink" title="GOTO 和 :"></a>GOTO 和 <code>:</code></h4><p>GOTO会点编程的朋友就会知道这是跳转的意思。<br>在批处理中允许以<code>:XXX</code>来构建一个标号，然后用<code>GOTO XXX</code>跳转到标号<code>:XXX</code>处，然后执行标号后的命令。<br>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> &#123;%<span class="number">1</span>&#125;==&#123;&#125; <span class="keyword">goto</span> noparms</div><div class="line"><span class="keyword">if</span> "%<span class="number">2</span>"=="" <span class="keyword">goto</span> noparms</div></pre></td></tr></table></figure></p>
<p>标签的名字可以随便起，但是最好是有意义的字符串啦，前加个冒号用来表示这个字符串是标签，goto命令就是根据这个冒号<code>:</code>来寻找下一步跳到到那里。最好有一些说明这样你别人看起来才会理解你的意图啊。</p>
<p>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line">:<span class="built_in">start</span></div><div class="line"><span class="built_in">set</span> /a var+=<span class="number">1</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">%var%</span></div><div class="line"><span class="keyword">if</span> <span class="variable">%var%</span> <span class="keyword">leq</span> <span class="number">3</span> <span class="keyword">GOTO</span> <span class="built_in">start</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>运行显示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td></tr></table></figure></p>
<h4 id="find-在文件中搜索字符串"><a href="#find-在文件中搜索字符串" class="headerlink" title="find 在文件中搜索字符串"></a>find 在文件中搜索字符串</h4><p>在文件中搜索字符串。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">FIND</span> [/V] [/C] [/N] [/I] [/OFF[LINE]] "string" [[drive:][<span class="built_in">path</span>]filename[ ...]]</div><div class="line"></div><div class="line">  /V        显示所有未包含指定字符串的行。</div><div class="line">  /C        仅显示包含字符串的行数。</div><div class="line">  /N        显示行号。</div><div class="line">  /I        搜索字符串时忽略大小写。</div><div class="line">  /OFF[LINE] 不要跳过具有脱机属性集的文件。</div><div class="line">  "string"  指定要搜索的文字串，</div><div class="line">  [drive:][<span class="built_in">path</span>]filename</div><div class="line">            指定要搜索的文件。</div></pre></td></tr></table></figure></p>
<p>如果没有指定路径，FIND 将搜索键入的或者由另一命令产生的文字。</p>
<p>Find常和type命令结合使用<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Type</span> [drive:][<span class="built_in">path</span>]filename | <span class="built_in">find</span> "string" [&gt;tmpfile] #挑选包含string的行</div><div class="line"><span class="built_in">Type</span> [drive:][<span class="built_in">path</span>]filename | <span class="built_in">find</span> /v "string"   #剔除文件中包含string的行</div><div class="line"><span class="built_in">Type</span> [drive:][<span class="built_in">path</span>]filename | <span class="built_in">find</span> /c   #显示文件行数</div></pre></td></tr></table></figure></p>
<p>以上用法将去除find命令自带的提示语（文件名提示）</p>
<p>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">echo</span> <span class="number">111</span> &gt;test.txt</div><div class="line"><span class="built_in">echo</span> <span class="number">222</span> &gt;&gt;test.txt</div><div class="line"><span class="built_in">find</span> "<span class="number">111</span>" test.txt</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>运行显示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">---------- TEST.TXT</div><div class="line">111</div><div class="line">请按任意键继续. . .</div><div class="line">`</div></pre></td></tr></table></figure></p>
<p>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">echo</span> <span class="number">111</span> &gt;test.txt</div><div class="line"><span class="built_in">echo</span> <span class="number">222</span> &gt;&gt;test.txt</div><div class="line"><span class="built_in">type</span> test.txt|<span class="built_in">find</span> "<span class="number">111</span>" </div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>运行显示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">111</div><div class="line">请按任意键继续. . .</div></pre></td></tr></table></figure></p>
<h4 id="start-调用外部程序并任其在新窗口自行运行"><a href="#start-调用外部程序并任其在新窗口自行运行" class="headerlink" title="start 调用外部程序并任其在新窗口自行运行"></a>start 调用外部程序并任其在新窗口自行运行</h4><p>批处理中调用外部程序的命令（该外部程序在新窗口中运行，批处理程序继续往下执行，不理会外部程序的运行状况），如果直接运行外部程序则必须等外部程序完成后才继续执行剩下的指令</p>
<p>例：<code>start explorer d:\</code><br>调用图形界面打开D盘</p>
<h4 id="assoc-和-ftype"><a href="#assoc-和-ftype" class="headerlink" title="assoc 和 ftype"></a>assoc 和 ftype</h4><p>文件关联，不常用。<br>assoc 设置’文件扩展名’关联，关联到’文件类型’<br>ftype 设置’文件类型’关联，关联到’执行程序和参数’<br>当你双击一个.txt文件时，windows并不是根据.txt直接判断用 notepad.exe 打开<br>而是先判断.txt属于 txtfile ‘文件类型’<br>再调用 txtfile 关联的命令行 txtfile=%SystemRoot%\system32\NOTEPAD.EXE %1<br>可以在”文件夹选项”→”文件类型”里修改这2种关联<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">assoc           #显示所有&apos;文件扩展名&apos;关联</div><div class="line">assoc .txt      #显示.txt代表的&apos;文件类型&apos;，结果显示 .txt=txtfile</div><div class="line">assoc .doc      #显示.doc代表的&apos;文件类型&apos;，结果显示 .doc=Word.Document.8</div><div class="line">assoc .exe      #显示.exe代表的&apos;文件类型&apos;，结果显示 .exe=exefile</div><div class="line">ftype           #显示所有&apos;文件类型&apos;关联</div><div class="line">ftype exefile   #显示exefile类型关联的命令行，结果显示 exefile=&quot;%1&quot; %*</div></pre></td></tr></table></figure></p>
<p><code>assoc .txt=Word.Document.8</code><br>设置.txt为word类型的文档，可以看到.txt文件的图标都变了<br><code>assoc .txt=txtfile</code><br>恢复.txt的正确关联</p>
<p><code>ftype exefile=&quot;%1&quot; %*</code><br>恢复 exefile 的正确关联<br>如果该关联已经被破坏，可以运行 command.com ，再输入这条命令</p>
<h4 id="pushd-和-popd"><a href="#pushd-和-popd" class="headerlink" title="pushd 和 popd"></a>pushd 和 popd</h4><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">PUSHD</span> [<span class="built_in">path</span> | ..] 保存当前目录，然后切换到另一个指定的目录<span class="built_in">path</span>。</div><div class="line"><span class="built_in">popd</span>  将当前目录恢复为<span class="built_in">pushd</span>命令保存的目录</div></pre></td></tr></table></figure>
<figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="function">c: &amp; <span class="title">cd</span>\ &amp; <span class="title">md</span> <span class="title">mp3</span>       #在 <span class="title">C</span>:\ 建立 <span class="title">mp3</span> 文件夹</span></div><div class="line"><span class="function"><span class="title">md</span> <span class="title">d</span>:\<span class="title">mp4</span>               #在 <span class="title">D</span>:\ 建立 <span class="title">mp4</span> 文件夹</span></div><div class="line"><span class="function"><span class="title">cd</span> /<span class="title">d</span> <span class="title">d</span>:\<span class="title">mp4</span>            #更改当前目录为 <span class="title">d</span>:\<span class="title">mp4</span>，<span class="title">cd</span>命令的/<span class="title">d</span>参数可改变盘符。</span></div><div class="line"><span class="function"><span class="title">pushd</span> <span class="title">c</span>:\<span class="title">mp3</span>            #保存当前目录，并切换当前目录为 <span class="title">c</span>:\<span class="title">mp3</span></span></div><div class="line"><span class="function"><span class="title">popd</span>                    #恢复当前目录为刚才保存的 <span class="title">d</span>:\<span class="title">mp4</span></span></div></pre></td></tr></table></figure>
<p>一般用处不大，在当前目录名不确定时，会有点帮助。（dos编程中很有用）</p>
<h4 id="CALL-调用批处理程序或命令并等待其执行完毕"><a href="#CALL-调用批处理程序或命令并等待其执行完毕" class="headerlink" title="CALL 调用批处理程序或命令并等待其执行完毕"></a>CALL 调用批处理程序或命令并等待其执行完毕</h4><p>CALL命令可以在批处理执行过程中调用另一个批处理，当另一个批处理执行完后，再继续执行原来的批处理。<br>调用一条批处理命令，和直接执行命令效果一样，特殊情况下很有用，比如变量的多级嵌套，见教程后面。在批处理编程中，可以根据一定条件生成命令字符串，用call可以执行该字符串，见例子。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CALL</span> [drive:][<span class="built_in">path</span>]filename [batch-parameters]</div></pre></td></tr></table></figure></p>
<p>调用的其它批处理程序。filename 参数必须具有 .bat 或 .cmd 扩展名。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CALL</span> :<span class="built_in">label</span> arguments</div></pre></td></tr></table></figure></p>
<p>调用本文件内命令段，相当于子程序。被调用的命令段以标签<code>:label</code>开头<br>以命令<code>goto :eof</code>结尾。</p>
<p>另外，批脚本文本参数参照(%0. %1. 等等)已如下改变：</p>
<p>批脚本里的 %* 指出所有的参数(如 %1 %2 %3 %4 %5 …)</p>
<p>批参数(%n)的替代已被增强。您可以使用以下语法：（看不明白的直接运行后面的例子）<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">%~<span class="number">1</span>         - 删除引号(")，扩充 %<span class="number">1</span></div><div class="line">%~f1        - 将 %<span class="number">1</span> 扩充到一个完全合格的路径名</div><div class="line">%~d1        - 仅将 %<span class="number">1</span> 扩充到一个驱动器号</div><div class="line">%~p1        - 仅将 %<span class="number">1</span> 扩充到一个路径</div><div class="line">%~n1        - 仅将 %<span class="number">1</span> 扩充到一个文件名</div><div class="line">%~x1        - 仅将 %<span class="number">1</span> 扩充到一个文件扩展名</div><div class="line">%~s1        - 扩充的路径指含有短名</div><div class="line">%~a1        - 将 %<span class="number">1</span> 扩充到文件属性</div><div class="line">%~t1        - 将 %<span class="number">1</span> 扩充到文件的日期/时间</div><div class="line">%~z1        - 将 %<span class="number">1</span> 扩充到文件的大小</div><div class="line">%~$<span class="built_in">PATH</span> : <span class="number">1</span> - 查找列在 <span class="built_in">PATH</span> 环境变量的目录，并将 %<span class="number">1</span></div><div class="line">              扩充到找到的第一个完全合格的名称。如果环境</div><div class="line">              变量名未被定义，或者没有找到文件，此组合键会</div><div class="line">              扩充到空字符串</div></pre></td></tr></table></figure></p>
<p>可以组合修定符来取得多重结果：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">%~dp1       - 只将 %<span class="number">1</span> 扩展到驱动器号和路径</div><div class="line">%~nx1       - 只将 %<span class="number">1</span> 扩展到文件名和扩展名</div><div class="line">%~dp$<span class="built_in">PATH</span>:<span class="number">1</span> - 在列在 <span class="built_in">PATH</span> 环境变量中的目录里查找 %<span class="number">1</span>，</div><div class="line">               并扩展到找到的第一个文件的驱动器号和路径。</div><div class="line">%~ftza1     - 将 %<span class="number">1</span> 扩展到类似 <span class="built_in">DIR</span> 的输出行。</div></pre></td></tr></table></figure></p>
<p>在上面的例子中，%1 和 PATH 可以被其他有效数值替换。<br>%~ 语法被一个有效参数号码终止。%~ 修定符不能跟 %*使用<br>注意：参数扩充时不理会参数所代表的文件是否真实存在，均以当前目录进行扩展</p>
<p>要理解上面的知识，下面的例子很关键。</p>
<p>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">Echo</span> 产生一个临时文件 &gt; tmp.txt</div><div class="line"><span class="comment">Rem 下行先保存当前目录，再将c:\windows设为当前目录</span></div><div class="line"><span class="built_in">pushd</span> c:\windows</div><div class="line"><span class="keyword">Call</span> :sub tmp.txt</div><div class="line"><span class="comment">Rem 下行恢复前次的当前目录</span></div><div class="line"><span class="built_in">Popd</span></div><div class="line"><span class="keyword">Call</span> :sub tmp.txt</div><div class="line"><span class="built_in">pause</span></div><div class="line"><span class="built_in">Del</span> tmp.txt</div><div class="line"><span class="keyword">exit</span></div><div class="line">:sub</div><div class="line"><span class="built_in">Echo</span> 删除引号： %~<span class="number">1</span></div><div class="line"><span class="built_in">Echo</span> 扩充到路径： %~f1</div><div class="line"><span class="built_in">Echo</span> 扩充到一个驱动器号： %~d1</div><div class="line"><span class="built_in">Echo</span> 扩充到一个路径： %~p1 </div><div class="line"><span class="built_in">Echo</span> 扩充到一个文件名： %~n1</div><div class="line"><span class="built_in">Echo</span> 扩充到一个文件扩展名： %~x1</div><div class="line"><span class="built_in">Echo</span> 扩充的路径指含有短名： %~s1 </div><div class="line"><span class="built_in">Echo</span> 扩充到文件属性： %~a1 </div><div class="line"><span class="built_in">Echo</span> 扩充到文件的日期/时间： %~t1 </div><div class="line"><span class="built_in">Echo</span> 扩充到文件的大小： %~z1 </div><div class="line"><span class="built_in">Echo</span> 扩展到驱动器号和路径：%~dp1</div><div class="line"><span class="built_in">Echo</span> 扩展到文件名和扩展名：%~nx1</div><div class="line"><span class="built_in">Echo</span> 扩展到类似 <span class="built_in">DIR</span> 的输出行：%~ftza1</div><div class="line"><span class="built_in">Echo</span>.</div><div class="line"><span class="keyword">Goto</span> :eof</div></pre></td></tr></table></figure></p>
<p>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> aa=<span class="number">123456</span></div><div class="line"><span class="built_in">set</span> cmdstr=<span class="built_in">echo</span> <span class="variable">%aa%</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">%cmdstr%</span></div><div class="line"><span class="keyword">call</span> <span class="variable">%cmdstr%</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>本例中如果不用call，而直接运行%cmdstr%，将显示结果%aa%，而不是123456</p>
<h4 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h4><p>更改批处理文件中可替换参数的位置。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">SHIFT</span> [/n]</div></pre></td></tr></table></figure></p>
<p>如果命令扩展名被启用，SHIFT 命令支持/n 命令行开关；该命令行开关告诉<br>命令从第 n 个参数开始移位；n 介于零和八之间。例如：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">SHIFT</span> /<span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>会将 %3 移位到 %2，将 %4 移位到 %3，等等；并且不影响 %0 和 %1。</p>
<h4 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h4><p>IF 条件判断语句，语法格式如下：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">IF</span> [<span class="keyword">NOT</span>] <span class="keyword">ERRORLEVEL</span> number command</div><div class="line"><span class="keyword">IF</span> [<span class="keyword">NOT</span>] string1==string2 command</div><div class="line"><span class="keyword">IF</span> [<span class="keyword">NOT</span>] <span class="keyword">EXIST</span> filename command</div></pre></td></tr></table></figure></p>
<p>下面逐一介绍，更详细的分析请看后面章节。</p>
<p>(1) IF [NOT] ERRORLEVEL number command<br>IF ERRORLEVEL这个句子必须放在某一个命令的后面，执行命令后由IF ERRORLEVEL 来判断命令的返回值。<br>Number的数字取值范围0~255，判断时值的排列顺序应该由大到小。返回的值大于等于指定的值时，条件成立</p>
<p>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">dir</span> c:</div></pre></td></tr></table></figure></p>
<p>rem退出代码为&gt;=1就跳至标题1处执行，&gt;=0就跳至标题0处执行<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">IF</span> <span class="keyword">ERRORLEVEL</span> <span class="number">1</span> <span class="keyword">goto</span> <span class="number">1</span></div><div class="line"><span class="keyword">IF</span> <span class="keyword">ERRORLEVEL</span> <span class="number">0</span> <span class="keyword">goto</span> <span class="number">0</span></div><div class="line">`</div></pre></td></tr></table></figure></p>
<p>Rem 上面的两行不可交换位置，否则失败了也显示成功。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">:<span class="number">0</span></div><div class="line"><span class="built_in">echo</span> 命令执行成功！</div></pre></td></tr></table></figure></p>
<p>Rem 程序执行完毕跳至标题exit处退出<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">goto</span> <span class="keyword">exit</span></div><div class="line">:<span class="number">1</span></div><div class="line"><span class="built_in">echo</span> 命令执行失败！</div></pre></td></tr></table></figure></p>
<p>Rem 程序执行完毕跳至标题exit处退出<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">goto</span> <span class="keyword">exit</span></div><div class="line">:<span class="keyword">exit</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>运行显示：命令执行成功！</p>
<p>(2) IF [NOT] string1==string2 command<br>string1和string2都为字符的数据，英文内字符的大小写将看作不同，这个条件中的等于号必须是两个（绝对相等的意思），条件成立即执行后面的command</p>
<p>检测当前变量的值做出判断，为了防止字符串中含有空格，可用以下格式<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [<span class="keyword">NOT</span>] &#123;string1&#125;==&#123;string2&#125; command</div><div class="line"><span class="keyword">if</span> [<span class="keyword">NOT</span>] [string1]==[string2] command</div><div class="line"><span class="keyword">if</span> [<span class="keyword">NOT</span>] "string1"=="string2" command</div></pre></td></tr></table></figure></p>
<p>这种写法实际上将括号或引号当成字符串的一部分了，只要等号左右两边一致就行了，比如下面的写法就不行：<br>if {string1}==[string2] command</p>
<p>(3) IF [NOT] EXIST filename command<br>EXIST filename为文件或目录存在的意思<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> off</div><div class="line"><span class="keyword">IF</span> <span class="keyword">EXIST</span> autoexec.bat <span class="built_in">echo</span> 文件存在！</div><div class="line"><span class="keyword">IF</span> <span class="keyword">not</span> <span class="keyword">EXIST</span> autoexec.bat <span class="built_in">echo</span> 文件不存在！</div></pre></td></tr></table></figure></p>
<p>这个批处理大家可以放在C盘和D盘分别执行，看看效果</p>
<h4 id="setlocal-与-变量延迟"><a href="#setlocal-与-变量延迟" class="headerlink" title="setlocal 与 变量延迟"></a>setlocal 与 变量延迟</h4><p>本条内容引用[英雄出品]的批处理教程：</p>
<p>要想进阶，变量延迟是必过的一关！所以这一部分希望你能认真看。</p>
<p>为了更好的说明问题，我们先引入一个例子。<br>例1：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> a=<span class="number">4</span></div><div class="line"><span class="built_in">set</span> a=<span class="number">5</span> &amp; <span class="built_in">echo</span> <span class="variable">%a%</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>结果：4<br>解说：为什么是4而不是5呢？在echo之前明明已经把变量a的值改成5了？</p>
<p>让我们先了解一下批处理运行命令的机制：</p>
<p>批处理读取命令时是按行读取的（另外例如for命令等，其后用一对圆括号闭合的所有语句也当作一行），在读取某行命令时，如果其中有变量，则变量值应该取上一行的值。所以在读取命令“set a=5 &amp; echo %a%”时，dos将其预处理为“set a=5 &amp; echo 4”，然后执行。而其中的a=5所做的数值变更，只能在下一命令行才能体现了。</p>
<p>而为了能够及时感知环境变量的动态变化，批处理设计了变量延迟。简单来说，在读取了一条完整的语句之后，不立即对该行的变量赋值，而会在某个单条语句执行之前再进行赋值，也就是说“延迟”了对变量的赋值。</p>
<p>那么如何开启变量延迟呢？变量延迟又需要注意什么呢？举个例子说明一下：</p>
<p>例2：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">setlocal</span> enabledelayedexpansion</div><div class="line"><span class="built_in">set</span> a=<span class="number">4</span></div><div class="line"><span class="built_in">set</span> a=<span class="number">5</span> &amp; <span class="built_in">echo</span> <span class="variable">!a!</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>结果：5<br>解说：启动了变量延迟，得到了正确答案。变量延迟的启动语句是“setlocal enabledelayedexpansion”，并且变量要用一对叹号“!!”括起来（注意要用英文的叹号），否则就没有变量延迟的效果。</p>
<p>分析一下例2，首先“setlocal enabledelayedexpansion”开启变量延迟，然后“set a=4”先给变量a赋值为4，“set a=5 &amp; echo !a!”这句是给变量a赋值为5并输出（由于启动了变量延迟，所以批处理能够感知到动态变化，即不是先给该行变量赋值，而是在运行过程中给变量赋值，因此此时a的值就是5了）。</p>
<p>再举一个例子巩固一下。<br>例3：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">setlocal</span> enabledelayedexpansion</div><div class="line"><span class="keyword">for</span> /l <span class="variable">%%i</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>) <span class="keyword">do</span> (</div><div class="line"><span class="built_in">set</span> a=<span class="variable">%%i</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">!a!</span></div><div class="line">)</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td></tr></table></figure></p>
<p>解说：本例开启了变量延迟并用“!!”将变量扩起来，因此得到我们预期的结果。如果不用变量延迟会出现什么结果呢？结果是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ECHO 处于关闭状态。</div><div class="line">ECHO 处于关闭状态。</div><div class="line">ECHO 处于关闭状态。</div><div class="line">ECHO 处于关闭状态。</div><div class="line">ECHO 处于关闭状态。</div></pre></td></tr></table></figure></p>
<p>即没有感知到for语句中的动态变化。</p>
<p>提示：在没有开启变量延迟的情况下，某条命令行中的变量改变，必须到下一条命令才能体现。这一点也可以加以利用，看例子。</p>
<p>例4：交换两个变量的值，且不用中间变量<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line">::交换两个变量的值，但是不使用临时变量</div><div class="line"><span class="built_in">set</span> var1=abc</div><div class="line"><span class="built_in">set</span> var2=<span class="number">123</span></div><div class="line"><span class="built_in">echo</span> 交换前： var1=<span class="variable">%var1%</span> var2=<span class="variable">%var2%</span></div><div class="line"><span class="built_in">set</span> var1=<span class="variable">%var2%</span>&amp; <span class="built_in">set</span> var2=<span class="variable">%var1%</span></div><div class="line"><span class="built_in">echo</span> 交换后： var1=<span class="variable">%var1%</span> var2=<span class="variable">%var2%</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>运行显示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">交换前： var1=abc var2=123</div><div class="line">交换后： var1=123 var2=abc</div><div class="line">请按任意键继续. . .</div></pre></td></tr></table></figure></p>
<p>在代码中，使用 setlocal enabledelayedexpansion 语句来启用变量延迟之后，有得有失：</p>
<p>优点：<br>(a). 可以在同一语句内部直接使用上一次改变后的变量；<br>(b). 在echo特殊字符的时候，无须用引号括起来，比如变量的值含有<code>&lt;</code> <code>&gt;</code> <code>|</code>等字符的时候，直接使用 echo !str! 就可以了；</p>
<p>缺点：<br>(a). 会把文本中所有的感叹号抛弃；<br>(b). 增加代码的复杂度，有时容易出错。</p>
<h4 id="ATTRIB-显示或更改文件属性"><a href="#ATTRIB-显示或更改文件属性" class="headerlink" title="ATTRIB  显示或更改文件属性"></a>ATTRIB  显示或更改文件属性</h4><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">ATTRIB</span> [+R|-R] [+A|-A] [+S|-S] [+H|-H] [[drive:] [<span class="built_in">path</span>] filename] [/S [/D]]</div><div class="line"></div><div class="line">  +   设置属性。</div><div class="line">  -    清除属性。</div><div class="line">  R   只读文件属性。</div><div class="line">  A   存档文件属性。</div><div class="line">  S   系统文件属性。</div><div class="line">  H   隐藏文件属性。</div><div class="line">  [drive:][<span class="built_in">path</span>][filename]</div><div class="line">      指定要处理的文件属性。</div><div class="line">  /S  处理当前文件夹及其子文件夹中的匹配文件。</div><div class="line">  /D  也处理文件夹。</div></pre></td></tr></table></figure>
<p>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">md</span> autorun</div><div class="line"><span class="built_in">attrib</span> +a +s +h autorun</div></pre></td></tr></table></figure></p>
<p>上面的命令将建立文件夹autorun，然后将其设为存档. 系统. 隐藏属性</p>
<h4 id="findstr-在文件中搜索字符串（find增强版）"><a href="#findstr-在文件中搜索字符串（find增强版）" class="headerlink" title="findstr 在文件中搜索字符串（find增强版）"></a>findstr 在文件中搜索字符串（find增强版）</h4><p>find命令不能处理文件中超过1024个字符的数据行，此时可用findstr命令。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">FINDSTR</span> [/B] [/E] [/L] [/R] [/S] [/I] [/X] [/V] [/N] [/M] [/O] [/F:file]</div><div class="line">        [/C:string] [/G:file] [/D:<span class="built_in">dir</span> list] [/A:<span class="built_in">color</span> attributes] [/OFF[LINE]]</div><div class="line">        strings [[drive:][<span class="built_in">path</span>]filename[ ...]]</div><div class="line"></div><div class="line">  /B        在一行的开始配对模式。</div><div class="line">  /E        在一行的结尾配对模式。</div><div class="line">  /L        按字使用搜索字符串。</div><div class="line">  /R        将搜索字符串作为一般表达式使用。</div><div class="line">  /S        在当前目录和所有子目录中搜索</div><div class="line">              匹配文件。</div><div class="line">  /I         指定搜索不分大小写。</div><div class="line">  /X        打印完全匹配的行。</div><div class="line">  /V        只打印不包含匹配的行。</div><div class="line">  /N        在匹配的每行前打印行数。</div><div class="line">  /M        如果文件含有匹配项，只打印其文件名。</div><div class="line">  /O        在每个匹配行前打印字符偏移量。</div><div class="line">  /P        忽略有不可打印字符的文件。</div><div class="line">  /OFF[LINE] 不跳过带有脱机属性集的文件。</div><div class="line">  /A:attr   指定有十六进位数字的颜色属性。请见 "<span class="built_in">color</span> /?"</div><div class="line">  /F:file   从指定文件读文件列表 (/ 代表控制台)。</div><div class="line">  /C:string 使用指定字符串作为文字搜索字符串。</div><div class="line">  /G:file   从指定的文件获得搜索字符串。 (/ 代表控制台)。</div><div class="line">  /D:<span class="built_in">dir</span>    查找以分号为分隔符的目录列表</div><div class="line">  strings   要查找的文字。</div><div class="line">  [drive:][<span class="built_in">path</span>]filename</div><div class="line">            指定要查找的文件。</div></pre></td></tr></table></figure></p>
<p>除非参数有 /C 前缀，请使用空格隔开搜索字符串。<br>例如： <code>FINDSTR &quot;hello there&quot; x.y</code> 在文件 <code>x.y</code> 中寻找 “hello” 或<br>“there” 。  <code>FINDSTR /C:&quot;hello there&quot; x.y</code> 在文件 <code>x.y</code>  中寻找<br>“hello there”。</p>
<p>一般表达式的快速参考：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.        通配符: 任何字符</div><div class="line">*        重复: 以前字符或类别出现零或零以上次数</div><div class="line">^        行位置: 行的开始</div><div class="line">$        行位置: 行的终点</div><div class="line">[class]  字符类别: 任何在字符集中的字符</div><div class="line">[^class] 补字符类别: 任何不在字符集中的字符</div><div class="line">[x-y]    范围: 在指定范围内的任何字符</div><div class="line">\x       Escape: 元字符 x 的文字用法</div><div class="line">\&lt;xyz    字位置: 字的开始</div><div class="line">xyz\&gt;    字位置: 字的结束</div></pre></td></tr></table></figure></p>
<p>有关 FINDSTR 常见表达法的详细情况，请见联机命令参考。</p>
<h4 id="date-t-和-time-t"><a href="#date-t-和-time-t" class="headerlink" title="date /t 和 time /t"></a><code>date /t</code> 和 <code>time /t</code></h4><p>date /t 直接显示当前日期，可用来提取或显示日期。</p>
<p>time /t 直接显示当前时间，可用来提取或显示时间。</p>
<h3 id="第二节-常用特殊符号"><a href="#第二节-常用特殊符号" class="headerlink" title="第二节 常用特殊符号"></a>第二节 常用特殊符号</h3><h4 id="命令行回显屏蔽符"><a href="#命令行回显屏蔽符" class="headerlink" title="@  命令行回显屏蔽符"></a><code>@</code>  命令行回显屏蔽符</h4><p>这个字符在批处理中的意思是关闭当前行的回显。我们从前几课知道<br>ECHO OFF可以关闭掉整个批处理命令的回显，但不能关掉ECHO OFF这个命令，现在我们在ECHO OFF这个命令前加个@，就可以达到所有命令均不回显的要求</p>
<h4 id="批处理变量引导符"><a href="#批处理变量引导符" class="headerlink" title="%  批处理变量引导符"></a><code>%</code>  批处理变量引导符</h4><p>这个百分号严格来说是算不上命令的，它只是批处理中的参数而已（多个%一起使用的情况除外，以后还将详细介绍）。<br>引用变量用%var%，调用程序外部参数用%1至%9等等<br>%0  %1  %2  %3  %4  %5  %6  %7  %8  %9  %<em>为命令行传递给批处理的参数<br>%0 批处理文件本身，包括完整的路径和扩展名<br>%1 第一个参数<br>%9 第九个参数<br>%</em> 从第一个参数开始的所有参数<br>参数%0具有特殊的功能，可以调用批处理自身，以达到批处理本身循环的目的，也可以复制和删除文件自身等等。</p>
<p>例：最简单的复制文件自身的方法<br>copy %0 d:\wind.bat</p>
<p>小技巧：添加行内注释<br>%注释内容%（可以用作行内注释，不能出现重定向符号和管道符号）<br>为什么这样呢？此时“注释内容”其实被当作变量，其值是空的，故只起注释作用，不过这种用法容易出现语法错误，一般不用。</p>
<h4 id="gt-输出重定向符"><a href="#gt-输出重定向符" class="headerlink" title="&gt;   输出重定向符"></a><code>&gt;</code>   输出重定向符</h4><p>输出重定向命令<br>这个字符的意思是传递并且覆盖，他所起的作用是将运行的结果传递到后面的范围（后边可以是文件，也可以是默认的系统控制台）<br>    在NT系列命令行中，重定向的作用范围由整个命令行转变为单个命令语句，受到了命令分隔符&amp;,&amp;&amp;,||和语句块的制约限制。</p>
<p>比如：<br>使用命令：<code>echo hello &gt;1.txt</code>将建立文件 1.txt，内容为“hello ”（注意行尾有一空格）<br>使用命令：<code>echo hello&gt;1.txt</code>将建立文件 1.txt，内容为“hello”（注意行尾没有空格）</p>
<h4 id="gt-gt-输出重定向符"><a href="#gt-gt-输出重定向符" class="headerlink" title="&gt;&gt;  输出重定向符"></a><code>&gt;&gt;</code>  输出重定向符</h4><p>输出重定向命令<br>这个符号的作用和<code>&gt;</code>有点类似，但他们的区别是<code>&gt;&gt;</code>是传递并在文件的末尾追加，而<code>&gt;</code>是覆盖</p>
<p>用法同上</p>
<p>同样拿1.txt做例子</p>
<p>使用命令：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> hello &gt; <span class="number">1</span>.txt</div><div class="line"><span class="built_in">echo</span> world &gt;&gt;<span class="number">1</span>.txt</div></pre></td></tr></table></figure></p>
<p>这时候1.txt 内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hello</div><div class="line">world</div></pre></td></tr></table></figure></p>
<h4 id="lt-gt-amp-lt-amp-重定向符"><a href="#lt-gt-amp-lt-amp-重定向符" class="headerlink" title="&lt; &gt;&amp; &lt;&amp; 重定向符"></a><code>&lt;</code> <code>&gt;&amp;</code> <code>&lt;&amp;</code> 重定向符</h4><p>这三个命令也是管道命令，但<code>&gt;&amp;</code> <code>&lt;&amp;</code>一般不常用，你只需要知道一下就ok了，当然如果想仔细研究的话，可以自己查一下资料。(本人已查过，网上也查不到相关资料)</p>
<p><code>&lt;</code>输入重定向命令，从文件中读入命令输入，而不是从键盘中读入。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">echo</span> <span class="number">2005</span>-<span class="number">05</span>-<span class="number">01</span>&gt;temp.txt</div><div class="line"><span class="built_in">set</span> /p today=&lt;temp.txt</div><div class="line"><span class="built_in">echo</span> <span class="variable">%today%</span></div><div class="line"><span class="built_in">del</span> temp.txt</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>运行显示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2005-05-01</div><div class="line">请按任意键继续. . .</div></pre></td></tr></table></figure></p>
<p><code>&gt;&amp;</code> 将一个句柄的输出写入到另一个句柄的输入中。<br><code>&lt;&amp;</code> 刚好和&gt;&amp;相反，从一个句柄读取输入并将其写入到另一个句柄输出中。</p>
<p>常用句柄：0. 1. 2，未定义句柄：3—9<br>1&gt;nul 表示禁止输出正确的信息<br>2&gt;nul 表示禁止输出错误信息。<br>其中的1与2都是代表某个数据流输入输出的地址（NT CMD 称之为句柄，MSDOS称之为设备）。</p>
<p>句柄0：标准输入stdin，键盘输入<br>句柄1：标准输出stdout，输出到命令提示符窗口（console，代码为CON）<br>句柄2：标准错误stderr，输出到命令提示符窗口（console，代码为CON）<br>其中的stdin可被&lt;重定向，stdout可被&gt;. &gt;&gt;重定向。</p>
<p>我们已经知道读取文本中的内容可以用for命令，但如果只需要读取第一行用for命令就有点麻烦。简单的办法如下：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> /p str=&lt;%<span class="number">0</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">%str%</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>运行显示批处理文件自身的第一行：@echo off</p>
<h4 id="命令管道符"><a href="#命令管道符" class="headerlink" title="|  命令管道符"></a><code>|</code>  命令管道符</h4><p>格式：第一条命令 | 第二条命令 [| 第三条命令…]<br>将第一条命令的结果作为第二条命令的参数来使用，记得在unix中这种方式很常见。</p>
<p>例如：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dir</span> c:\|<span class="built_in">find</span> "txt"</div></pre></td></tr></table></figure></p>
<p>以上命令是：查找C：\所有，并发现TXT字符串。<br>FIND的功能请用 FIND /? 自行查看</p>
<p>在不使format的自动格式化参数时，我是这样来自动格式化A盘的<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> y|<span class="built_in">format</span> a: /s /q /v:system</div></pre></td></tr></table></figure></p>
<p>用过format的都知道，再格盘时要输入y来确认是否格盘，这个命令前加上echo y并用|字符来将echo y的结果传给format命令</p>
<p>从而达到自动输入y的目的</p>
<p>（这条命令有危害性，测试时请慎重）</p>
<h4 id="转义字符"><a href="#转义字符" class="headerlink" title="^  转义字符"></a><code>^</code>  转义字符</h4><p>^是对特殊符号&lt;,&gt;,&amp;的前导字符，在命令中他将以上3个符号的特殊功能去掉，仅仅只把他们当成符号而不使用他们的特殊意义。</p>
<p>比如<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> test ^&gt;<span class="number">1</span>.txt</div></pre></td></tr></table></figure></p>
<p>结果则是：test &gt; 1.txt</p>
<p>他没有追加在1.txt里，只是显示了出来。</p>
<p>另外，此转义字符还可以用作续行符号。<br>举个简单的例子：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">echo</span> 英雄^</div><div class="line">是^</div><div class="line">好^</div><div class="line">男人</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>不用多说，自己试一下就明白了。</p>
<p>为什么转义字符放在行尾可以起到续行符的作用呢？原因很简单，因为每行末尾还有一个看不见的符号，即回车符，转义字符位于行尾时就让回车符失效了，从而起到了续行的作用。</p>
<h4 id="amp-组合命令（顺序执行）"><a href="#amp-组合命令（顺序执行）" class="headerlink" title="&amp;  组合命令（顺序执行）"></a><code>&amp;</code>  组合命令（顺序执行）</h4><p>语法：第一条命令 &amp; 第二条命令 [&amp; 第三条命令…]<br>&amp;. &amp;&amp;. ||为组合命令，顾名思义，就是可以把多个命令组合起来当一个命令来执行。这在批处理脚本里是允许的，而且用的非常广泛。因为批处理认行不认命令数目。</p>
<p>这个符号允许在一行中使用2个以上不同的命令，当第一个命令执行失败了，也不影响后边的命令执行。<br>这里&amp;两边的命令是顺序执行的，从前往后执行。<br>比如：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dir</span> z:\ &amp; <span class="built_in">dir</span> y:\ &amp; <span class="built_in">dir</span> c:\</div></pre></td></tr></table></figure></p>
<p>以上命令会连续显示z,y,c盘的内容，不理会该盘是否存在</p>
<h4 id="amp-amp-组合命令（前面指令成功，才执行后面指令）"><a href="#amp-amp-组合命令（前面指令成功，才执行后面指令）" class="headerlink" title="&amp;&amp; 组合命令（前面指令成功，才执行后面指令）"></a><code>&amp;&amp;</code> 组合命令（前面指令成功，才执行后面指令）</h4><p>语法：第一条命令 &amp;&amp; 第二条命令 [&amp;&amp; 第三条命令…]</p>
<p>用这种方法可以同时执行多条命令，当碰到执行出错的命令后将不执行后面的命令，如果一直没有出错则一直执行完所有命令<br>这个命令和上边的类似，但区别是，第一个命令失败时，后边的命令也不会执行<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dir</span> z:\ &amp;&amp; <span class="built_in">dir</span> y:\ &amp;&amp; <span class="built_in">dir</span> c:\</div></pre></td></tr></table></figure></p>
<h4 id="组合命令（前面指令失败，才执行后面指令）"><a href="#组合命令（前面指令失败，才执行后面指令）" class="headerlink" title="||  组合命令（前面指令失败，才执行后面指令）"></a><code>||</code>  组合命令（前面指令失败，才执行后面指令）</h4><p>语法：第一条命令 || 第二条命令 [|| 第三条命令…]</p>
<p>用这种方法可以同时执行多条命令，当一条命令失败后才执行第二条命令，当碰到执行正确的命令后将不执行后面的命令，如果没有出现正确的命令则一直执行完所有命令；</p>
<p>提示：组合命令和重定向命令一起使用必须注意优先级<br>管道命令的优先级高于重定向命令，重定向命令的优先级高于组合命令</p>
<p>问题：把C盘和D盘的文件和文件夹列出到a.txt文件中。看例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dir</span> c:\ &amp;&amp; <span class="built_in">dir</span> d:\ &gt; a.txt</div></pre></td></tr></table></figure></p>
<p>这样执行后a.txt里只有D盘的信息！为什么？因为组合命令的优先级没有重定向命令的优先级高！所以这句在执行时将本行分成这两部分：<code>dir c:\</code>和<code>dir d:\ &gt; a.txt</code>，而并不是如你想的这两部分：<code>dir c:\ &amp;&amp; dir d:\</code>和<code>&gt; a.txt</code>。要使用组合命令&amp;&amp;达到题目的要求，必须得这么写：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dir</span> c:\ &gt; a.txt &amp;&amp; <span class="built_in">dir</span> d:\ &gt;&gt; a.txt</div></pre></td></tr></table></figure></p>
<p>这样，依据优先级高低，DOS将把这句话分成以下两部分：<code>dir c:\ &gt; a.txt</code>和<code>dir d:\ &gt;&gt; a.txt</code>。例十八中的几句的差别比较特殊，值得好好研究体会一下。</p>
<p>当然这里还可以利用&amp;命令（自己想一下道理哦）：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dir</span> c:\ &gt; a.txt &amp; <span class="built_in">dir</span> d:\ &gt;&gt; a.txt</div></pre></td></tr></table></figure></p>
<h4 id="quot-quot-字符串界定符"><a href="#quot-quot-字符串界定符" class="headerlink" title="&quot;&quot;  字符串界定符"></a><code>&quot;&quot;</code>  字符串界定符</h4><p>双引号允许在字符串中包含空格，进入一个特殊目录可以用如下方法<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> "program files"</div><div class="line"><span class="built_in">cd</span> progra~<span class="number">1</span></div><div class="line"><span class="built_in">cd</span> pro*</div></pre></td></tr></table></figure></p>
<p>以上三种方法都可以进入program files这个目录</p>
<h4 id="逗号"><a href="#逗号" class="headerlink" title=", 逗号"></a><code>,</code> 逗号</h4><p>逗号相当于空格，在某些情况下“,”可以用来当做空格使</p>
<p>比如<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dir</span>,c:\</div></pre></td></tr></table></figure></p>
<h4 id="分号"><a href="#分号" class="headerlink" title="; 分号"></a><code>;</code> 分号</h4><p>分号，当命令相同时，可以将不同目标用；来隔离，但执行效果不变，如执行过程中发生错误，则只返回错误报告，但程序仍会执行。（有人说不会继续执行，其实测试一下就知道了）</p>
<p>比如：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dir</span> c:\;d:\;e:\;z:\</div></pre></td></tr></table></figure></p>
<p>以上命令相当于<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dir</span> c:\</div><div class="line"><span class="built_in">dir</span> d:\</div><div class="line"><span class="built_in">dir</span> e:\</div><div class="line"><span class="built_in">dir</span> f:\</div></pre></td></tr></table></figure></p>
<p>如果其中z盘不存在，运行显示：系统找不到指定的路径。然后终止命令的执行。</p>
<p>例：<code>dir c:\;d:\;e:\1.txt</code><br>以上命令相当于<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dir</span> c:\</div><div class="line"><span class="built_in">dir</span> d:\</div><div class="line"><span class="built_in">dir</span> e:\<span class="number">1</span>.txt</div></pre></td></tr></table></figure></p>
<p>其中文件<code>e:\1.txt</code>不存在，但e盘存在，有错误提示，但命令仍会执行。</p>
<p>为什么？如果目标路径不存在，则终止执行；如果路径存在，仅文件不存在，则继续执行。</p>
<p>就说这些了!各位有什么意见请回贴!有什么疑问请到BAT交流区发贴!下一节改进!</p>
<h4 id="小括号"><a href="#小括号" class="headerlink" title="() 小括号"></a><code>()</code> 小括号</h4><p>小括号在批处理编程中有特殊的作用，左右括号必须成对使用，括号中可以包括多行命令，这些命令将被看成一个整体，视为一条命令行。</p>
<p>括号在for语句和if语句中常见，用来嵌套使用循环或条件语句，其实括号()也可以单独使用，请看例子。</p>
<p>例：<br>命令：<code>echo 1 &amp; echo 2 &amp; echo 3</code><br>可以写成：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(</div><div class="line"><span class="built_in">echo</span> <span class="number">1</span></div><div class="line"><span class="built_in">echo</span> <span class="number">2</span></div><div class="line"><span class="built_in">echo</span> <span class="number">3</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>上面两种写法效果一样，这两种写法都被视为是一条命令行。<br>注意：这种多条命令被视为一条命令行时，如果其中有变量，就涉及到变量延迟的问题。</p>
<h4 id="感叹号"><a href="#感叹号" class="headerlink" title="! 感叹号"></a><code>!</code> 感叹号</h4><p>没啥说的，在变量延迟问题中，用来表示变量，即<code>%var%</code>应该表示为<code>!var!</code>，请看前面的setlocal命令介绍。</p>
<h4 id="批处理中可能会见到的其它特殊标记符-（略）"><a href="#批处理中可能会见到的其它特殊标记符-（略）" class="headerlink" title="批处理中可能会见到的其它特殊标记符: （略）"></a>批处理中可能会见到的其它特殊标记符: （略）</h4><p> <code>CR(0D)</code> 命令行结束符<br> <code>Escape(1B)</code> ANSI转义字符引导符<br> <code>Space(20)</code> 常用的参数界定符<br> <code>Tab(09) ; =</code> 不常用的参数界定符<br> <code>+ COPY</code>命令文件连接符<br> <code>* ?</code> 文件通配符<br> <code>/</code> 参数开关引导符<br> <code>:</code> 批处理标签引导符</p>
<h2 id="第二章-FOR命令详解"><a href="#第二章-FOR命令详解" class="headerlink" title="第二章 FOR命令详解"></a>第二章 FOR命令详解</h2><p>讲FOR之前呢,咋先告诉各位新手朋友,如果你有什么命令不懂,直接在CMD下面输入：<code>name /?</code> 这样的格式来看系统给出的帮助文件,比如<code>for /?</code> 就会把FOR命令的帮助全部显示出来!当然许多菜鸟都看不懂…. 所以才会有那么多批处理文章! 俺也照顾菜鸟,把FOR命令用我自己的方式说明下!</p>
<p>正式开始：</p>
<h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FOR</span> <span class="variable">%%v</span>ariable <span class="keyword">IN</span> (<span class="built_in">set</span>) <span class="keyword">DO</span> command [command-parameters]</div><div class="line"></div><div class="line">  <span class="variable">%%v</span>ariable  指定一个单一字母表示可替换的参数。</div><div class="line">  (<span class="built_in">set</span>)      指定一个或一组文件。可以使用通配符。</div><div class="line">  command    指定对每个文件执行的命令。</div><div class="line">  command-parameters</div><div class="line">             为特定命令指定参数或命令行开关。</div></pre></td></tr></table></figure>
<p>FOR 有4个参数 /d   /l   /r   /f   他们的作用我在下面用例子解释<br>现在开始讲每个参数的意思。</p>
<h3 id="参数-d-主要搜索匹配目录"><a href="#参数-d-主要搜索匹配目录" class="headerlink" title="参数 /d (主要搜索匹配目录)"></a>参数 <code>/d</code> (主要搜索匹配目录)</h3><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FOR</span> /D <span class="variable">%%v</span>ariable <span class="keyword">IN</span> (<span class="built_in">set</span>) <span class="keyword">DO</span> command [command-parameters]</div><div class="line">    如果集中包含通配符，则指定与目录名匹配，而不与文件</div><div class="line">    名匹配。</div></pre></td></tr></table></figure>
<p>如果 Set (也就是我上面写的 “相关文件或命令”) 包含通配符 <code>*</code> 和 <code>?</code>，将对与 Set 相匹配的每个目录（而不是指定目录中的文件组）执行指定的 Command。</p>
<p>这个参数主要用于目录搜索,不会搜索文件,看这样的例子<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">for</span> /d <span class="variable">%%i</span> <span class="keyword">in</span> (c:\*) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%i</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>运行会把C盘根目录下的全部目录名字打印出来,而文件名字一个也不显示!</p>
<p>在来一个,比如我们要把当前路径下文件夹的名字只有1-3个字母的打出来<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">for</span> /d <span class="variable">%%i</span> <span class="keyword">in</span> (???) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%i</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>这样的话如果你当前目录下有目录名字只有1-3个字母的,就会显示出来,没有就不显示了</p>
<p>这里解释下<code>*</code>号和<code>?</code>号的作用,<code>*</code>号表示任意N个字符,而<code>?</code>号只表示任意一个字符</p>
<p>知道作用了,给大家个思考题目!<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">for</span> /d <span class="variable">%%i</span> <span class="keyword">in</span> (window?) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%i</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>保存到C盘下执行,会显示什么呢?自己看吧! 显示：windows<br>/D参数只能显示当前目录下的目录名字,这个大家要注意!</p>
<h3 id="参数-R-（搜索指定目录树中的匹配文件）"><a href="#参数-R-（搜索指定目录树中的匹配文件）" class="headerlink" title="参数 /R （搜索指定目录树中的匹配文件）"></a>参数 <code>/R</code> （搜索指定目录树中的匹配文件）</h3><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FOR</span> /R [[drive:]<span class="built_in">path</span>] <span class="variable">%%v</span>ariable <span class="keyword">IN</span> (<span class="built_in">set</span>) <span class="keyword">DO</span> command [command-parameters]</div><div class="line"></div><div class="line">    检查以 [drive:]<span class="built_in">path</span> 为根的目录树，指向每个目录中的</div><div class="line">    <span class="keyword">FOR</span> 语句。如果在 /R 后没有指定目录，则使用当前</div></pre></td></tr></table></figure>
<p>目录。如果集仅为一个单点(.)字符，则枚举该目录树。</p>
<p>递归</p>
<p>上面我们知道,/D只能显示当前路径下的目录名字,那么现在这个/R也是和目录有关,他能干嘛呢?放心他比/D强大多了!<br>他可以把当前或者你指定路径下的文件名字全部读取,注意是文件名字,有什么用看例子!</p>
<p><strong>请注意2点：</strong></p>
<ol>
<li><p>set中的文件名如果含有通配符(？或*)，则列举/R参数指定的目录及其下面的所用子目录中与set相符合的所有文件，无相符文件的目录则不列举。如果目录树中没有相符的文件，或者指定的目录根本不存在，这两种情况下均不会列举目录。</p>
</li>
<li><p>相反，如果set中为具体文件名（即不含通配符?和*)，则枚举该目录树（即列举该目录及其下面的所有子目录），而不管set中的指定文件是否存在，也就是说，此时不但列举含有指定文件的目录，也要列举不含指定文件的其它所有目录。这与前面所说的单点（.）枚举目录树是一个道理，单点代表当前目录，也可视为一个文件。此时哪怕指定的目录根本不存在，同样会列举目录。<br>比如：<br><code>for /r M:\不存在 %%i in (1.exe) do echo %%i</code><br>运行显示：<code>M:\不存在\1.exe</code></p>
</li>
</ol>
<p>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">for</span> /r c:\ <span class="variable">%%i</span> <span class="keyword">in</span> (*.exe) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%i</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>咱们把这个BAT保存到D盘随便哪里然后执行,我会就会看到,他把C盘根目录,和每个目录的子目录下面全部的EXE文件都列出来了!!!!没有exe文件的目录则不列举。</p>
<p>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">for</span> /r <span class="variable">%%i</span> <span class="keyword">in</span> (*.exe) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%i</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>参数不一样了吧!这个命令前面没加那个<code>C:\</code>也就是搜索路径,这样他就会以当前目录为搜索路径,比如你这个BAT你把他放在<code>d:\test</code>目录下执行,那么他就会把<code>D:\test</code>目录和他下面的子目录的全部EXE文件列出来!!!</p>
<p>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">for</span> /r c:\ <span class="variable">%%i</span> <span class="keyword">in</span> (boot.ini) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%i</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>运行本例发现枚举了c盘所有目录。</p>
<p>为了只列举boot.ini存在的目录，可改成下面这样：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">for</span> /r c:\ <span class="variable">%%i</span> <span class="keyword">in</span> (boot.ini) <span class="keyword">do</span> <span class="keyword">if</span> <span class="keyword">exist</span> <span class="variable">%%i</span> <span class="built_in">echo</span> <span class="variable">%%i</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>用这条命令搜索文件真不错。。。。。。</p>
<p>这个参数大家应该理解了吧!还是满好玩的命令!</p>
<h3 id="参数-L-（按数字序列-start-step-end-循环）"><a href="#参数-L-（按数字序列-start-step-end-循环）" class="headerlink" title="参数 /L （按数字序列 start,step,end 循环）"></a>参数 <code>/L</code> （按数字序列 start,step,end 循环）</h3><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FOR</span> /L <span class="variable">%%v</span>ariable <span class="keyword">IN</span> (<span class="built_in">start</span>,step,end) <span class="keyword">DO</span> command [command-parameters]</div><div class="line"></div><div class="line">    该集表示以增量形式从开始到结束的一个数字序列。</div><div class="line">    因此，(<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>) 将产生序列 <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>，(<span class="number">5</span>,-<span class="number">1</span>,<span class="number">1</span>) 将产生</div><div class="line">    序列 (<span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span>)。</div></pre></td></tr></table></figure>
<p>使用迭代变量设置起始值 (Start#)，然后逐步执行一组范围的值，直到该值超过所设置的终止值 (End#)。/L 将通过对 Start# 与 End# 进行比较来执行迭代变量。如果 Start# 小于 End#，就会执行该命令。如果迭代变量超过 End#，则命令解释程序退出此循环。还可以使用负的 Step# 以递减数值的方式逐步执行此范围内的值。例如，(1,1,5) 生成序列 1 2 3 4 5，而 (5,-1,1) 则生成序列 (5 4 3 2 1)。语法是：</p>
<p>看着这说明有点晕吧!咱们看例子就不晕了!<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">for</span> /l <span class="variable">%%i</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>) <span class="keyword">do</span> @<span class="built_in">echo</span> <span class="variable">%%i</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>保存执行看效果,他会打印从1 2 3 4 5  这样5个数字<br>(1,1,5)这个参数也就是表示从1开始每次加1直到5终止!</p>
<p>等会晕,就打印个数字有P用…好的满足大家,看这个例子<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">for</span> /l <span class="variable">%%i</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>) <span class="keyword">do</span> <span class="built_in">start</span> <span class="built_in">cmd</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>执行后是不是吓了一跳,怎么多了5个CMD窗口,呵呵!如果把那个 (1,1,5)改成 (1,1,65535)会有什么结果,我先告诉大家,会打开65535个CMD窗口….这么多你不死机算你强!<br>当然我们也可以把那个start cmd改成md %%i 这样就会建立指定个目录了!!!名字为1-65535</p>
<p>看完这个被我赋予破坏性质的参数后,我们来看最后一个参数</p>
<h3 id="参数-F-（处理-命令输出，字符串及文件内容）"><a href="#参数-F-（处理-命令输出，字符串及文件内容）" class="headerlink" title="参数 /F （处理 命令输出，字符串及文件内容）"></a>参数 <code>/F</code> （处理 命令输出，字符串及文件内容）</h3><p>迭代及文件解析<br>使用文件解析来处理命令输出. 字符串及文件内容。使用迭代变量定义要检查的内容或字符串，并使用各种options选项进一步修改解析方式。使用options令牌选项指定哪些令牌应该作为迭代变量传递。请注意：在没有使用令牌选项时，/F 将只检查第一个令牌。<br>文件解析过程包括读取输出. 字符串或文件内容，将其分成独立的文本行以及再将每行解析成零个或更多个令牌。然后通过设置为令牌的迭代变量值，调用 for 循环。默认情况下，/F 传递每个文件每一行的第一个空白分隔符号。跳过空行。</p>
<p>详细的帮助格式为：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FOR</span> /F ["options"] <span class="variable">%%v</span>ariable <span class="keyword">IN</span> (file-<span class="built_in">set</span>) <span class="keyword">DO</span> command [command-parameters]</div><div class="line"><span class="keyword">FOR</span> /F ["options"] <span class="variable">%%v</span>ariable <span class="keyword">IN</span> ("string") <span class="keyword">DO</span> command [command-parameters]</div><div class="line"><span class="keyword">FOR</span> /F ["options"] <span class="variable">%%v</span>ariable <span class="keyword">IN</span> ('command') <span class="keyword">DO</span> command [command-parameters]</div><div class="line"></div><div class="line">    带引号的字符串"options"包括一个或多个</div><div class="line">    指定不同解析选项的关键字。这些关键字为:</div><div class="line"></div><div class="line">        eol=c           - 指一个行注释字符的结尾(就一个)</div><div class="line">        skip=n          - 指在文件开始时忽略的行数。</div><div class="line">        delims=xxx      - 指分隔符集。这个替换了空格和跳格键的</div><div class="line">                          默认分隔符集。</div><div class="line">        tokens=x,y,m-n  - 指每行的哪一个符号被传递到每个迭代</div><div class="line">                          的 <span class="keyword">for</span> 本身。这会导致额外变量名称的分配。m-n</div><div class="line">                          格式为一个范围。通过 nth 符号指定 mth。如果</div><div class="line">                          符号字符串中的最后一个字符星号，</div><div class="line">                          那么额外的变量将在最后一个符号解析之后</div><div class="line">                          分配并接受行的保留文本。经测试，该参数最多</div><div class="line">                          只能区分<span class="number">31</span>个字段。</div><div class="line"></div><div class="line">        usebackq        - 使用后引号（键盘上数字<span class="number">1</span>左面的那个键`）。</div><div class="line"></div><div class="line">                        未使用参数usebackq时：file-<span class="built_in">set</span>表示文件，但不能含有空格</div><div class="line">                            双引号表示字符串，即"string"</div><div class="line">                            单引号表示执行命令，即'command'</div><div class="line"></div><div class="line">                          使用参数usebackq时：file-<span class="built_in">set</span>和"file-<span class="built_in">set</span>"都表示文件</div><div class="line">                          当文件路径或名称中有空格时，就可以用双引号括起来</div><div class="line">                            单引号表示字符串，即'string'</div><div class="line">                            后引号表示命令执行，即`command`</div></pre></td></tr></table></figure></p>
<p>以上是用<code>for /?</code>命令获得的帮助信息，直接复制过来的。<br>晕惨了!我这就举个例子帮助大家来理解这些参数!</p>
<p>For命令例1：<strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong><br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="comment">rem 首先建立临时文件test.txt</span></div><div class="line"><span class="built_in">echo</span> ;注释行,这是临时文件,用完删除 &gt;test.txt</div><div class="line"><span class="built_in">echo</span> <span class="number">11</span>段 <span class="number">12</span>段 <span class="number">13</span>段 <span class="number">14</span>段 <span class="number">15</span>段 <span class="number">16</span>段 &gt;&gt;test.txt</div><div class="line"><span class="built_in">echo</span> <span class="number">21</span>段,<span class="number">22</span>段,<span class="number">23</span>段,<span class="number">24</span>段,<span class="number">25</span>段,<span class="number">26</span>段 &gt;&gt;test.txt</div><div class="line"><span class="built_in">echo</span> <span class="number">31</span>段-<span class="number">32</span>段-<span class="number">33</span>段-<span class="number">34</span>段-<span class="number">35</span>段-<span class="number">36</span>段 &gt;&gt;test.txt</div><div class="line"><span class="keyword">FOR</span> /F "eol=; tokens=<span class="number">1</span>,<span class="number">3</span>* delims=,- " <span class="variable">%%i</span> <span class="keyword">in</span> (test.txt) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%i</span> <span class="variable">%%j</span> <span class="variable">%%k</span></div><div class="line"><span class="built_in">Pause</span></div><div class="line"><span class="built_in">Del</span> test.txt</div></pre></td></tr></table></figure></p>
<p>运行显示结果：</p>
<p>11段 13段 14段 15段 16段<br>21段 23段 24段,25段,26段<br>31段 33段 34段-35段-36段<br>请按任意键继续. . .</p>
<p>为什么会这样?我来解释：<br>eol=;          分号开头的行为注释行<br>tokens=1,3*    将每行第1段,第3段和剩余字段分别赋予变量%%i，%%j，%%k<br>delims=,-     （减号后有一空格）以逗号减号和空格为分隔符，空格必须放在最后</p>
<p>For命令例2：<strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong><br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">FOR</span> /F "eol= delims=" <span class="variable">%%i</span> <span class="keyword">in</span> (test.txt) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%i</span></div><div class="line"><span class="built_in">Pause</span></div></pre></td></tr></table></figure></p>
<p>运行将显示test.txt全部内容，包括注释行，不解释了哈。</p>
<p>For命令例3：<strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>
<p>另外/F参数还可以以输出命令的结果看这个例子<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">FOR</span> /F "delims=" <span class="variable">%%i</span> <span class="keyword">in</span> ('<span class="built_in">net</span> user') <span class="keyword">do</span> @<span class="built_in">echo</span> <span class="variable">%%i</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>这样你本机全部帐号名字就出来了把扩号内的内容用两个单引号引起来就表示那个当命令执行,FOR会返回命令的每行结果,加那个”delims=” 是为了让我空格的行能整行显示出来,不加就只显示空格左边一列!</p>
<p>基本上讲完了FOR的基本用法了…如果你看过FOR的系统帮助,你会发现他下面还有一些特定义的变量,这些我先不讲.大家因该都累了吧!你不累我累啊….</p>
<p>所谓文武之道，一张一弛，现休息一下。</p>
<h2 id="第三章-FOR命令中的变量"><a href="#第三章-FOR命令中的变量" class="headerlink" title="第三章 FOR命令中的变量"></a>第三章 FOR命令中的变量</h2><p>FOR命令中有一些变量,他们的用法许多新手朋友还不太了解,今天给大家讲解他们的用法!</p>
<p>先把FOR的变量全部列出来：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">~I          - 删除任何引号(")，扩展 %I</div><div class="line">%~fI        - 将 %I 扩展到一个完全合格的路径名</div><div class="line">%~dI        - 仅将 %I 扩展到一个驱动器号</div><div class="line">%~pI        - 仅将 %I 扩展到一个路径</div><div class="line">%~nI        - 仅将 %I 扩展到一个文件名</div><div class="line">%~xI        - 仅将 %I 扩展到一个文件扩展名</div><div class="line">%~sI        - 扩展的路径只含有短名</div><div class="line">%~aI        - 将 %I 扩展到文件的文件属性</div><div class="line">%~tI        - 将 %I 扩展到文件的日期/时间</div><div class="line">%~zI        - 将 %I 扩展到文件的大小</div><div class="line">%~$<span class="built_in">PATH</span>:I   - 查找列在路径环境变量的目录，并将 %I 扩展</div><div class="line">              到找到的第一个完全合格的名称。如果环境变量名</div><div class="line">              未被定义，或者没有找到文件，此组合键会扩展到</div><div class="line">              空字符串</div></pre></td></tr></table></figure></p>
<p>我们可以看到每行都有一个大写字母”I”,这个I其实就是我们在FOR带入的变量,我们FOR语句代入的变量名是什么,这里就写什么.<br>比如<code>:FOR /F  %%z IN (&#39;set&#39;) DO @echo %%z</code><br>这里我们代入的变量名是z那么我们就要把那个I改成z,例如%~fI改为%~fz<br>至于前面的%~p这样的内容就是语法了!</p>
<p>好开始讲解:</p>
<h3 id="I-删除任何引号-“-，扩展-I"><a href="#I-删除任何引号-“-，扩展-I" class="headerlink" title="~I 删除任何引号(“)，扩展 %I"></a><code>~I</code> 删除任何引号(“)，扩展 <code>%I</code></h3><p>这个变量的作用就如他的说明,删除引号!<br>我们来看这个例子：<br>首先建立临时文件temp.txt，内容如下<br>“1111<br>“2222”<br>3333”<br>“4444”44<br>“55”55”55</p>
<p>可建立个BAT文件代码如下：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">echo</span> ^"<span class="number">1111</span>&gt;temp.txt</div><div class="line"><span class="built_in">echo</span> "<span class="number">2222</span>"&gt;&gt;temp.txt</div><div class="line"><span class="built_in">echo</span> <span class="number">3333</span>^"&gt;&gt;temp.txt</div><div class="line"><span class="built_in">echo</span> "<span class="number">4444</span>"<span class="number">44</span>&gt;&gt;temp.txt</div><div class="line"><span class="built_in">echo</span> ^"<span class="number">55</span>"<span class="number">55</span>"<span class="number">55</span>&gt;&gt;temp.txt</div><div class="line"><span class="comment">rem 上面建立临时文件，注意不成对的引号要加转义字符^，重定向符号前不要留空格</span></div><div class="line"><span class="keyword">FOR</span> /F "delims=" <span class="variable">%%i</span> <span class="keyword">IN</span> (temp.txt) <span class="keyword">DO</span> <span class="built_in">echo</span>  <span class="variable">%%~</span>i</div><div class="line"><span class="built_in">pause</span></div><div class="line"><span class="built_in">del</span> temp.txt</div></pre></td></tr></table></figure></p>
<p>执行后,我们看CMD的回显如下：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">1111</span>           #字符串前的引号被删除了</div><div class="line"><span class="number">2222</span>           #字符串首尾的引号都被删除了</div><div class="line"><span class="number">3333</span>"          #字符串前无引号，后面的引号保留</div><div class="line"><span class="number">4444</span>"<span class="number">44</span>        #字符串前面的引号删除了，而中间的引号保留</div><div class="line"><span class="number">55</span>"<span class="number">55</span>"<span class="number">55</span>       #字符串前面的引号删除了，而中间的引号保留</div><div class="line">请按任意键继续. . .</div></pre></td></tr></table></figure></p>
<p>和之前temp.txt中的内容对比一下,我们会发现第1. 2. 5行的引号都消失了,这就是删除引号~i的作用了!<br>删除引号规则如下(BAT兄补充!)</p>
<ol>
<li>若字符串首尾同时存在引号，则删除首尾的引号；</li>
<li>若字符串尾不存在引号，则删除字符串首的引号；</li>
<li>如果字符串中间存在引号，或者只在尾部存在引号，则不删除。</li>
</ol>
<p>龙卷风补充：无头不删，有头连尾删。</p>
<h3 id="fI-将-I-扩展到一个完全合格的路径名"><a href="#fI-将-I-扩展到一个完全合格的路径名" class="headerlink" title="%~fI 将 %I 扩展到一个完全合格的路径名"></a><code>%~fI</code> 将 <code>%I</code> 扩展到一个完全合格的路径名</h3><p>看例子：<br>把代码保存放在随便哪个地方,我这里就放桌面吧.<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FOR</span> /F "delims==" <span class="variable">%%i</span> <span class="keyword">IN</span> ('<span class="built_in">dir</span> /b') <span class="keyword">DO</span> @<span class="built_in">echo</span>  <span class="variable">%%~</span>fi</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>执行后显示内容如下<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">C:\<span class="title">Documents</span> <span class="title">and</span> <span class="title">Settings</span>\<span class="title">Administrator</span>\桌面\<span class="title">test.bat</span></span></div><div class="line"><span class="function"><span class="title">C</span>:\<span class="title">Documents</span> <span class="title">and</span> <span class="title">Settings</span>\<span class="title">Administrator</span>\桌面\<span class="title">test.vbs</span></span></div></pre></td></tr></table></figure></p>
<p>当我把代码中的 %%~fi直接改成%%i<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FOR</span> /F "delims==" <span class="variable">%%i</span> <span class="keyword">IN</span> ('<span class="built_in">dir</span> /b') <span class="keyword">DO</span> @<span class="built_in">echo</span>  <span class="variable">%%i</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>执行后就会显示以下内容：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">test.bat</div><div class="line">test.vbs</div></pre></td></tr></table></figure></p>
<p>通过对比,我们很容易就看出没有路径了,这就是”将 %I 扩展到一个完全合格的路径名”的作用<br>也就是如果%i变量的内容是一个文件名的话,他就会把这个文件所在的绝对路径打印出来,而不只单单打印一个文件名,自己动手动实验下就知道了!</p>
<h3 id="dI-仅将-I-扩展到一个驱动器号"><a href="#dI-仅将-I-扩展到一个驱动器号" class="headerlink" title="%~dI 仅将 %I 扩展到一个驱动器号"></a><code>%~dI</code> 仅将 <code>%I</code> 扩展到一个驱动器号</h3><p>看例子：<br>代码如下,我还是放到桌面执行!<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FOR</span> /F "delims==" <span class="variable">%%i</span> <span class="keyword">IN</span> ('<span class="built_in">dir</span> /b') <span class="keyword">DO</span> @<span class="built_in">echo</span>  <span class="variable">%%~</span>di</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>执行后我CMD里显示如下<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">C:</span></div><div class="line"><span class="function"><span class="title">C</span>:</span></div></pre></td></tr></table></figure></p>
<p>我桌面就两个文件test.bat,test.vbs,%%~di作用是,如果变量%%i的内容是一个文件或者目录名,他就会把他这文件<br>或者目录所在的盘符号打印出来!</p>
<h3 id="pI-仅将-I-扩展到一个路径"><a href="#pI-仅将-I-扩展到一个路径" class="headerlink" title="%~pI 仅将 %I 扩展到一个路径"></a><code>%~pI</code> 仅将 <code>%I</code> 扩展到一个路径</h3><p>这个用法和上面一样,他只打印路径不打印文件名字<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FOR</span> /F "delims==" <span class="variable">%%i</span> <span class="keyword">IN</span> ('<span class="built_in">dir</span> /b') <span class="keyword">DO</span> @<span class="built_in">echo</span>  <span class="variable">%%~</span>pi</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>我就不打结果了,大家自己复制代码看结果吧,下面几个都是这么个用法,代码给出来,大家自己看结果吧!</p>
<h3 id="nI-仅将-I-扩展到一个文件名"><a href="#nI-仅将-I-扩展到一个文件名" class="headerlink" title="%~nI 仅将 %I 扩展到一个文件名"></a><code>%~nI</code> 仅将 <code>%I</code> 扩展到一个文件名</h3><p>只打印文件名字<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FOR</span> /F "delims==" <span class="variable">%%i</span> <span class="keyword">IN</span> ('<span class="built_in">dir</span> /b') <span class="keyword">DO</span> @<span class="built_in">echo</span>  <span class="variable">%%~</span>ni</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<h3 id="xI-仅将-I-扩展到一个文件扩展名"><a href="#xI-仅将-I-扩展到一个文件扩展名" class="headerlink" title="%~xI 仅将 %I 扩展到一个文件扩展名"></a><code>%~xI</code> 仅将 <code>%I</code> 扩展到一个文件扩展名</h3><p>只打印文件的扩展名<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FOR</span> /F "delims==" <span class="variable">%%i</span> <span class="keyword">IN</span> ('<span class="built_in">dir</span> /b') <span class="keyword">DO</span> @<span class="built_in">echo</span>  <span class="variable">%%~</span>xi</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<h3 id="sI-扩展的路径只含有短名"><a href="#sI-扩展的路径只含有短名" class="headerlink" title="%~sI 扩展的路径只含有短名"></a><code>%~sI</code> 扩展的路径只含有短名</h3><p>打印绝对短文件名<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FOR</span> /F "delims==" <span class="variable">%%i</span> <span class="keyword">IN</span> ('<span class="built_in">dir</span> /b') <span class="keyword">DO</span> @<span class="built_in">echo</span>  <span class="variable">%%~</span>si</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<h3 id="aI-将-I-扩展到文件的文件属性"><a href="#aI-将-I-扩展到文件的文件属性" class="headerlink" title="%~aI 将 %I 扩展到文件的文件属性"></a><code>%~aI</code> 将 <code>%I</code> 扩展到文件的文件属性</h3><p>打印文件的属性<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FOR</span> /F "delims==" <span class="variable">%%i</span> <span class="keyword">IN</span> ('<span class="built_in">dir</span> /b') <span class="keyword">DO</span> @<span class="built_in">echo</span>  <span class="variable">%%~</span>ai</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<h3 id="tI-将-I-扩展到文件的日期-时间"><a href="#tI-将-I-扩展到文件的日期-时间" class="headerlink" title="%~tI 将 %I 扩展到文件的日期/时间"></a><code>%~tI</code> 将 <code>%I</code> 扩展到文件的日期/时间</h3><p>打印文件建立的日期<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FOR</span> /F "delims==" <span class="variable">%%i</span> <span class="keyword">IN</span> ('<span class="built_in">dir</span> /b') <span class="keyword">DO</span> @<span class="built_in">echo</span>  <span class="variable">%%~</span>ti</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<h3 id="zI-将-I-扩展到文件的大小"><a href="#zI-将-I-扩展到文件的大小" class="headerlink" title="%~zI 将 %I 扩展到文件的大小"></a><code>%~zI</code> 将 <code>%I</code> 扩展到文件的大小</h3><p>打印文件的大小<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FOR</span> /F "delims==" <span class="variable">%%i</span> <span class="keyword">IN</span> ('<span class="built_in">dir</span> /b') <span class="keyword">DO</span> @<span class="built_in">echo</span>  <span class="variable">%%~</span>zi</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>上面例子中的”delims==”可以改为”delims=”，即不要分隔符</p>
<h3 id="PATH-I"><a href="#PATH-I" class="headerlink" title="%~$PATH:I"></a><code>%~$PATH:I</code></h3><p>查找列在路径环境变量的目录，并将 %I 扩展到找到的第一个完全合格的名称。如果环境变量名未被定义，或者没有找到文件，此组合键会扩展到 空字符串<br>这是最后一个,和上面那些都不一样,我单独说说!</p>
<p>然后在把这些代码保存为批处理,放在桌面。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">FOR</span> /F "delims=" <span class="variable">%%i</span> <span class="keyword">IN</span> (“notepad.exe”) <span class="keyword">DO</span> <span class="built_in">echo</span>  <span class="variable">%%~</span>$<span class="built_in">PATH</span>:i</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>龙卷风补充：上面代码显示结果为<code>C:\WINDOWS\system32\notepad.exe</code></p>
<p>他的意思就在PATH变量里指定的路径里搜索notepad.exe文件，如果有notepad.exe则会把他所在绝对路径打印出来，没有就打印一个错误！</p>
<p>好了,FOR的的变量就介绍到这了!</p>
<h2 id="第四章-批处理中的变量"><a href="#第四章-批处理中的变量" class="headerlink" title="第四章 批处理中的变量"></a>第四章 批处理中的变量</h2><p>批处理中的变量,我把他分为两类,分别为”系统变量”和”自定义变量”</p>
<p>我们现在来详解这两个变量!</p>
<h3 id="一-系统变量"><a href="#一-系统变量" class="headerlink" title="一. 系统变量"></a>一. 系统变量</h3><p>他们的值由系统将其根据事先定义的条件自动赋值,也就是这些变量系统已经给他们定义了值,<br>不需要我们来给他赋值,我们只需要调用而以!  我把他们全部列出来!</p>
<p>%ALLUSERSPROFILE% 本地 返回“所有用户”配置文件的位置。<br>%APPDATA% 本地 返回默认情况下应用程序存储数据的位置。<br>%CD% 本地 返回当前目录字符串。<br>%CMDCMDLINE% 本地 返回用来启动当前的 Cmd.exe 的准确命令行。<br>%CMDEXTVERSION% 系统 返回当前的“命令处理程序扩展”的版本号。<br>%COMPUTERNAME%  系统 返回计算机的名称。<br>%COMSPEC%  系统 返回命令行解释器可执行程序的准确路径。<br>%DATE%  系统 返回当前日期。使用与 date /t 命令相同的格式。由 Cmd.exe 生成。有关</p>
<p>date 命令的详细信息，请参阅 Date。<br>%ERRORLEVEL%  系统 返回上一条命令的错误代码。通常用非零值表示错误。<br>%HOMEDRIVE%  系统 返回连接到用户主目录的本地工作站驱动器号。基于主目录值而设置。用</p>
<p>户主目录是在“本地用户和组”中指定的。<br>%HOMEPATH%  系统 返回用户主目录的完整路径。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。</p>
<p>%HOMESHARE%  系统 返回用户的共享主目录的网络路径。基于主目录值而设置。用户主目录是</p>
<p>在“本地用户和组”中指定的。<br>%LOGONSERVER%  本地 返回验证当前登录会话的域控制器的名称。<br>%NUMBER_OF_PROCESSORS%  系统 指定安装在计算机上的处理器的数目。<br>%OS%  系统 返回操作系统名称。Windows 2000 显示其操作系统为 Windows_NT。<br>%PATH% 系统 指定可执行文件的搜索路径。<br>%PATHEXT% 系统 返回操作系统认为可执行的文件扩展名的列表。<br>%PROCESSOR_ARCHITECTURE%  系统 返回处理器的芯片体系结构。值：x86 或 IA64 基于</p>
<p>Itanium<br>%PROCESSOR_IDENTFIER% 系统 返回处理器说明。<br>%PROCESSOR_LEVEL%  系统 返回计算机上安装的处理器的型号。<br>%PROCESSOR_REVISION% 系统 返回处理器的版本号。<br>%PROMPT% 本地 返回当前解释程序的命令提示符设置。由 Cmd.exe 生成。<br>%RANDOM% 系统 返回 0 到 32767 之间的任意十进制数字。由 Cmd.exe 生成。<br>%SYSTEMDRIVE% 系统 返回包含 Windows server operating system 根目录（即系统根目录）</p>
<p>的驱动器。<br>%SYSTEMROOT%  系统 返回 Windows server operating system 根目录的位置。<br>%TEMP% 和 %TMP% 系统和用户 返回对当前登录用户可用的应用程序所使用的默认临时目录。</p>
<p>有些应用程序需要 TEMP，而其他应用程序则需要 TMP。<br>%TIME% 系统 返回当前时间。使用与 time /t 命令相同的格式。由 Cmd.exe 生成。有关</p>
<p>time 命令的详细信息，请参阅 Time。<br>%USERDOMAIN% 本地 返回包含用户帐户的域的名称。<br>%USERNAME% 本地 返回当前登录的用户的名称。<br>%USERPROFILE% 本地 返回当前用户的配置文件的位置。<br>%WINDIR% 系统 返回操作系统目录的位置。</p>
<p>这么多系统变量,我们如何知道他的值是什么呢?<br>在CMD里输入  echo %WINDIR%<br>这样就能显示一个变量的值了!</p>
<p>举个实际例子,比如我们要复制文件到当前帐号的启动目录里就可以这样<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">copy</span> d:\<span class="number">1</span>.bat "<span class="variable">%USERPROFILE%</span>\「开始」菜单\程序\启动\"</div></pre></td></tr></table></figure></p>
<p>%USERNAME% 本地 返回当前登录的用户的名称。  注意有空格的目录要用引号引起来</p>
<p>另外还有一些系统变量,他们是代表一个意思,或者一个操作!</p>
<p>他们分别是%0 %1 %2 %3 %4 %5 ……一直到%9 还有一个%*</p>
<p>%0 这个有点特殊,有几层意思,先讲%1-%9的意思.</p>
<p>%1 返回批处理的第一个参数<br>%2 返回批处理的第二个参数<br>%3-%9依此推类</p>
<p>反回批处理参数?到底怎么个返回法?</p>
<p>我们看这个例子,把下面的代码保存为test.BAT然后放到C盘下<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">echo</span> %<span class="number">1</span> %<span class="number">2</span> %<span class="number">3</span> %<span class="number">4</span></div><div class="line"><span class="built_in">echo</span> %<span class="number">1</span></div><div class="line"><span class="built_in">echo</span> %<span class="number">2</span></div><div class="line"><span class="built_in">echo</span> %<span class="number">3</span></div><div class="line"><span class="built_in">echo</span> %<span class="number">4</span></div></pre></td></tr></table></figure></p>
<p>进入CMD,输入<code>cd c:\</code><br>然后输入 test.bat 我是第一个参数 我是第二个参数  我是第三个参数  我是第四个参数</p>
<p>注意中间的空格,我们会看到这样的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">我是第一个参数 我是第二个参数 我是第三个参数 我是第四个参数</div><div class="line">我是第一个参数</div><div class="line">我是第二个参数</div><div class="line">我是第三个参数</div><div class="line">我是第四个参数</div></pre></td></tr></table></figure></p>
<p>对比下代码,%1就是”我是第一个参数”  %2就是”我是第二个参数”<br>怎么样理解了吧!</p>
<p>这些%1和%9可以让批处理也能带参数运行,大大提高批处理功能!</p>
<p>还有一个%*  他是什么呢?他的作用不是很大,只是返回参数而已,不过他是一次返回全部参数的值,不用在输入%1 %2来确定一个个的</p>
<p>例子<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">echo</span> %*</div></pre></td></tr></table></figure></p>
<p>同样保存为test.bat 放到C盘<br>进入CMD,输入<code>cd c:\</code><br>然后输入 test.bat 我是第一个参数 我是第二个参数  我是第三个参数  我是第四个参数</p>
<p>可以看到他一次把全部参数都显示出来了</p>
<p>好现在开始讲那个比较特殊的%0</p>
<p>%0  这个不是返回参数的值了,他有两层意思!</p>
<p>第一层意思：返回批处理所在绝对路径</p>
<p>例子：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">echo</span> %<span class="number">0</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>保存为test.BAT放在桌面运行,会显示如下结果<br><code>C:\Documents and Settings\Administrator\桌面\test.bat</code></p>
<p>他把当前批处理执行的所在路经打印出来了,这就是返回批处理所在绝对路径的意思</p>
<p>第二层意思：无限循环执行BAT</p>
<p>例子：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">net</span> user</div><div class="line">%<span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>保存为BAT执行,他就会无限循环执行net user这条命令,直到你手动停止.<br>龙卷风补充：其实%0就是第一参数%1前面那个参数，当然就是批处理文件名（包括路径）。</p>
<p>以上就是批处理中的一些系统变量,另外还有一些变量,他们也表示一些功能,<br>FOR命令中的那些就是,FOR变量已经说过,就不讲了.</p>
<h3 id="二-自定义变量"><a href="#二-自定义变量" class="headerlink" title="二. 自定义变量"></a>二. 自定义变量</h3><p>故名思意,自定义变量就是由我们来给他赋予值的变量</p>
<p>要使用自定义变量就得使用set命令了,看例子.<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> var=我是值</div><div class="line"><span class="built_in">echo</span> <span class="variable">%var%</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>保存为BAT执行,我们会看到CMD里返回一个  “我是值”</p>
<p>var为变量名,=号右变的是要给变量的值<br>这就是最简单的一种设置变量的方法了</p>
<p>如果我们想让用户手工输入变量的值,而不是在代码里指定,可以用用set命令的/p参数</p>
<p>例子：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> /p var=请输入变量的值</div><div class="line"><span class="built_in">echo</span> <span class="variable">%var%</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>var变量名  =号右边的是提示语,不是变量的值<br>变量的值由我们运行后自己用键盘输入!</p>
<p>好了批处理的变量先介绍到这,关于set命令,下次再写个专门的文章吧.</p>
<h2 id="第五章-set命令详解"><a href="#第五章-set命令详解" class="headerlink" title="第五章 set命令详解"></a>第五章 set命令详解</h2><p>很久没发贴了,今天来写点讲BAT的新手教学贴!</p>
<p>在上一贴中我简单的介绍了一下SET设置自定义变量的作用,现在我来具体讲一下set的其他功能.</p>
<h3 id="一-用set命令设置自定义变量"><a href="#一-用set命令设置自定义变量" class="headerlink" title="一. 用set命令设置自定义变量"></a>一. 用set命令设置自定义变量</h3><p>显示、设置或删除 cmd.exe 环境变量。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">SET</span> [variable=[string]]</div><div class="line">  variable  指定环境变量名。</div><div class="line">  string    指定要指派给变量的一系列字符串。</div></pre></td></tr></table></figure></p>
<p>要显示当前环境变量，键入不带参数的 SET。<br>SET 命令不允许变量名含有等号。</p>
<p>注意：以下用法将清除变量variable的值，使其变成未定义状态。<br>SET variable=<br>上面等号后面无任何符号，如果写成SET variable=””，此时变量值并不为空，而是等于两个引号，即””</p>
<p>例子：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> var=我是值</div><div class="line"><span class="built_in">echo</span> <span class="variable">%var%</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>请看 set var=我是值 ,这就是BAT直接在批处理中设置变量的方法!<br>set 是命令   var是变量名  =号右边的”我是值”是变量的值<br>在批处理中我们要引用这个变就把var变量名用两个%(百分号)扩起来,如%var%</p>
<p>SET还可以提供一个交互界面,让用户自己输入变量的值,然后我们在来根据这个值来做相应操作,现在我就来说说SET的这种语法,只需要加一个”/P”参数就可以了!<br>SET /P variable=[promptString]</p>
<p>例子：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> /p var=请输入变量的值:</div><div class="line"><span class="built_in">echo</span> 您输入了 <span class="variable">%var%</span>  ~_~</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>set /p 是命令语法  var是变量名    =号右边的”请输入变量的值: “,这个是提示语,不是变量的值了!<br>运行后,我们在提示语后面直接输入1,就会显示一行您输入了 1 ~_~</p>
<p>好了,先回顾到这,现在讲SET其他功能</p>
<p>使用<code>set /?</code>查看SET的帮助我们发现SET除了我上面讲的<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">SET</span> [variable=[string]]</div><div class="line"><span class="built_in">SET</span> /P variable=[promptString]</div></pre></td></tr></table></figure></p>
<p>这两种语法外,还有如下几种语法：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">SET</span> /A expression</div></pre></td></tr></table></figure></p>
<p>环境变量替换已如下增强：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">%PATH:str1=str2%</span></div><div class="line"><span class="variable">%PATH:~10,5%</span></div><div class="line"><span class="variable">%PATH:~-10%</span></div><div class="line"><span class="variable">%PATH:~0,-2%</span></div></pre></td></tr></table></figure></p>
<p>这机种语法有什么用处呢?下面我们来一个个讲解他们!</p>
<h3 id="二-用set命令进行简单计算"><a href="#二-用set命令进行简单计算" class="headerlink" title="二. 用set命令进行简单计算"></a>二. 用set命令进行简单计算</h3><p>语法：SET /A expression<br>/A 命令行开关指定等号右边的字符串为被评估的数字表达式。该表达式<br>评估器很简单并以递减的优先权顺序支持下列操作：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">()                  -分组</div><div class="line">! ~ -               -一元运算符</div><div class="line">* / %               -算数运算符</div><div class="line">+ -                 -算数运算符</div><div class="line">&lt;&lt; &gt;&gt;               -二进制逻辑移位</div><div class="line">&amp;                   -二进制按位“与”</div><div class="line">^                   -二进制按位“异”</div><div class="line">|                   -二进制按位“或”</div><div class="line">= *= /= %= += -=    -算数赋值</div><div class="line">&amp;= ^= |= &lt;&lt;= &gt;&gt;=    -二进制运算赋值</div><div class="line">,                   -表达式分隔符</div></pre></td></tr></table></figure></p>
<p>如果 SET /A 在命令脚本外的命令行执行的，那么它显示该表达式的最后值。<br>除十六进制有 0x 前缀， 八进制有 0 前缀的，数字值为十进位数字。<br>因此， 0x12 与 18 和 022相同。请注意八进制公式可能很容易搞混：<br> 08 和 09 是无效的数字，因为 8 和 9 不是有效的八进制位数。</p>
<p>上面这些是系统帮助里的内容,看着是不是有点晕，没关系我来简单解释一下：<br>set的/A参数就是让SET可以支持数学符号进行加减等一些简单数学运算!</p>
<p>注意：一般的运算常为十进制运算，如果数字字符串最左边为0，将被认为是八进制，从而出错。比如，0812之类的数字不能参与十进制运算，转换方法为：10812-10000</p>
<p>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> aa=<span class="number">0812</span></div><div class="line"><span class="built_in">set</span> /a aa=<span class="number">1</span><span class="variable">%aa%</span>-<span class="number">10000</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">%aa%</span></div></pre></td></tr></table></figure></p>
<p>结果为：812</p>
<p>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> /p input=请输入计算表达式：</div><div class="line"><span class="built_in">set</span> /a var=<span class="variable">%input%</span></div><div class="line"><span class="built_in">echo</span> 计算结果：<span class="variable">%input%</span>=<span class="variable">%var%</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>上面的例子是龙卷风设计的，很好用哟，请看下面几个运算过程：<br>注意：DOS计算只能进行整数运算，精确到整数</p>
<p>请输入计算表达式：1+9+20+30-10<br>计算结果：1+9+20+30-10=50<br>请按任意键继续. . .</p>
<p>请输入计算表达式：10/3    #除法只能精确到整数<br>计算结果：10/3=3<br>请按任意键继续. . .</p>
<p>请输入计算表达式：-100+62  #负数<br>计算结果：-100+62=-38<br>请按任意键继续. . .</p>
<p>请输入计算表达式：100%3    ＃求余数<br>计算结果：100%3=1<br>请按任意键继续. . .<br>注意：以上的求余数运算符%在批处理程序中必须写成%%</p>
<p>请输入计算表达式：(25+75)<em>2/(15+5)   #括号<br>计算结果：(25+75)</em>2/(15+5)=10<br>请按任意键继续. . .</p>
<p>请输入计算表达式：1234567890<em>9876543210   #范围<br>无效数字。数字精确度限为 32 位。<br>计算结果：1234567890</em>9876543210=<br>请按任意键继续. . .</p>
<p>注意：上面的计算过程显示，DOS计算只能精确到32位，这个32位是指二进制32位，其中最高位为符号位（0为正，1为负），低位31位为数值。31个1换成十进制为2147483647，所以DOS计算的有效值范围是-2147483648至2147483647，超出该数值范围时计算出错，请看下面的计算过程：</p>
<p>请输入计算表达式：2147483647-1    #最大值减1，值有效<br>计算结果：2147483647-1=2147483646<br>请按任意键继续. . .</p>
<p>请输入计算表达式：2147483647+1    #最大值加1，出错，结果为最小值<br>计算结果：2147483647+1=-2147483648<br>请按任意键继续. . .</p>
<p>请输入计算表达式：-2147483648-1   #最小值减1，出错，结果为最大值<br>计算结果：-2147483648-1=2147483647<br>请按任意键继续. . .</p>
<p>运行<code>set /a a=1+1,b=2+1,c=3+1</code>后会显示一个4,但我们用<br>echo %a% %b% %c%后看结果,会发现其他数学运算也有效果!,这就是表达式分隔符<code>,</code>逗号的<br>作用!</p>
<p>有时候我们需要直接在原变量进行加减操作就可以用这种语法<br>set /a var+=1  这样的语法对应原始语法就是set /a var = %var% + 1<br>都是一样的结果,在原变量的值上在进行数学运算,不过这样写简单一点<br>再来一个：<br>set /a var*=2<br>其他都这么用,只要帮助里有这个语法!</p>
<p>另外还有一些用逻辑或取余操作符,这些符号,按照上面的使用方法会报错的</p>
<p>比如我们在CMD里输入set /a var=1 &amp; 1 “与运算”,他并不会显示为1,而是报错,<br>为什么?对于这样的”逻辑或取余操作符”,我们需要把他们用双引号引起来,也可以用转义字符^，看例子</p>
<p>set /a var= 1 “&amp;” 1 这样结果就显示出来了,其他逻辑或取余操作符用法<br>set /a var= 1 “+” 1 异运算<br>set /a var= 1 “%” 1  取模运算<br>set /a var= 3 “&lt;&lt;” 2 左移位运算， 3的二进制为11，左移2位为1100，换成十进制就是12，自行验证<br>set /a var= 4 “&gt;&gt;” 2右移位运算，4的二进制为100，右移动2位为1，结果为1</p>
<p>龙卷风补充：凡是按位计算均需换算成二进制。</p>
<p>思考题：求2的n次方<br>参考答案：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> /p n=请输入<span class="number">2</span>的几次方: </div><div class="line"><span class="built_in">set</span> /a num=<span class="number">1</span>^&lt;^&lt;n</div><div class="line"><span class="built_in">echo</span> <span class="variable">%num%</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">请输入<span class="number">2</span>的几次方: <span class="number">3</span></div><div class="line"><span class="number">8</span></div><div class="line">请按任意键继续. . .</div><div class="line"></div><div class="line">请输入<span class="number">2</span>的几次方: <span class="number">10</span></div><div class="line"><span class="number">1024</span></div><div class="line">请按任意键继续. . .</div><div class="line"></div><div class="line">请输入<span class="number">2</span>的几次方: <span class="number">15</span></div><div class="line"><span class="number">32768</span></div><div class="line">请按任意键继续. . .</div></pre></td></tr></table></figure></p>
<h3 id="三-用set命令进行字符串处理"><a href="#三-用set命令进行字符串处理" class="headerlink" title="三. 用set命令进行字符串处理"></a>三. 用set命令进行字符串处理</h3><h4 id="1-字符串替换"><a href="#1-字符串替换" class="headerlink" title="1. 字符串替换"></a>1. 字符串替换</h4><p>好了，符号说到这，现在说<code>%PATH:str1=str2%</code><br>上面语法的意思就是：将字符串变量%PATH%中的str1替换为str2<br>这个是替换变量值的内容,看例子<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> a= bbs. verybat. cn</div><div class="line"><span class="built_in">echo</span> 替换前的值: "<span class="variable">%a%</span>"</div><div class="line"><span class="built_in">set</span> var=%a: =%</div><div class="line"><span class="built_in">echo</span> 替换后的值: "<span class="variable">%var%</span>"</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>运行显示：（龙卷风添加）<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">替换前的值: " bbs. verybat. cn"</div><div class="line">替换后的值: "bbs.verybat.cn"</div></pre></td></tr></table></figure></p>
<p>对比一下,我们发现他把变量%a%的空格给替换掉了,从这个例子,我们就可以发现<br><code>%PATH:str1=str2%</code>这个操作就是把变量%PATH%的里的str1全部用str2替换</p>
<p>比如我们把上面的例子改成这样<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> a=bbs.verybat.cn</div><div class="line"><span class="built_in">echo</span> 替换前的值: "<span class="variable">%a%</span>"</div><div class="line"><span class="built_in">set</span> var=<span class="variable">%a:.=伤脑筋%</span></div><div class="line"><span class="built_in">echo</span> 替换后的值: "<span class="variable">%var%</span>"</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>运行显示：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">替换前的值: "bbs.verybat.cn"</div><div class="line">替换后的值: "bbs伤脑筋verybat伤脑筋cn"</div></pre></td></tr></table></figure></p>
<p>解释<code>set var=%a:.=伤脑筋%</code><br>set是命令 var是变量名字 a是要进行字符替换的变量的值,”.”为要替换的值, “伤脑筋”为替换后的值!<br>执行后就会把变量%a%里面的”.”全部替换为”伤脑筋”<br>这就是set的替换字符的很好的功能! 替换功能先讲到这，下面将字符串截取功能</p>
<p>请注意：字符串的替换和截取功能在引用变量的地方均可以，并不一定必须要有set命令<br>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> a=bbs.verybat.cn</div><div class="line"><span class="built_in">echo</span> 替换前的值: "<span class="variable">%a%</span>"</div><div class="line"><span class="built_in">echo</span> 替换后的值: "<span class="variable">%a:.=伤脑筋%</span>"</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>此例在echo语句中就替换了字符串，效果一样。</p>
<h4 id="2-字符串截取"><a href="#2-字符串截取" class="headerlink" title="2. 字符串截取"></a>2. 字符串截取</h4><p>截取功能统一语法格式为：<code>%a:~[m[,n]]%</code></p>
<p>方括号表示可选，%为变量标识符，a为变量名，不可少，冒号用于分隔变量名和说明部分，符号～可以简单理解为“偏移”即可，m为偏移量（缺省为0），n为截取长度（缺省为全部）</p>
<p><code>%PATH:~10,5%</code>  这个什么意思,看例子：</p>
<p>截取功能例子1：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> a=bbs.verybat.cn</div><div class="line"><span class="built_in">set</span> var=<span class="variable">%a:~1,2%</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">%var%</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>执行后,我们会发现只显示了”bs”两个字母,我们的变量%a%的值不是为bbs.verybat.cn吗？<br>怎么只显示了第2个字母和第3个字母”bs”,分析一结果我们就可以很容易看出<br><code>%a:~10,5%</code>就是显示变量a里从11位（偏移量10）开始的5个字符!<br>分析<code>set var=%a:~1,2%</code><br>set是命令，var是变量值，a要进行字符操作的变量，”1”从变量”a”第几位开始显示，”2”表示显示几位。<br>合起来就是把变量a的值从第2位（偏移量1）开始,把2个字符赋予给变量var<br>这样应该明白了吧~</p>
<p>其他两种语法<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">%PATH:~-10%</span></div><div class="line"><span class="variable">%PATH:~0,-2%</span></div></pre></td></tr></table></figure></p>
<p>他们也是显示指定变量指定几位的值的意思</p>
<p><code>%PATH:~-10%</code> 看例子</p>
<p>截取功能例子2：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> a=bbs.verybat.cn</div><div class="line"><span class="built_in">set</span> var=<span class="variable">%a:~-3%</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">%var%</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>运行结果：.cn<br>这个就是把变量a倒数3位的值给变量VAR</p>
<p>当然我们也可以改成这样<br>截取功能例子3：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> a=bbs.verybat.cn</div><div class="line"><span class="built_in">set</span> var=<span class="variable">%a:~3%</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">%var%</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>运行显示：.verybat.cn<br>这个就是把变量a的从第3位开始后面全部的值给变量VAR</p>
<p><code>%PATH:~0,-2%</code>  例子</p>
<p>截取功能例子4：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> a=bbs.verybat.cn</div><div class="line"><span class="built_in">set</span> var=<span class="variable">%a:~0,-3%</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">%var%</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>执行后,我们发现显示的是”bbs.verybat”,少了”.cn”<br>从结果分析,很容易分析出,这是把变量a的值从0位开始,<br>到倒数第三位之间的值全部赋予给var</p>
<p>如果改成这样</p>
<p>截取功能例子5：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> a=bbs.verybat.cn</div><div class="line"><span class="built_in">set</span> var=<span class="variable">%a:~2,-3%</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">%var%</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>运行显示：s.verybat<br>那么他就是显示从第3位（偏移量2）开始减去倒数三位字符的值,并赋予给变量var</p>
<p>讲得好，例子就是说明问题，为便于记忆，龙卷风小节如下：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a=bbs.verybat.cn</div><div class="line"><span class="variable">%a:~1,2%</span>   ＝“bs”   偏移量<span class="number">1</span>，从第二位开始向右取<span class="number">2</span>位</div><div class="line"><span class="variable">%a:~-3%</span>    ＝“.cn”  偏移量负<span class="number">3</span>，即倒数<span class="number">3</span>位（也可理解为留下右边<span class="number">3</span>位），右取全部</div><div class="line"><span class="variable">%a:~3%</span>     ＝“.verybat.cn” 偏移量<span class="number">3</span>（也可理解为去掉左边<span class="number">3</span>位），右取全部</div><div class="line"><span class="variable">%a:~0,-3%</span>   ＝“bbs.verybat” 偏移量<span class="number">0</span>，右取长度至负<span class="number">3</span>，即倒数<span class="number">3</span>位</div><div class="line"><span class="variable">%a:~2,-3%</span>   ＝“s.verybat”  偏移量<span class="number">2</span>，右取长度至负<span class="number">3</span>，即倒数<span class="number">3</span>位</div></pre></td></tr></table></figure></p>
<p>所以，截取功能统一语法格式为：<code>%a:~[m[,n]]%</code></p>
<p>方括号表示可选，%a%为变量名，不可少，冒号用于分隔变量名和说明部分，符号～可以简单理解为“偏移”即可，m为偏移量（缺省为0），n为截取长度（缺省为全部）<br>上面所述用法其实相当于vbs函数mid. left. right<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">%a:~0,n%</span>  相当于函数left(a,n)  取左边n位</div><div class="line"><span class="variable">%a:~-m%</span>  相当于函数right（a,m） 取右边m位</div><div class="line"><span class="variable">%a:~m,n%</span> 相当于函数mid(a,m+<span class="number">1</span>,n) 从m+<span class="number">1</span>位开始取n位</div><div class="line"><span class="variable">%a:~m,-n%</span> 相当于函数mid(a,m+<span class="number">1</span>,len(a)-m-n),从m+<span class="number">1</span>位开始，至倒数n+<span class="number">1</span>位</div><div class="line">%a:~m %  相当于函数mid(a,m+<span class="number">1</span>,len(a)-m) 或者right(a,len(a)-m)，从m+<span class="number">1</span>位开始取右边全部。</div></pre></td></tr></table></figure></p>
<p>思考题目：输入任意字符串，求字符串的长度<br>参考答案：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> /p str=请输入任意长度的字符串:</div><div class="line"><span class="built_in">echo</span> 你输入了字符串:"<span class="variable">%str%</span>"</div><div class="line"><span class="keyword">call</span> :stringlenth "<span class="variable">%str%</span>" num</div><div class="line"><span class="built_in">echo</span> 字符串长度为：<span class="variable">%num%</span></div><div class="line"><span class="built_in">pause</span></div><div class="line"><span class="keyword">exit</span></div></pre></td></tr></table></figure></p>
<figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">:StringLenth</div><div class="line">::---------字符串长度计算子程序</div><div class="line">::---------参数%<span class="number">1</span>为字符串(如有空格，请用引号括起来)</div><div class="line">::---------参数%<span class="number">2</span>为返回变量名称，不能含空格或特殊字符</div><div class="line">::@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> theString=%~<span class="number">1</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">defined</span> theString <span class="keyword">goto</span> :eof</div><div class="line"><span class="built_in">set</span> Return=<span class="number">0</span></div><div class="line">:StringLenth_continue</div><div class="line"><span class="built_in">set</span> /a Return+=<span class="number">1</span></div><div class="line"><span class="built_in">set</span> thestring=<span class="variable">%thestring:~0,-1%</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">defined</span> thestring <span class="keyword">goto</span> StringLenth_continue</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> "%<span class="number">2</span>"=="" <span class="built_in">set</span> <span class="variable">%2=%</span>Return%</div><div class="line"><span class="keyword">goto</span> :eof</div></pre></td></tr></table></figure>
<p>好了set的一些用法,就介绍到这了,希望对各位有所帮助,时间不早睡觉Zz…. by 伤脑筋</p>
<h2 id="第六章-if命令讲解"><a href="#第六章-if命令讲解" class="headerlink" title="第六章 if命令讲解"></a>第六章 if命令讲解</h2><p>最近发现有些朋友一老问IF命令的用法,IF命令个人觉得很简单,所以就一直没把发放到新手教学贴里说,现在我给补上一文,希望对各位”非常BAT的”新手朋友们有所帮助.</p>
<p>现在开始：</p>
<p>在CMD使用IF /?打开IF的系统帮助(自己看我就不全部列出来了),我们会发现IF有3种基本的用法!<br>执行批处理程序中的条件处理。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">IF</span> [<span class="keyword">NOT</span>] <span class="keyword">ERRORLEVEL</span> number command</div><div class="line"><span class="keyword">IF</span> [<span class="keyword">NOT</span>] string1==string2 command</div><div class="line"><span class="keyword">IF</span> [<span class="keyword">NOT</span>] <span class="keyword">EXIST</span> filename command</div><div class="line"></div><div class="line">  <span class="keyword">NOT</span>               指定只有条件为 false 的情况下， Windows XP 才</div><div class="line">                    应该执行该命令。</div><div class="line"></div><div class="line">  <span class="keyword">ERRORLEVEL</span> number 如果最后运行的程序返回一个等于或大于</div><div class="line">                    指定数字的退出编码，指定条件为 true。</div><div class="line"></div><div class="line">  string1==string2  如果指定的文字字符串匹配，指定条件为 true。</div><div class="line"></div><div class="line">  <span class="keyword">EXIST</span> filename    如果指定的文件名存在，指定条件为 true。</div><div class="line"></div><div class="line">  command           如果符合条件，指定要执行的命令。如果指定的</div><div class="line">                     条件为 FALSE，命令后可跟一个执行 <span class="keyword">ELSE</span></div><div class="line">                      关键字后的命令的 <span class="keyword">ELSE</span> 命令。</div></pre></td></tr></table></figure></p>
<p>ELSE 子句必须在 IF 之后出现在同一行上。例如：</p>
<pre><code>IF EXIST filename (
    del filename
) ELSE (
    echo filename missing
)
</code></pre><h3 id="第一种用法：IF-NOT-ERRORLEVEL-number-command"><a href="#第一种用法：IF-NOT-ERRORLEVEL-number-command" class="headerlink" title="第一种用法：IF [NOT] ERRORLEVEL number command"></a>第一种用法：IF [NOT] ERRORLEVEL number command</h3><p>这个用法的基本做用是判断上一条命令执行结果的代码,以决定下一个步骤.<br>一般上一条命令的执行结果代码只有两结果,”成功”用0表示  “失败”用1表示.</p>
<p>举个例子：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">net</span> user</div><div class="line"><span class="keyword">IF</span> <span class="variable">%ERRORLEVEL%</span> == <span class="number">0</span> <span class="built_in">echo</span> <span class="built_in">net</span> user 执行成功了!</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>这是个简单判断上条命令是否执行成功.<br>细心的朋友可能会发现,这个用法和帮助里的用法不太一样,按照帮助里的写法”IF %ERRORLEVEL% == 0 echo net user 执行成功了!  “这一句代码应该写成 IF ERRORLEVEL 0 echo net user 执行成功了!<br>那为什么我要写成这样呢?各位自己把代码改掉执行后,就会发现错误了!用这种语法,不管你的上面的命令是否执行成功,他都会认为命令成功了,不知道是BUG还是本人理解错误…</p>
<p>补充：这不是bug，而是 if errorlevel 语句的特点：当使用 if errorlevel 0 …… 的句式时，它的含义是：如果错误码的值大于或等于0的时候，将执行某个操作；当使用 if %errorlevel%==0 …… 的句式时，它的含义是：如果错误码的值等于0的时候，将执行某操作。因为这两种句式含义的差别，如果使用前一种句式的时候，错误码语句的排列顺序是从大到小排列</p>
<p>%ERRORLEVEL% 这是个系统变量,返回上条命令的执行结果代码! “成功”用0表示  “失败”用1表示. 当然还有其他参数,用的时候基本就这两数字.<br>一般上一条命令的执行结果代码只有两结果,”成功”用0表示  “失败”用1表示<br>　　这只是一般的情况，实际上，errorlevel返回值可以在0~255之间，比如，xcopy默认的errorlevel值就有5个，分别表示5种执行状态：</p>
<p>退出码 说明<br>0 文件复制没有错误。<br>1 if errorlevel 2 echo。<br>2 用户按 CTRL+C 终止了 xcopy。<br>4 出现了初始化错误。没有足够的内存或磁盘空间，或命令行上输入了无效的驱动器名称或语法。<br>5 出现了磁盘写入错误。</p>
<p>要判断上面xcopy命令的5种退出情况，应写成：<br>if errorlevel 5 echo出现了磁盘写入错误<br>if errorlevel 4 echo出现了初始化错误<br>if errorlevel 2 echo用户按 CTRL+C 终止了 xcopy<br>if errorlevel 1 echo if errorlevel 2 echo<br>if errorlevel 0 echo文件复制没有错误。<br>才能正确执行。</p>
<p>补充完毕。</p>
<p>再举几个例子给新手理解<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">net</span> usertest</div><div class="line"><span class="keyword">IF</span> <span class="variable">%ERRORLEVEL%</span> == <span class="number">1</span> <span class="built_in">echo</span> <span class="built_in">net</span> user 执行失败了!</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>这个是判断上一条命令是否执行失败的<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> /p var=随便输入个命令:</div><div class="line"><span class="variable">%var%</span></div><div class="line"><span class="keyword">if</span> <span class="variable">%ERRORLEVEL%</span> == <span class="number">0</span> <span class="keyword">goto</span> yes</div><div class="line"><span class="keyword">goto</span> no</div><div class="line">:yes</div><div class="line"><span class="built_in">echo</span> <span class="variable">!var!</span> 执行成功了</div><div class="line"><span class="built_in">pause</span></div><div class="line"><span class="keyword">exit</span></div><div class="line">:no</div><div class="line"><span class="built_in">echo</span> 基本上执行失败了..</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>这个是根据你输入的命令,自动判断是成功还是失败了!</p>
<p>在来一个简化版的<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> /p var=随便输入个命令:</div><div class="line"><span class="variable">%var%</span></div><div class="line"><span class="keyword">if</span> <span class="variable">%ERRORLEVEL%</span> == <span class="number">0</span> (<span class="built_in">echo</span> <span class="variable">%var%</span>执行成功了) <span class="keyword">ELSE</span> <span class="built_in">echo</span> <span class="variable">%var%</span>执行失败了!</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>else后面写上执行失败后的操作!</p>
<p>当然我门还可以把if else这样的语句分成几行写出来,使他看上去好看点…<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> /p var=随便输入个命令:</div><div class="line"><span class="variable">%var%</span></div><div class="line"><span class="keyword">if</span> <span class="variable">%ERRORLEVEL%</span> == <span class="number">0</span>  (</div><div class="line">   <span class="built_in">echo</span> <span class="variable">!var!</span> 执行成功了</div><div class="line">   ) <span class="keyword">ELSE</span> (</div><div class="line">   <span class="built_in">echo</span> 基本上执行失败了..</div><div class="line">   )</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>这里介绍的两种简写对IF的三种语法都可以套用,不单单是在IF [NOT] ERRORLEVEL number command<br>这种法上才能用</p>
<h3 id="第二种用法：IF-NOT-string1-string2-command"><a href="#第二种用法：IF-NOT-string1-string2-command" class="headerlink" title="第二种用法：IF [NOT] string1==string2 command"></a>第二种用法：IF [NOT] string1==string2 command</h3><p>这个呢就是用来比较变量或者字符的值是不是相等的.</p>
<p>例子<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> /p var=请输入第一个比较字符:</div><div class="line"><span class="built_in">set</span> /p var2=请输入第二个比较字符:</div><div class="line"><span class="keyword">if</span> <span class="variable">%var%</span> == <span class="variable">%var2%</span> (<span class="built_in">echo</span> 我们相等) <span class="keyword">ELSE</span> <span class="built_in">echo</span> 我们不相等</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>上面这个例子可以判断你输入的值是不是相等,但是你如果输入相同的字符,但是如果其中一个后面打了一个空格,<br>这个例子还是会认为相等,如何让有空格的输入不相等呢?我们在比较字符上加个双引号就可以了.<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> /p var=请输入第一个比较字符:</div><div class="line"><span class="built_in">set</span> /p var2=请输入第二个比较字符(多输入个空格试试):</div><div class="line"><span class="keyword">if</span> "<span class="variable">%var%</span>" == "<span class="variable">%var2%</span>" (<span class="built_in">echo</span> 我们相等) <span class="keyword">ELSE</span> <span class="built_in">echo</span> 我们不相等</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<h3 id="第三种用法：IF-NOT-EXIST-filename-command"><a href="#第三种用法：IF-NOT-EXIST-filename-command" class="headerlink" title="第三种用法：IF [NOT] EXIST filename command"></a>第三种用法：IF [NOT] EXIST filename command</h3><p>这个就是判断某个文件或者文件夹是否存在的语法</p>
<p>例子<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">if</span> <span class="keyword">exist</span> "c:\test" (<span class="built_in">echo</span> 存在文件) <span class="keyword">ELSE</span> <span class="built_in">echo</span> 不存在文件</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>判断的文件路径加引号是为了防止路径有空格,如果路径有空格加个双引号就不会出现判断出错了!</p>
<p>这个语法没什么太多的用法,基本就这样了,就不多介绍了.</p>
<p>另外我们看到每条IF用法后都有个[NOT]语句,这啥意思?其他加上他的话,就表示先判断我们的条件不成立时,<br>没加他默认是先判断条件成立时,比如上面这个例子<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exist</span> "c:\test" (<span class="built_in">echo</span> 存在文件) <span class="keyword">ELSE</span> <span class="built_in">echo</span> 不存在文件</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>加个NOT,执行后有什么结果,如果你的C盘下根本就没<code>c:\test</code>,他还是会显示”存在文件”,这就表示了加了NOT就<br>会先判断条件失败!懂了吧,上面例子改成这样就正确了!<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exist</span> "c:\test" (<span class="built_in">echo</span> 不存在文件) <span class="keyword">ELSE</span> <span class="built_in">echo</span> 存在文件</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<h3 id="第四种用法：IF增强的用法"><a href="#第四种用法：IF增强的用法" class="headerlink" title="第四种用法：IF增强的用法"></a>第四种用法：IF增强的用法</h3><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">IF</span> [/I] string1 compare-op string2 command  #参数/I表示不区分大小写</div><div class="line"><span class="keyword">IF</span> CMDEXTVERSION number command</div><div class="line"><span class="keyword">IF</span> <span class="keyword">DEFINED</span> variable command  #判断变量是否存在，很有用</div></pre></td></tr></table></figure>
<p>CMDEXTVERSION 条件的作用跟 ERRORLEVEL 的一样，除了它<br>是在跟与命令扩展名有关联的内部版本号比较。第一个版本<br>是 1。每次对命令扩展名有相当大的增强时，版本号会增加一个。<br>命令扩展名被停用时，CMDEXTVERSION 条件不是真的。</p>
<p>如果已定义环境变量，DEFINED 条件的作用跟 EXISTS 的一样<br><code>IF DEFINED variable command</code><br><code>IF NOT &quot;variable&quot;==&quot;&quot; command</code><br>上面两条命令效果一样。</p>
<p>用“set variable=”命令使变量variable变成未定义，即空值。</p>
<p>一句话，变量值为空，则为未定义；变量值不为空，则为已定义。<br>用语句IF DEFINED variable command判断变量是否存在时，请注意variable为不使用引导符号%的变量名，不能用写为%variable%，否则出错。</p>
<p>例：<br><code>if defined aa (echo 变量aa存在) else (echo 变量aa不存在)</code><br>运行显示：变量aa不存在</p>
<p>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> aa=<span class="number">123</span></div><div class="line"><span class="built_in">set</span> aa=</div><div class="line"><span class="keyword">if</span> <span class="keyword">defined</span> aa (<span class="built_in">echo</span> 变量aa存在) <span class="keyword">else</span> (<span class="built_in">echo</span> 变量aa不存在)</div></pre></td></tr></table></figure></p>
<p>运行显示：变量aa不存在</p>
<p>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">if</span> a == A (<span class="built_in">echo</span> 我们相等) <span class="keyword">ELSE</span> <span class="built_in">echo</span> 我们不相等</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>执行后会显示：我们不相等</p>
<p>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">if</span> /i a == A (<span class="built_in">echo</span> 我们相等) <span class="keyword">ELSE</span> <span class="built_in">echo</span> 我们不相等</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>加上/I不区分大小写就相等了!</p>
<p>最后面还有一些用来判断数字的符号</p>
<pre><code>EQU - 等于
NEQ - 不等于
LSS - 小于
LEQ - 小于或等于
GTR - 大于
GEQ - 大于或等于
</code></pre><p>我就举一个例子,大家都懂数学…不讲多了<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> /p var=请输入一个数字:</div><div class="line"><span class="keyword">if</span> <span class="variable">%var%</span> <span class="keyword">LEQ</span>  <span class="number">4</span> (<span class="built_in">echo</span> 我小于等于<span class="number">4</span>) <span class="keyword">ELSE</span> <span class="built_in">echo</span> 我不小于等于<span class="number">4</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<h2 id="第七章-DOS编程高级技巧"><a href="#第七章-DOS编程高级技巧" class="headerlink" title="第七章 DOS编程高级技巧"></a>第七章 DOS编程高级技巧</h2><p>本章节乃龙卷风根据自己平时学用批处理的经验而总结的，不断补充中……。</p>
<h3 id="一-交互界面设计"><a href="#一-交互界面设计" class="headerlink" title="一. 交互界面设计"></a>一. 交互界面设计</h3><p>没啥说的，看看高手设计的菜单界面吧：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">cls</span></div><div class="line"><span class="built_in">title</span> 终极多功能修复</div><div class="line">:menu</div><div class="line"><span class="built_in">cls</span></div><div class="line"><span class="built_in">color</span> <span class="number">0</span>A</div><div class="line"><span class="built_in">echo</span>.</div><div class="line"><span class="built_in">echo</span>                 ==============================</div><div class="line"><span class="built_in">echo</span>                 请选择要进行的操作，然后按回车</div><div class="line"><span class="built_in">echo</span>                 ==============================</div><div class="line"><span class="built_in">echo</span>.</div><div class="line"><span class="built_in">echo</span>              <span class="number">1</span>.网络修复及上网相关设置,修复IE,自定义屏蔽网站</div><div class="line"><span class="built_in">echo</span>.</div><div class="line"><span class="built_in">echo</span>              <span class="number">2</span>.病毒专杀工具，端口关闭工具,关闭自动播放</div><div class="line"><span class="built_in">echo</span>.</div><div class="line"><span class="built_in">echo</span>              <span class="number">3</span>.清除所有多余的自启动项目，修复系统错误</div><div class="line"><span class="built_in">echo</span>.</div><div class="line"><span class="built_in">echo</span>              <span class="number">4</span>.清理系统垃圾,提高启动速度</div><div class="line"><span class="built_in">echo</span>.</div><div class="line"><span class="built_in">echo</span>              Q.退出</div><div class="line"><span class="built_in">echo</span>.</div><div class="line"><span class="built_in">echo</span>.</div><div class="line">:cho</div><div class="line"><span class="built_in">set</span> choice=</div><div class="line"><span class="built_in">set</span> /p choice=          请选择:</div><div class="line"><span class="keyword">IF</span> <span class="keyword">NOT</span> "<span class="variable">%choice%</span>"=="" <span class="built_in">SET</span> choice=<span class="variable">%choice:~0,1%</span></div><div class="line"><span class="keyword">if</span> /i "<span class="variable">%choice%</span>"=="<span class="number">1</span>" <span class="keyword">goto</span> ip</div><div class="line"><span class="keyword">if</span> /i "<span class="variable">%choice%</span>"=="<span class="number">2</span>" <span class="keyword">goto</span> setsave</div><div class="line"><span class="keyword">if</span> /i "<span class="variable">%choice%</span>"=="<span class="number">3</span>" <span class="keyword">goto</span> kaiji</div><div class="line"><span class="keyword">if</span> /i "<span class="variable">%choice%</span>"=="<span class="number">4</span>" <span class="keyword">goto</span> clean</div><div class="line"><span class="keyword">if</span> /i "<span class="variable">%choice%</span>"=="Q" <span class="keyword">goto</span> endd</div><div class="line"><span class="built_in">echo</span> 选择无效，请重新输入</div><div class="line"><span class="built_in">echo</span>.</div><div class="line"><span class="keyword">goto</span> cho</div></pre></td></tr></table></figure></p>
<p>只要学完本教程前面的章节，上面的程序应该能看懂了。</p>
<h3 id="二-if…else…条件语句"><a href="#二-if…else…条件语句" class="headerlink" title="二. if…else…条件语句"></a>二. if…else…条件语句</h3><p>前面已经谈到，DOS条件语句主要有以下形式<br>IF [NOT] ERRORLEVEL number command<br>IF [NOT] string1==string2 command<br>IF [NOT] EXIST filename command<br>增强用法：IF [/I] string1 compare-op string2 command<br>增强用法中加上/I就不区分大小写了!<br>增强用法中还有一些用来判断数字的符号：</p>
<p>EQU - 等于<br>NEQ - 不等于<br>LSS - 小于<br>LEQ - 小于或等于<br>GTR - 大于<br>GEQ - 大于或等于</p>
<p>上面的command命令都可以用小括号来使用多条命令的组合，包括else子句，组合命令中可以嵌套使用条件或循环命令。</p>
<p>例如：</p>
<pre><code>IF EXIST filename (
    del filename
) ELSE (
    echo filename missing
)
</code></pre><p>也可写成：<br>if exist filename (del filename) else (echo filename missing)<br>但这种写法不适合命令太多或嵌套命令的使用。</p>
<h3 id="三-循环语句"><a href="#三-循环语句" class="headerlink" title="三. 循环语句"></a>三. 循环语句</h3><ol>
<li><p>指定次数循环</p>
<figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FOR</span> /L %variable <span class="keyword">IN</span> (<span class="built_in">start</span>,step,end) <span class="keyword">DO</span> command [command-parameters]</div><div class="line"></div><div class="line">组合命令：</div><div class="line"><span class="keyword">FOR</span> /L %variable <span class="keyword">IN</span> (<span class="built_in">start</span>,step,end) <span class="keyword">DO</span> (</div><div class="line">Command1</div><div class="line">Command2</div><div class="line">……</div><div class="line">)</div></pre></td></tr></table></figure>
</li>
<li><p>对某集合执行循环语句。</p>
<figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FOR</span> <span class="variable">%%v</span>ariable <span class="keyword">IN</span> (<span class="built_in">set</span>) <span class="keyword">DO</span> command [command-parameters]</div><div class="line"></div><div class="line">  <span class="variable">%%v</span>ariable  指定一个单一字母可替换的参数。</div><div class="line">  (<span class="built_in">set</span>)      指定一个或一组文件。可以使用通配符。</div><div class="line">  command   对每个文件执行的命令，可用小括号使用多条命令组合。</div><div class="line"></div><div class="line"><span class="keyword">FOR</span> /R [[drive:]<span class="built_in">path</span>] %variable <span class="keyword">IN</span> (<span class="built_in">set</span>) <span class="keyword">DO</span> command [command-parameters]</div><div class="line"></div><div class="line">    检查以 [drive:]<span class="built_in">path</span> 为根的目录树，指向每个目录中的</div><div class="line">    <span class="keyword">FOR</span> 语句。如果在 /R 后没有指定目录，则使用当前目录。如果集仅为一个单点(.)字符，</div><div class="line">    则枚举该目录树。</div></pre></td></tr></table></figure>
</li>
</ol>
<p>同前面一样，command可以用括号来组合：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FOR</span> /R [[drive:]<span class="built_in">path</span>] %variable <span class="keyword">IN</span> (<span class="built_in">set</span>) <span class="keyword">DO</span> (</div><div class="line">Command1</div><div class="line">Command2</div><div class="line">……</div><div class="line">commandn</div><div class="line">)</div></pre></td></tr></table></figure></p>
<ol>
<li>条件循环<br>上面的循环结构是用for命令来实现的，for命令循环有一个缺点，就是整个循环被当作一条命令语句，涉及到变量延迟的问题。<br>利用goto语句和条件判断，dos可以实现条件循环，很简单啦，看例子：</li>
</ol>
<p>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> var=<span class="number">0</span></div><div class="line"><span class="comment">rem ************循环开始了</span></div><div class="line">:continue</div><div class="line"><span class="built_in">set</span> /a var+=<span class="number">1</span></div><div class="line"><span class="built_in">echo</span> 第<span class="variable">%var%</span>次循环</div><div class="line"><span class="keyword">if</span> <span class="variable">%var%</span> <span class="keyword">lss</span> <span class="number">100</span> <span class="keyword">goto</span> continue</div><div class="line"><span class="comment">rem ************循环结束了</span></div><div class="line"><span class="built_in">echo</span> 循环执行完毕</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> var=<span class="number">100</span></div><div class="line"><span class="comment">rem ************循环开始了</span></div><div class="line">:continue</div><div class="line"><span class="built_in">echo</span> 第<span class="variable">%var%</span>次循环</div><div class="line"><span class="built_in">set</span> /a var-=<span class="number">1</span></div><div class="line"><span class="keyword">if</span> <span class="variable">%var%</span> <span class="keyword">gtr</span> <span class="number">0</span> <span class="keyword">goto</span> continue</div><div class="line"><span class="comment">rem ************循环结束了</span></div><div class="line"><span class="built_in">echo</span> 循环执行完毕</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<h3 id="四-子程序"><a href="#四-子程序" class="headerlink" title="四. 子程序"></a>四. 子程序</h3><p>在批处理程序中可以调用外部可运行程序，比如exe程序，也可调用其他批处理程序，这些也可以看作子程序，但是不够方便，如果被调用的程序很多，就显得不够简明了，很繁琐。<br>   在windowsXP中，批处理可以调用本程序中的一个程序段，相当于子程序，这些子程序一般放在主程序后面。</p>
<p>子程序调用格式：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CALL</span> :<span class="built_in">label</span> arguments</div></pre></td></tr></table></figure></p>
<p>子程序语法：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">:<span class="built_in">label</span></div><div class="line">command1</div><div class="line">command2</div><div class="line">......</div><div class="line">commandn</div><div class="line"><span class="keyword">goto</span> :eof</div></pre></td></tr></table></figure></p>
<p>在子程序段中，参数<code>%0</code>指标签<code>:label</code></p>
<p>子过程一般放在最后，并且注意在主程序最后要加上exit或跳转语句，避免错误的进入子过程。</p>
<p>子程序和主程序中的变量都是全局变量，其作用范围都是整个批处理程序。</p>
<p>传至子程序的参数在call语句中指定，在子程序中用%1. %2至%9的形式调用，而子程序返回主程序的数据只需在调用结束后直接引用就可以了，当然也可以指定返回变量，请看下面的例子。</p>
<p>子程序例1：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">call</span> :sub return 你好</div><div class="line"><span class="built_in">echo</span> 子程序返回值：<span class="variable">%return%</span></div><div class="line"><span class="built_in">pause</span></div><div class="line"></div><div class="line">:sub</div><div class="line"><span class="built_in">set</span> <span class="variable">%1=%</span><span class="number">2</span></div><div class="line"><span class="keyword">goto</span> :eof</div></pre></td></tr></table></figure></p>
<p>运行结果：你好</p>
<p>子程序例2：设计一个求多个整数相加的子程序<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> sum=<span class="number">0</span></div><div class="line"><span class="keyword">call</span> :sub sum <span class="number">10</span> <span class="number">20</span> <span class="number">35</span></div><div class="line"><span class="built_in">echo</span> 数据求和结果：<span class="variable">%sum%</span></div><div class="line"><span class="built_in">pause</span></div><div class="line"></div><div class="line">:sub</div><div class="line"><span class="comment">rem 参数1为返回变量名称</span></div><div class="line"><span class="built_in">set</span> /a <span class="variable">%1=%</span><span class="number">1</span>+%<span class="number">2</span></div><div class="line"><span class="built_in">shift</span> /<span class="number">2</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> "%<span class="number">2</span>"=="" <span class="keyword">goto</span> sub</div><div class="line"><span class="keyword">goto</span> :eof</div></pre></td></tr></table></figure></p>
<p>运行结果：65</p>
<p>在win98系统中，不支持上面这种标号调用，须将子程序单独保存为一个批处理程序，然后调用。</p>
<h3 id="五-用ftp命令实现自动下载"><a href="#五-用ftp命令实现自动下载" class="headerlink" title="五. 用ftp命令实现自动下载"></a>五. 用ftp命令实现自动下载</h3><p>ftp是常用的下载工具，ftp界面中有40多个常用命令，自己学习了，不介绍了。这里介绍如何用dos命令行调用ftp命令，实现ftp自动登录，并上传下载，并自动退出ftp程序。<br>其实可以将ftp命令组合保存为一个文本文件，然后用以下命令调用即可。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ftp  -n -s:[[drive:]<span class="built_in">path</span>]filename</div></pre></td></tr></table></figure></p>
<p>上面的filename为ftp命令文件，包括登录IP地址，用户名. 密码. 操作命令等<br>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">open <span class="number">90</span>.<span class="number">52</span>.<span class="number">8</span>.<span class="number">3</span>   ＃打开ip</div><div class="line">user iware       ＃用户为iware</div><div class="line">password8848    ＃密码</div><div class="line">bin             ＃二进制传输模式</div><div class="line">prompt</div><div class="line"><span class="built_in">cd</span> tmp1         ＃切换至iware用户下的tmp1目录</div><div class="line">pwd</div><div class="line">lcd d:\download   ＃本地目录</div><div class="line">mget *          ＃下载tmp1目录下的所有文件</div><div class="line">bye             ＃退出ftp</div></pre></td></tr></table></figure></p>
<h3 id="六-用7-ZIP实现命令行压缩和解压功能"><a href="#六-用7-ZIP实现命令行压缩和解压功能" class="headerlink" title="六. 用7-ZIP实现命令行压缩和解压功能"></a>六. 用7-ZIP实现命令行压缩和解压功能</h3><p>语法格式：（详细情况见7-zip帮助文件，看得头晕可以跳过，用到再学）<br>7z <command> [<switch>…] <base_archive_name> [<arguments>…]</arguments></base_archive_name></switch></p>
<p>7z.exe的每个命令都有不同的参数<switch>,请看帮助文件</switch></p>
<p><base_archive_name>为压缩包名称</base_archive_name></p>
<p><arguments>为文件名称，支持通配符或文件列表</arguments></p>
<p>其中，7z是至命令行压缩解压程序7z.exe，<command>是7z.exe包含的命令，列举如下：</p>
<p>a： Adds files to archive. 添加至压缩包<br>a命令可用参数：<br>  -i (Include)<br>  -m (Method)<br>  -p (Set Password)<br>  -r (Recurse)<br>  -sfx (create SFX)<br>  -si (use StdIn)<br>  -so (use StdOut)<br>  -ssw (Compress shared files)<br>  -t (Type of archive)<br>  -u (Update)<br>  -v (Volumes)<br>  -w (Working Dir)<br>  -x (Exclude)</p>
<p>b： Benchmark</p>
<p>d： Deletes files from archive. 从压缩包中删除文件<br>d命令可用参数：<br>  -i (Include)<br>  -m (Method)<br>  -p (Set Password)<br>  -r (Recurse)<br>  -u (Update)<br>  -w (Working Dir)<br>  -x (Exclude)</p>
<p>e： Extract解压文件至当前目录或指定目录<br>e命令可用参数：<br>  -ai (Include archives)<br>  -an (Disable parsing of archive_name)<br>  -ao (Overwrite mode)<br>  -ax (Exclude archives)<br>  -i (Include)<br>  -o (Set Output Directory)<br>  -p (Set Password)<br>  -r (Recurse)<br>  -so (use StdOut)<br>  -x (Exclude)<br>  -y (Assume Yes on all queries)</p>
<p>l： Lists contents of archive.<br>t： Test<br>u： Update</p>
<p>x： eXtract with full paths用文件的完整路径解压至当前目录或指定目录<br>x命令可用参数：<br>  -ai (Include archives)<br>  -an (Disable parsing of archive_name)<br>  -ao (Overwrite mode)<br>  -ax (Exclude archives)<br>  -i (Include)<br>  -o (Set Output Directory)<br>  -p (Set Password)<br>  -r (Recurse)<br>  -so (use StdOut)<br>  -x (Exclude)<br>  -y (Assume Yes on all queries)</p>
<p>七. 调用VBScript程序</p>
<p>使用 Windows 脚本宿主，可以在命令提示符下运行脚本。CScript.exe 提供了用于设置脚本属性的命令行开关。</p>
<figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">用法：CScript 脚本名称 [脚本选项...] [脚本参数...]</div><div class="line"></div><div class="line">选项：</div><div class="line"> //B         批模式：不显示脚本错误及提示信息</div><div class="line"> //D         启用 Active Debugging</div><div class="line"> //E:engine  使用执行脚本的引擎</div><div class="line"> //H:CScript 将默认的脚本宿主改为 CScript.exe</div><div class="line"> //H:WScript 将默认的脚本宿主改为 WScript.exe （默认）</div><div class="line"> //I         交互模式（默认，与 //B 相对)</div><div class="line"> //Job:xxxx  执行一个 WSF 工作</div><div class="line"> //Logo      显示徽标（默认）</div><div class="line"> //Nologo    不显示徽标：执行时不显示标志</div><div class="line"> //S         为该用户保存当前命令行选项</div><div class="line"> //T:nn      超时设定秒：允许脚本运行的最长时间</div><div class="line"> //X         在调试器中执行脚本</div><div class="line"> //U         用 Unicode 表示来自控制台的重定向 I/O</div></pre></td></tr></table></figure>
<p>“脚本名称”是带有扩展名和必需的路径信息的脚本文件名称，如<code>d:\admin\vbscripts\chart.vbs</code>。<br>“脚本选项和参数”将传递给脚本。脚本参数前面有一个斜杠 (/)。每个参数都是可选的；但不能在未指定脚本名称的情况下指定脚本选项。如果未指定参数，则 CScript 将显示 CScript 语法和有效的宿主参数。</p>
<h3 id="八-将批处理转化为可执行文件："><a href="#八-将批处理转化为可执行文件：" class="headerlink" title="八. 将批处理转化为可执行文件："></a>八. 将批处理转化为可执行文件：</h3><p>由于批处理文件是一种文本文件，任何人都可以对其进行随便编辑，不小心就会把里面的命令破坏掉，所以如果将其转换成.com格式的可执行文件，不仅执行效率会大大提高，而且不会破坏原来的功能，更能将优先级提到最高。Bat2Com就可以完成这个转换工作。<br>小知识：在DOS环境下，可执行文件的优先级由高到低依次为<code>.com&gt;.exe&gt;.bat&gt;.cmd</code>，即如果在同一目录下存在文件名相同的这四类文件，当只键入文件名时，DOS执行的是<code>name.com</code>，如果需要执行其他三个文件，则必须指定文件的全名，如name.bat。</p>
<p>这是一个只有5.43K大小的免费绿色工具，可以运行在纯DOS或DOS窗口的命令行中，用法：Bat2Com<br>FileName，这样就会在同一目录下生成一个名为FileNme.com的可执行文件，执行的效果和原来的.bat文件一样。</p>
<h3 id="九-时间延迟"><a href="#九-时间延迟" class="headerlink" title="九. 时间延迟"></a>九. 时间延迟</h3><p>本条参考引用[英雄]教程<br>什么是时间延迟？顾名思义，就是执行一条命令后延迟一段时间再进行下一条命令。<br>延迟的应用见下节：“模拟进度条”。</p>
<h4 id="1-利用ping命令延时"><a href="#1-利用ping命令延时" class="headerlink" title="1. 利用ping命令延时"></a>1. 利用ping命令延时</h4><p> 例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">echo</span> 延时前：<span class="variable">%time%</span></div><div class="line"><span class="built_in">ping</span> /n <span class="number">3</span> <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span> &gt;<span class="built_in">nul</span></div><div class="line"><span class="built_in">echo</span> 延时后：<span class="variable">%time%</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>解说：用到了ping命令的“/n”参数，表示要发送多少次请求到指定的ip。本例中要发送3次请求到本机的ip（127.0.0.1）。127.0.0.1可简写为127.1。“&gt;nul”就是屏蔽掉ping命令所显示的内容。</p>
<h4 id="2-利用for命令延时"><a href="#2-利用for命令延时" class="headerlink" title="2. 利用for命令延时"></a>2. 利用for命令延时</h4><p> 例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">echo</span> 延时前：<span class="variable">%time%</span></div><div class="line"><span class="keyword">for</span> /l <span class="variable">%%i</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="number">5000</span>) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%i</span>&gt;<span class="built_in">nul</span></div><div class="line"><span class="built_in">echo</span> 延时后：<span class="variable">%time%</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>解说：原理很简单，就是利用一个计次循环并屏蔽它所显示的内容来达到延时的目的。</p>
<h4 id="3-利用vbs延迟函数，精确度毫秒，误差1000毫秒内"><a href="#3-利用vbs延迟函数，精确度毫秒，误差1000毫秒内" class="headerlink" title="3. 利用vbs延迟函数，精确度毫秒，误差1000毫秒内"></a>3. 利用vbs延迟函数，精确度毫秒，误差1000毫秒内</h4><p>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">echo</span> <span class="variable">%time%</span></div><div class="line"><span class="keyword">call</span> :delay <span class="number">5000</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">%time%</span></div><div class="line"><span class="built_in">pause</span></div><div class="line"><span class="keyword">exit</span></div><div class="line"></div><div class="line"></div><div class="line">:delay</div><div class="line"><span class="built_in">echo</span> WScript.Sleep %<span class="number">1</span>&gt;delay.vbs</div><div class="line">CScript //B delay.vbs</div><div class="line"><span class="built_in">del</span> delay.vbs</div><div class="line"><span class="keyword">goto</span> :eof</div></pre></td></tr></table></figure></p>
<p>运行显示：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">10</span>:<span class="number">44</span>:<span class="number">06</span>.<span class="number">45</span></div><div class="line"><span class="number">10</span>:<span class="number">44</span>:<span class="number">11</span>.<span class="number">95</span></div><div class="line">请按任意键继续. . .</div></pre></td></tr></table></figure></p>
<p>上面的运行结果显示实际延时了5500毫秒，多出来的500毫秒时建立和删除临时文件所耗费的时间。误差在一秒之内。</p>
<h4 id="4-仅用批处理命令实现任意时间延迟，精确度10毫秒，误差50毫秒内"><a href="#4-仅用批处理命令实现任意时间延迟，精确度10毫秒，误差50毫秒内" class="headerlink" title="4. 仅用批处理命令实现任意时间延迟，精确度10毫秒，误差50毫秒内"></a>4. 仅用批处理命令实现任意时间延迟，精确度10毫秒，误差50毫秒内</h4><p>仅用批处理命令就可以实现延迟操作。</p>
<p>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> /p delay=请输入需延迟的毫秒数：</div><div class="line"><span class="built_in">set</span> TotalTime=<span class="number">0</span></div><div class="line"><span class="built_in">set</span> NowTime=<span class="variable">%time%</span></div><div class="line">::读取起始时间，时间格式为：<span class="number">13</span>:<span class="number">01</span>:<span class="number">05</span>.<span class="number">95</span></div><div class="line"><span class="built_in">echo</span> 程序开始时间：<span class="variable">%NowTime%</span></div><div class="line">:delay_continue</div><div class="line"><span class="built_in">set</span> /a minute1=<span class="number">1</span><span class="variable">%NowTime:~3,2%</span>-<span class="number">100</span></div><div class="line">::读取起始时间的分钟数</div><div class="line"><span class="built_in">set</span> /a second1=<span class="number">1</span><span class="variable">%NowTime:~-5,2%</span><span class="variable">%NowTime:~-2%</span><span class="number">0</span>-<span class="number">100000</span></div><div class="line">::将起始时间的秒数转为毫秒</div><div class="line"><span class="built_in">set</span> NowTime=<span class="variable">%time%</span></div><div class="line"><span class="built_in">set</span> /a minute2=<span class="number">1</span><span class="variable">%NowTime:~3,2%</span>-<span class="number">100</span></div><div class="line">:: 读取现在时间的分钟数</div><div class="line"><span class="built_in">set</span> /a second2=<span class="number">1</span><span class="variable">%NowTime:~-5,2%</span><span class="variable">%NowTime:~-2%</span><span class="number">0</span>-<span class="number">100000</span></div><div class="line">::将现在时间的秒数转为毫秒</div><div class="line"><span class="built_in">set</span> /a TotalTime+=(<span class="variable">%minute2%</span>-<span class="variable">%minute1%</span>+<span class="number">60</span>)<span class="variable">%%6</span>0*<span class="number">60000</span>+<span class="variable">%second2%</span>-<span class="variable">%second1%</span></div><div class="line"><span class="keyword">if</span> <span class="variable">%TotalTime%</span> <span class="keyword">lss</span> <span class="variable">%delay%</span> <span class="keyword">goto</span> delay_continue</div><div class="line"><span class="built_in">echo</span> 程序结束时间：<span class="variable">%time%</span></div><div class="line"><span class="built_in">echo</span> 设定延迟时间：<span class="variable">%delay%</span>毫秒</div><div class="line"><span class="built_in">echo</span> 实际延迟时间：<span class="variable">%TotalTime%</span>毫秒</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>运行显示：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">请输入需延迟的毫秒数：<span class="number">6000</span></div><div class="line">程序开始时间：<span class="number">15</span>:<span class="number">32</span>:<span class="number">16</span>.<span class="number">37</span></div><div class="line">程序结束时间：<span class="number">15</span>:<span class="number">32</span>:<span class="number">22</span>.<span class="number">37</span></div><div class="line">设定延迟时间：<span class="number">6000</span>毫秒</div><div class="line">实际延迟时间：<span class="number">6000</span>毫秒</div><div class="line">请按任意键继续. . .</div></pre></td></tr></table></figure></p>
<p>实现原理：首先设定要延迟的毫秒数，然后用循环累加时间，直到累加时间大于等于延迟时间。</p>
<p>误差：windows系统时间只能精确到10毫秒，所以理论上有可能存在10毫秒误差。<br>经测试，当延迟时间大于500毫秒时，上面的延迟程序一般不存在误差。当延迟时间小于500毫秒时，可能有几十毫秒误差，为什么？因为延迟程序本身也是有运行时间的，同时系统时间只能精确到10毫秒。</p>
<p>为了方便引用，可将上面的例子改为子程序调用形式：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">echo</span> 程序开始时间：<span class="variable">%Time%</span></div><div class="line"><span class="keyword">call</span> :delay <span class="number">10</span></div><div class="line"><span class="built_in">echo</span> 实际延迟时间：<span class="variable">%totaltime%</span>毫秒</div><div class="line"><span class="built_in">echo</span> 程序结束时间：<span class="variable">%time%</span></div><div class="line"><span class="built_in">pause</span></div><div class="line"><span class="keyword">exit</span></div><div class="line"></div><div class="line">::-----------以下为延时子程序--------------------</div><div class="line">:delay</div><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">if</span> "%<span class="number">1</span>"=="" <span class="keyword">goto</span> :eof</div><div class="line"><span class="built_in">set</span> DelayTime=%<span class="number">1</span></div><div class="line"><span class="built_in">set</span> TotalTime=<span class="number">0</span></div><div class="line"><span class="built_in">set</span> NowTime=<span class="variable">%time%</span></div><div class="line">::读取起始时间，时间格式为：<span class="number">13</span>:<span class="number">01</span>:<span class="number">05</span>.<span class="number">95</span></div><div class="line">:delay_continue</div><div class="line"><span class="built_in">set</span> /a minute1=<span class="number">1</span><span class="variable">%NowTime:~3,2%</span>-<span class="number">100</span></div><div class="line"><span class="built_in">set</span> /a second1=<span class="number">1</span><span class="variable">%NowTime:~-5,2%</span><span class="variable">%NowTime:~-2%</span><span class="number">0</span>-<span class="number">100000</span></div><div class="line"><span class="built_in">set</span> NowTime=<span class="variable">%time%</span></div><div class="line"><span class="built_in">set</span> /a minute2=<span class="number">1</span><span class="variable">%NowTime:~3,2%</span>-<span class="number">100</span></div><div class="line"><span class="built_in">set</span> /a second2=<span class="number">1</span><span class="variable">%NowTime:~-5,2%</span><span class="variable">%NowTime:~-2%</span><span class="number">0</span>-<span class="number">100000</span></div><div class="line"><span class="built_in">set</span> /a TotalTime+=(<span class="variable">%minute2%</span>-<span class="variable">%minute1%</span>+<span class="number">60</span>)<span class="variable">%%6</span>0*<span class="number">60000</span>+<span class="variable">%second2%</span>-<span class="variable">%second1%</span></div><div class="line"><span class="keyword">if</span> <span class="variable">%TotalTime%</span> <span class="keyword">lss</span> <span class="variable">%DelayTime%</span> <span class="keyword">goto</span> delay_continue</div><div class="line"><span class="keyword">goto</span> :eof</div></pre></td></tr></table></figure></p>
<h3 id="十-模拟进度条"><a href="#十-模拟进度条" class="headerlink" title="十. 模拟进度条"></a>十. 模拟进度条</h3><p>下面给出一个模拟进度条的程序。如果将它运用在你自己的程序中，可以使你的程序更漂亮。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">mode</span> <span class="built_in">con</span> cols=<span class="number">113</span> lines=<span class="number">15</span> &amp;<span class="built_in">color</span> <span class="number">9</span>f</div><div class="line"><span class="built_in">cls</span></div><div class="line"><span class="built_in">echo</span>.</div><div class="line"><span class="built_in">echo</span>  程序正在初始化. . . </div><div class="line"><span class="built_in">echo</span>.</div><div class="line"><span class="built_in">echo</span>  ┌──────────────────────────────────────┐</div><div class="line"><span class="built_in">set</span>/p=  ■&lt;<span class="built_in">nul</span></div><div class="line"><span class="keyword">for</span> /L <span class="variable">%%i</span> <span class="keyword">in</span> (<span class="number">1</span> <span class="number">1</span> <span class="number">38</span>) <span class="keyword">do</span> <span class="built_in">set</span> /p a=■&lt;<span class="built_in">nul</span>&amp;<span class="built_in">ping</span> /n <span class="number">1</span> <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>&gt;<span class="built_in">nul</span></div><div class="line"><span class="built_in">echo</span>   <span class="number">100</span>%%</div><div class="line"><span class="built_in">echo</span>  └──────────────────────────────────────┘</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>解说：“set /p a=■<nul”的意思是：只显示提示信息“■”且不换行，也不需手工输入任何信息，这样可以使每个“■”在同一行逐个输出。“ping 0="" n="" 127.1="">nul”是输出每个“■”的时间间隔，即每隔多少时间输出一个“■”。</nul”的意思是：只显示提示信息“■”且不换行，也不需手工输入任何信息，这样可以使每个“■”在同一行逐个输出。“ping></p>
<p>运行结果：</p>
<figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> 程序正在初始化. . .</div><div class="line"></div><div class="line"> ┌──────────────────────────────────────┐</div><div class="line">■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  <span class="number">100</span>%</div><div class="line"> └──────────────────────────────────────┘</div><div class="line">请按任意键继续. . .</div></pre></td></tr></table></figure>
<h3 id="十一-特殊字符的输入及应用"><a href="#十一-特殊字符的输入及应用" class="headerlink" title="十一. 特殊字符的输入及应用"></a>十一. 特殊字符的输入及应用</h3><p>开始 -&gt; 运行 -&gt; 输入cmd -&gt; edit -&gt; ctrl+p（意思是允许输入特殊字符）-&gt; 按ctrl+a将会显示笑脸图案。</p>
<p>（如果要继续输入特殊字符请再次按ctrl+p，然后ctrl+某个字母）</p>
<p>以上是特殊字符的输入方法，选自[英雄]教程，很管用的。也就是用编辑程序edit输入特殊字符，然后保存为一文本文件，再在windows下打开此文件，复制其中的特殊符号即可。</p>
<p>一些简单的特殊符号可以在dos命令窗口直接输入，并用重定向保存为文本文件。<br>例：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">C:&gt;<span class="title">ECHO</span> ^<span class="title">G</span>&gt;<span class="title">temp.txt</span></span></div></pre></td></tr></table></figure></p>
<p>“^G”是用Ctrl＋G或Alt＋007输入，输入多个^G可以产生多声鸣响。</p>
<p>特殊字符的应用也很有意思，这里仅举一例：退格键</p>
<p>退格键表示删除左边的字符，此键不能在文档中正常输入，但可以通过edit编辑程序录入并复制出来。即“”。</p>
<p>利用退格键，可以设计闪烁文字效果</p>
<p>例：文字闪烁<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line">:<span class="built_in">start</span></div><div class="line"><span class="built_in">set</span>/p=床前明月光&lt;<span class="built_in">nul</span></div><div class="line">::显示文字，光标停于行尾</div><div class="line"><span class="built_in">ping</span> -n <span class="number">0</span> <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>&gt;<span class="built_in">nul</span></div><div class="line">::设置延迟时间</div><div class="line"><span class="built_in">set</span> /p a=&lt;<span class="built_in">nul</span></div><div class="line">:: 输出一些退格符将光标置于该行的最左端（退格符的数量可以自己调整）。</div><div class="line"><span class="built_in">set</span> /p a=                               &lt;<span class="built_in">nul</span></div><div class="line">::输出空格将之前输出的文字覆盖掉。</div><div class="line"><span class="built_in">set</span> /p a=&lt;<span class="built_in">nul</span></div><div class="line">::再次输出退格符将光标置于该行的最左端，这里的退格符数量一定不能比前面的空格数少。</div><div class="line">::否则光标不能退到最左端。</div><div class="line"><span class="keyword">goto</span> <span class="built_in">start</span></div></pre></td></tr></table></figure></p>
<p>例：输出唐诗一首，每行闪动多次<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">setlocal</span> enabledelayedexpansion</div><div class="line"></div><div class="line"><span class="built_in">set</span> str=床前明月光 疑是地上霜 举头望明月 低头思故乡</div><div class="line">::定义字符串str</div><div class="line"><span class="keyword">for</span> <span class="variable">%%i</span> <span class="keyword">in</span> (<span class="variable">%str%</span>) <span class="keyword">do</span> (</div><div class="line"><span class="comment"> rem 由于str中含有空格，则以空格为分隔符将str中的每一个部分依次赋给变量%%i。</span></div><div class="line">        <span class="built_in">set</span> char=<span class="variable">%%i</span></div><div class="line">        <span class="built_in">echo</span>.</div><div class="line">        <span class="built_in">echo</span>.</div><div class="line">        <span class="keyword">for</span> /l <span class="variable">%%j</span> <span class="keyword">in</span> (<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>) <span class="keyword">do</span> (</div><div class="line">                <span class="built_in">set</span>/p=<span class="variable">!char:~%%j,1!</span>&lt;<span class="built_in">nul</span></div><div class="line"><span class="comment">  rem 依次取出变量char中的每一个字符，并显示。</span></div><div class="line">                <span class="built_in">ping</span> -n <span class="number">0</span> <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>&gt;<span class="built_in">nul</span></div><div class="line"><span class="comment">  rem 设置输出每个字符的时间延迟。</span></div><div class="line">        )</div><div class="line"> <span class="keyword">call</span> :hero <span class="variable">%%i</span></div><div class="line">)</div><div class="line"><span class="built_in">pause</span>&gt;<span class="built_in">nul</span></div><div class="line"><span class="keyword">exit</span></div><div class="line"></div><div class="line">:hero</div><div class="line"><span class="keyword">for</span> /l <span class="variable">%%k</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="number">10</span>) <span class="keyword">do</span> (</div><div class="line"> <span class="built_in">ping</span> /n <span class="number">0</span> <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>&gt;<span class="built_in">nul</span></div><div class="line"> <span class="built_in">set</span> /p a=&lt;<span class="built_in">nul</span></div><div class="line"> <span class="built_in">set</span> /p a=                               &lt;<span class="built_in">nul</span></div><div class="line"> <span class="built_in">set</span> /p a=&lt;<span class="built_in">nul</span></div><div class="line"> <span class="built_in">ping</span> /n <span class="number">0</span> <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>&gt;<span class="built_in">nul</span></div><div class="line"> <span class="built_in">set</span> /p a=%<span class="number">1</span>&lt;<span class="built_in">nul</span></div><div class="line">)</div><div class="line">::文字闪动</div><div class="line"><span class="keyword">goto</span> :eof</div></pre></td></tr></table></figure></p>
<h3 id="十二-随机数（-random-）的应用技巧"><a href="#十二-随机数（-random-）的应用技巧" class="headerlink" title="十二. 随机数（%random%）的应用技巧"></a>十二. 随机数（%random%）的应用技巧</h3><p>%RANDOM% 系统变量 返回 0 到 32767 之间的任意十进制数字。由 Cmd.exe 生成。</p>
<p>2的15次方等于32768，上面的0～32767实际就是15位二进制数的范围。</p>
<p>那么，如何获取100以内的随机数呢？很简单，将%RANDOM%按100进行求余运算即可，见例子。</p>
<p>例：生成5个100以内的随机数<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">setlocal</span> enabledelayedexpansion</div><div class="line"><span class="keyword">for</span> /L <span class="variable">%%i</span> <span class="keyword">in</span> (<span class="number">1</span> <span class="number">1</span> <span class="number">5</span>) <span class="keyword">do</span> (</div><div class="line">   <span class="built_in">set</span> /a randomNum=<span class="variable">!random!</span><span class="variable">%%1</span>00</div><div class="line">   <span class="built_in">echo</span> 随机数：<span class="variable">!randomNum!</span></div><div class="line">)</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>运行结果：（每次运行不一样）<br>随机数：91<br>随机数：67<br>随机数：58<br>随机数：26<br>随机数：20<br>请按任意键继续. . .</p>
<p>求余数运算set /a randomNum=!random!%%100中的100可以是1～32768之间的任意整数。</p>
<p>总结：利用系统变量%random%，求余数运算%%，字符串处理等，可以实现很多随机处理。</p>
<p>思考题目：生成给定位数的随机密码<br>解答思路：将26个英文字母或10数字以及其它特殊字符组成一个字符串，随机抽取其中的若干字符。</p>
<p>参考答案1：（简单）<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">call</span> :randomPassword <span class="number">5</span> pass1 pass2</div><div class="line"><span class="built_in">echo</span> <span class="variable">%pass1%</span> <span class="variable">%pass2%</span> </div><div class="line"><span class="built_in">pause</span></div><div class="line"><span class="keyword">exit</span></div><div class="line"></div><div class="line">:randomPassword</div><div class="line">::---------生成随机密码</div><div class="line">::---------<span class="variable">%1为密码长度，%</span><span class="number">2</span>及以后为返回变量名称</div><div class="line">::---------<span class="keyword">for</span>命令最多只能区分<span class="number">31</span>个字段</div><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> password_len=%<span class="number">1</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">defined</span> password_len <span class="keyword">goto</span> :eof</div><div class="line"><span class="keyword">if</span> <span class="variable">%password_len%</span> <span class="keyword">lss</span> <span class="number">1</span> <span class="keyword">goto</span> :eof</div><div class="line"><span class="built_in">set</span> wordset=a b c d e f g h i j k l m n o p q r s t u v w x y z</div><div class="line"><span class="built_in">set</span> return=</div><div class="line"><span class="built_in">set</span> num=<span class="number">0</span></div><div class="line">:randomPassword1</div><div class="line"><span class="built_in">set</span> /a num+=<span class="number">1</span></div><div class="line"><span class="built_in">set</span> /a numof=<span class="variable">%random%</span><span class="variable">%%2</span>6+<span class="number">1</span></div><div class="line"><span class="keyword">for</span> /f "tokens=<span class="variable">%numof%</span> delims= " <span class="variable">%%i</span> <span class="keyword">in</span> ("<span class="variable">%wordset%</span>") <span class="keyword">do</span> <span class="built_in">set</span> return=<span class="variable">%return%</span><span class="variable">%%i</span></div><div class="line"><span class="keyword">if</span> <span class="variable">%num%</span> <span class="keyword">lss</span> <span class="variable">%password_len%</span> <span class="keyword">goto</span> randomPassword1</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> "%<span class="number">2</span>"=="" <span class="built_in">set</span> <span class="variable">%2=%</span>return%</div><div class="line"><span class="built_in">shift</span> /<span class="number">2</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> "%<span class="number">2</span>"=="" <span class="keyword">goto</span> randomPassword</div><div class="line"><span class="keyword">goto</span> :eof</div></pre></td></tr></table></figure></p>
<p>参考答案2：（最优）<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">call</span> :randomPassword <span class="number">6</span> pass1 pass2 pass3</div><div class="line"><span class="built_in">echo</span> <span class="variable">%pass1%</span> <span class="variable">%pass2%</span> <span class="variable">%pass3%</span></div><div class="line"><span class="built_in">pause</span></div><div class="line"><span class="keyword">exit</span></div><div class="line"></div><div class="line">:randomPassword</div><div class="line">::---------生成随机密码</div><div class="line">::---------<span class="variable">%1为密码长度，%</span><span class="number">2</span>及以后为返回变量名称</div><div class="line">::---------<span class="keyword">goto</span>循环. 变量嵌套. 命令嵌套</div><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">if</span> "%<span class="number">1</span>"=="" <span class="keyword">goto</span> :eof</div><div class="line"><span class="keyword">if</span> %<span class="number">1</span> <span class="keyword">lss</span> <span class="number">1</span> <span class="keyword">goto</span> :eof</div><div class="line"><span class="built_in">set</span> password_len=%<span class="number">1</span></div><div class="line"><span class="built_in">set</span> return=</div><div class="line"><span class="built_in">set</span> wordset=abcdefghijklmnopqrstuvwxyz023456789_</div><div class="line">::---------------------------循环</div><div class="line">:randomPassword1</div><div class="line"><span class="built_in">set</span> /a numof=<span class="variable">%random%</span><span class="variable">%%3</span>6</div><div class="line"><span class="keyword">call</span> <span class="built_in">set</span> return=<span class="variable">%return%</span><span class="variable">%%w</span>ordset:~<span class="variable">%numof%</span>,<span class="number">1</span>%%</div><div class="line"><span class="built_in">set</span> /a password_len-=<span class="number">1</span></div><div class="line"><span class="keyword">if</span> <span class="variable">%password_len%</span> <span class="keyword">gtr</span> <span class="number">0</span> <span class="keyword">goto</span> randomPassword1</div><div class="line">::---------------------------循环</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> "%<span class="number">2</span>"=="" <span class="built_in">set</span> <span class="variable">%2=%</span>return%</div><div class="line"><span class="built_in">shift</span> /<span class="number">2</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> "%<span class="number">2</span>"=="" <span class="keyword">goto</span> randomPassword</div><div class="line"><span class="keyword">goto</span> :eof</div></pre></td></tr></table></figure></p>
<p>说明：本例涉及到变量嵌套和命令嵌套的应用，见后。</p>
<h3 id="十三-变量嵌套-与-命令嵌套"><a href="#十三-变量嵌套-与-命令嵌套" class="headerlink" title="十三. 变量嵌套 与 命令嵌套"></a>十三. 变量嵌套 与 命令嵌套</h3><p>和其它编程语言相比，dos功能显得相对简单，要实现比较复杂的功能，需要充分运用各种技巧，变量嵌套与命令嵌套就是此类技巧之一。</p>
<p>先复习一下前面的“字符串截取”的关键内容：</p>
<p>截取功能统一语法格式为：<code>%a:~[m[,n]]%</code></p>
<p>方括号表示可选，%为变量标识符，a为变量名，不可少，冒号用于分隔变量名和说明部分，符号～可以简单理解为“偏移”即可，m为偏移量（缺省为0），n为截取长度（缺省为全部）。</p>
<p>百分号如果需要当成单一字符，必须写成%%</p>
<p>以上是dos变量处理的通用格式，如果其中的m. n为变量，那么这种情况就是变量嵌套了。</p>
<p>比如设变量word为“abcdefghij”，变量num为“eee4eeeee”<br><code>%word:~4,1%</code>为e，其中4可以从变量num中取值，即<code>%num:~3,1%</code>，写成组合形式如下：<br><code>%word:~%num:~3,1%,1%</code> 经测试这种写法不能正确执行，那么，怎么实现这种变量嵌套呢？首先，我们将其中的<code>%num:~3,1%</code>作为正常的字符处理命令，其它部分当成一般字符串，这样首尾的%就必须写成%%了，即<code>%%word:~%num:~3,1%,1%%</code><br>但是上面的写法同样不能直接当成命令执行，必须运用命令嵌套才能执行。</p>
<p>什么是命令嵌套呢？简单的说，首先用一条dos命令生成一个字符串，而这个字符串是另一条dos命令，用call语句调用字符串将其执行，从而得到最终结果。</p>
<p>例：用call语句实现命令嵌套<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> str1=aaa <span class="built_in">echo</span> ok bbb</div><div class="line"><span class="built_in">echo</span> 初始字符串：<span class="variable">%str1%</span></div><div class="line"><span class="built_in">echo</span> 生成命令字符串如下：</div><div class="line"><span class="built_in">echo</span> <span class="variable">%str1:~4,7%</span></div><div class="line"><span class="built_in">echo</span> 运行命令字符串生成最终结果为：</div><div class="line"><span class="keyword">call</span> <span class="variable">%str1:~4,7%</span></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>运行显示：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">初始字符串：aaa <span class="built_in">echo</span> ok bbb</div><div class="line">生成命令字符串如下：</div><div class="line"><span class="built_in">echo</span> ok</div><div class="line">运行命令字符串生成最终结果为：</div><div class="line">ok</div><div class="line">请按任意键继续. . .</div></pre></td></tr></table></figure></p>
<p>变量嵌套与命令嵌套结合运用，见下例。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"></div><div class="line"><span class="built_in">set</span> num=Redtek <span class="number">2006</span> bbs.cn-dos.<span class="built_in">net</span></div><div class="line"><span class="built_in">set</span> a=<span class="number">123245</span></div><div class="line"><span class="built_in">set</span> b=<span class="number">87754321</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span>.</div><div class="line"><span class="built_in">echo</span> a=<span class="variable">%a%</span>  b=<span class="variable">%b%</span>  num=<span class="variable">%num%</span></div><div class="line"><span class="built_in">set</span> result=<span class="variable">%%%</span><span class="variable">%%%</span><span class="variable">%%n</span>um:~<span class="variable">%%%</span><span class="variable">%b:~%</span>a:~<span class="number">3</span>,<span class="number">1</span><span class="variable">%,1%</span><span class="variable">%%%</span>,<span class="number">4</span><span class="variable">%%%</span><span class="variable">%%%</span>%%</div><div class="line"><span class="built_in">echo</span> 直接运行命令，只解析第一层变量，其余的当作字符串：<span class="variable">%result%</span></div><div class="line"></div><div class="line"><span class="keyword">call</span> <span class="built_in">set</span> result=<span class="variable">%%%</span><span class="variable">%%%</span><span class="variable">%%n</span>um:~<span class="variable">%%%</span><span class="variable">%b:~%</span>a:~<span class="number">3</span>,<span class="number">1</span><span class="variable">%,1%</span><span class="variable">%%%</span>,<span class="number">4</span><span class="variable">%%%</span><span class="variable">%%%</span>%%</div><div class="line"><span class="built_in">echo</span> 一层命令嵌套，可解析两层变量，其余的当作字符串：<span class="variable">%result%</span></div><div class="line"></div><div class="line"><span class="keyword">call</span> <span class="keyword">call</span> <span class="built_in">set</span> result=<span class="variable">%%%</span><span class="variable">%%%</span><span class="variable">%%n</span>um:~<span class="variable">%%%</span><span class="variable">%b:~%</span>a:~<span class="number">3</span>,<span class="number">1</span><span class="variable">%,1%</span><span class="variable">%%%</span>,<span class="number">4</span><span class="variable">%%%</span><span class="variable">%%%</span>%%</div><div class="line"><span class="built_in">echo</span> 两层命令嵌套，可解析三层变量，其余的当作字符串：<span class="variable">%result%</span></div><div class="line"></div><div class="line"><span class="keyword">call</span> <span class="keyword">call</span> <span class="keyword">call</span> <span class="built_in">set</span> result=<span class="variable">%%%</span><span class="variable">%%%</span><span class="variable">%%n</span>um:~<span class="variable">%%%</span><span class="variable">%b:~%</span>a:~<span class="number">3</span>,<span class="number">1</span><span class="variable">%,1%</span><span class="variable">%%%</span>,<span class="number">4</span><span class="variable">%%%</span><span class="variable">%%%</span>%%</div><div class="line"><span class="built_in">echo</span> 三层命令嵌套，运行变量解析完后的字符串：<span class="variable">%result%</span></div><div class="line"></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<h3 id="十四-文件内容筛选（type和findstr命令结合使用）"><a href="#十四-文件内容筛选（type和findstr命令结合使用）" class="headerlink" title="十四. 文件内容筛选（type和findstr命令结合使用）"></a>十四. 文件内容筛选（type和findstr命令结合使用）</h3><p>Find常和type命令结合使用<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Type</span> [drive:][<span class="built_in">path</span>]filename | <span class="built_in">find</span> "string" [&gt;tmpfile] #挑选包含string的行</div><div class="line"><span class="built_in">Type</span> [drive:][<span class="built_in">path</span>]filename | <span class="built_in">find</span> /v "string"   #剔除文件中包含string的行</div><div class="line"><span class="built_in">Type</span> [drive:][<span class="built_in">path</span>]filename | <span class="built_in">find</span> /c   #显示文件行数</div></pre></td></tr></table></figure></p>
<p>以上用法将去除find命令自带的提示语（文件名提示）<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">FIND</span> [/V] [/C] [/N] [/I] [/OFF[LINE]] "string" [[drive:][<span class="built_in">path</span>]filename[ ...]]</div><div class="line"></div><div class="line">  /V        显示所有未包含指定字符串的行。</div><div class="line">  /C        仅显示包含字符串的行数。</div><div class="line">  /N        显示行号。</div><div class="line">  /I        搜索字符串时忽略大小写。</div><div class="line">  /OFF[LINE] 不要跳过具有脱机属性集的文件。</div><div class="line">  "string"  指定要搜索的文字串，</div><div class="line">  [drive:][<span class="built_in">path</span>]filename</div><div class="line">            指定要搜索的文件。</div></pre></td></tr></table></figure></p>
<p>如果没有指定路径，FIND 将搜索键入的或者由另一命令产生的文字。</p>
<p>find命令不能处理文件中超过1024个字符的数据行，此时可用findstr命令。（见前面介绍）<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">FINDSTR</span> [/B] [/E] [/L] [/R] [/S] [/I] [/X] [/V] [/N] [/M] [/O] [/F:file]</div><div class="line">        [/C:string] [/G:file] [/D:<span class="built_in">dir</span> list] [/A:<span class="built_in">color</span> attributes] [/OFF[LINE]]</div><div class="line">        strings [[drive:][<span class="built_in">path</span>]filename[ ...]]</div><div class="line"></div><div class="line">  /B        在一行的开始配对模式。</div><div class="line">  /E        在一行的结尾配对模式。</div><div class="line">  /L        按字使用搜索字符串。</div><div class="line">  /R        将搜索字符串作为一般表达式使用。</div><div class="line">  /S        在当前目录和所有子目录中搜索</div><div class="line">              匹配文件。</div><div class="line">  /I         指定搜索不分大小写。</div><div class="line">  /X        打印完全匹配的行。</div><div class="line">  /V        只打印不包含匹配的行。</div><div class="line">  /N        在匹配的每行前打印行数。</div><div class="line">  /M        如果文件含有匹配项，只打印其文件名。</div><div class="line">  /O        在每个匹配行前打印字符偏移量。</div><div class="line">  /P        忽略有不可打印字符的文件。</div><div class="line">  /OFF[LINE] 不跳过带有脱机属性集的文件。</div><div class="line">  /A:attr   指定有十六进位数字的颜色属性。请见 "<span class="built_in">color</span> /?"</div><div class="line">  /F:file   从指定文件读文件列表 (/ 代表控制台)。</div><div class="line">  /C:string 使用指定字符串作为文字搜索字符串。</div><div class="line">  /G:file   从指定的文件获得搜索字符串。 (/ 代表控制台)。</div><div class="line">  /D:<span class="built_in">dir</span>    查找以分号为分隔符的目录列表</div><div class="line">  strings   要查找的文字。</div><div class="line">  [drive:][<span class="built_in">path</span>]filename</div><div class="line">            指定要查找的文件。</div></pre></td></tr></table></figure></p>
<p>除非参数有 /C 前缀，请使用空格隔开搜索字符串。<br>例如： <code>FINDSTR &quot;hello there&quot; x.y</code> 在文件 <code>x.y</code> 中寻找 “hello” 或<br>“there” 。  <code>FINDSTR /C:&quot;hello there&quot; x.y</code> 在文件 <code>x.y</code>  中寻找<br>“hello there”。</p>
<p>一般表达式的快速参考：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.        通配符: 任何字符</div><div class="line">*        重复: 以前字符或类别出现零或零以上次数</div><div class="line">^        行位置: 行的开始</div><div class="line">$        行位置: 行的终点</div><div class="line">[class]  字符类别: 任何在字符集中的字符</div><div class="line">[^class] 补字符类别: 任何不在字符集中的字符</div><div class="line">[x-y]    范围: 在指定范围内的任何字符</div><div class="line">\x       Escape: 元字符 x 的文字用法</div><div class="line">\&lt;xyz    字位置: 字的开始</div><div class="line">xyz\&gt;    字位置: 字的结束</div></pre></td></tr></table></figure></p>
<p>有关 FINDSTR 常见表达法的详细情况，请见联机命令参考。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本教程主要引用伤脑筋版主的系列文章，同时参考引用[英雄]教程等其他批处理教程，本文将这些文章合并在一起，并尽量修改得详细而且简单易懂，修改整理也是学习过程，主要目的是方便自己以后查阅。</p>
<p>本教程很长啊，需要一定的耐心才能看完，能够看完的话，差不多就是批处理高手了，即使不是高手也是熟手了。本教程还在不断补充之中，当有比较典型的应用技巧时，本教材会将其收入相关的章节之中。本教程适合对dos有一定基础的人慢慢学习或查阅。</p>
<p><strong>查阅方法：在 阅读全文 页面 复制目录中的条目，搜索即可。或点右下角的目录链接</strong></p>
<p>整理者邮箱：<a href="xiangkg@163.com">xiangkg@163.com</a>，如果你要全文或有好的dos使用经验，请你发email给我，谢谢！</p>
<p> 全文：<a href="http://xiangkg.blog.163.com/" target="_blank" rel="external">http://xiangkg.blog.163.com</a></p>
<ol>
<li>更正了所有的错别字，适当排版，增加条理性。</li>
<li>运行改善所有例子，并纠正了一些语法错误。</li>
<li>补充了一些不完全的地方。</li>
<li>第一章参考了网上许多教程汇编而成。</li>
<li>20080229补充了变量延迟的问题。</li>
<li>20080305修改了参数usebackq的说明</li>
<li>20080310增加了特殊字符的输入及应用</li>
<li>20080311修改了子程序部分</li>
<li>20080313修改了echo说明，归纳了9个应用方法</li>
<li>20080320增加任意时间延迟方法</li>
<li>20080321增加了set计算中十进制与八进制混淆问题的说明</li>
<li>20080325修正dos数值计算范围：-2147483648至2147483647，即-2^31～2^31-1</li>
<li>20080326增加随机数的应用</li>
<li>20080327修改了“if增强用法”中的defined语句说明</li>
<li><p>20080402增加变量嵌套与命令嵌套，重要技巧之一。</p>
<p>不断学习中，不断更新中。</p>
</li>
</ol>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>（无链接，带链接功能的目录在页面右下角）</p>
<p>第一章 批处理基础<br> 第一节 常用批处理内部命令简介</p>
<ol>
<li>REM 和 <code>::</code> 注释</li>
<li>ECHO 和 @</li>
<li>PAUSE 暂停</li>
<li>ERRORLEVEL</li>
<li>TITLE 设置cmd窗口的标题</li>
<li>COLOR 设置cmd窗口前景和背景颜色</li>
<li>mode 配置系统设备</li>
<li>GOTO 和 <code>:</code></li>
<li>FIND 在文件中搜索字符串</li>
<li>START 调用外部程序并任其在新窗口自行运行</li>
<li>assoc 和 ftype</li>
<li>pushd 和 popd</li>
<li>CALL 调用批处理程序或命令并等待其执行完毕</li>
<li>shift</li>
<li>IF</li>
<li>setlocal 与 变量延迟</li>
<li>ATTRIB  显示或更改文件属性</li>
<li>findstr 在文件中搜索字符串（find增强版）</li>
<li><code>date /t</code> 和 <code>time /t</code><br>第二节 常用特殊符号</li>
<li><code>@</code>  命令行回显屏蔽符</li>
<li><code>%</code>  批处理变量引导符</li>
<li><code>&gt;</code>  输出重定向符</li>
<li><code>&gt;&gt;</code>  输出重定向符</li>
<li><code>&lt;. &gt;&amp;. &lt;&amp;</code> 重定向符</li>
<li><code>|</code>  命令管道符</li>
<li><code>^</code>  转义字符</li>
<li><code>&amp;</code>  组合命令（顺序执行）</li>
<li><code>&amp;&amp;</code> 组合命令（前面指令成功，才执行后面指令）</li>
<li><code>||</code>  组合命令（前面指令失败，才执行后面指令）</li>
<li><code>&quot;&quot;</code>  字符串界定符</li>
<li><code>,</code> 逗号</li>
<li><code>;</code> 分号</li>
<li><code>()</code> 括号</li>
<li><code>!</code> 感叹号</li>
<li>批处理中可能会见到的其它特殊标记符 （略）<br>  <code>CR(0D)</code> 命令行结束符<br>  <code>Escape(1B)</code> ANSI转义字符引导符<br>  <code>Space(20)</code> 常用的参数界定符<br>  <code>Tab(09) ; =</code> 不常用的参数界定符<br>  <code>+ COPY</code>命令文件连接符<br>  <code>* ?</code> 文件通配符<br>  <code>/</code> 参数开关引导符<br>  <code>:</code>批处理标签引导符</li>
</ol>
<p>第二章 FOR命令详解</p>
<ol>
<li>基本格式</li>
<li>参数 /d 主要搜索匹配目录</li>
<li>参数 /R 搜索指定目录树中的匹配文件</li>
<li>参数 /L 按数字序列(start,step,end)循环</li>
<li>参数 /F 处理命令输出. 字符串及文件内容</li>
</ol>
<p>第三章 FOR命令中的变量</p>
<ol>
<li>~I          - 删除任何引号(“)，扩展 %I</li>
<li>%~fI        - 将 %I 扩展到一个完全合格的路径名</li>
<li>%~dI        - 仅将 %I 扩展到一个驱动器号</li>
<li>%~pI        - 仅将 %I 扩展到一个路径</li>
<li>%~nI        - 仅将 %I 扩展到一个文件名</li>
<li>%~xI        - 仅将 %I 扩展到一个文件扩展名</li>
<li>%~sI        - 扩展的路径只含有短名</li>
<li>%~aI        - 将 %I 扩展到文件的文件属性</li>
<li>%~tI        - 将 %I 扩展到文件的日期/时间</li>
<li>%~zI        - 将 %I 扩展到文件的大小</li>
<li><code>%~$PATH:I</code></li>
</ol>
<p>第四章 批处理中的变量</p>
<ol>
<li>系统变量</li>
<li>自定义变量</li>
</ol>
<p>第五章 set命令详解</p>
<ol>
<li>用set命令设置自定义变量</li>
<li>用set命令进行简单计算</li>
<li>用set命令进行字符串处理<ol>
<li>字符串替换</li>
<li>字符串截取</li>
</ol>
</li>
</ol>
<p>第六章 if命令讲解<br> 第一种用法：IF [NOT] ERRORLEVEL number command<br> 第二种用法：IF [NOT] string1==string2 command<br> 第三种用法：IF [NOT] EXIST filename command<br> 第四种用法：IF增强的用法</p>
<p>第七章 DOS编程高级技巧</p>
<ol>
<li>交互界面设计</li>
<li>if…else…条件语句</li>
<li>循环语句</li>
<li>子程序</li>
<li>用ftp命令实现自动下载</li>
<li>用7-ZIP实现命令行压缩和解压功能</li>
<li>调用VBScript程序</li>
<li>将批处理转化为可执行文件</li>
<li>时间延迟<ol>
<li>利用ping命令延时</li>
<li>利用for命令延时</li>
<li>利用vbs延迟函数，精确度毫秒，误差1000毫秒内</li>
<li>仅用批处理命令实现任意时间延迟，精确度10毫秒，误差50毫秒内</li>
</ol>
</li>
<li>模拟进度条</li>
<li>特殊字符的输入及应用</li>
<li>随机数（%random%）的应用技巧</li>
<li>变量嵌套 与 命令嵌套</li>
<li>文件内容筛选（type和findstr命令结合使用）</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;转自：&lt;/strong&gt; &lt;a href=&quot;http://xiangkg.blog.163.com/blog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://xiangkg.blog.163.com/blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#前言&quot;&gt;前言&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;第一章-批处理基础&quot;&gt;&lt;a href=&quot;#第一章-批处理基础&quot; class=&quot;headerlink&quot; title=&quot;第一章 批处理基础&quot;&gt;&lt;/a&gt;第一章 批处理基础&lt;/h2&gt;&lt;p&gt;批处理定义：顾名思义，批处理文件是将一系列命令按一定的顺序集合为一个可执行的文本文件，其扩展名为BAT或者CMD。这些命令统称批处理命令。&lt;/p&gt;
&lt;p&gt;小知识：可以在键盘上按下Ctrl+C组合键来强行终止一个批处理的执行过程。&lt;/p&gt;
&lt;p&gt;了解了大概意思后,我们正式开始学习.先看一个简单的例子!&lt;br&gt;&lt;figure class=&quot;highlight bat&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;@&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; off&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &quot;欢迎来到非常BAT!&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;pause&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;把上面的3条命令保存为文件test.bat或者test.cmd然后执行,&lt;br&gt;他就会在屏幕上显示以下二行话&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;欢迎来到非常BAT!&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;请按任意键继续. . .&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这就是一个简单批处理文件了，这个批处理文件一共就用了2条命令 “echo” 和”pause” 还有一个特殊符号”@”&lt;/p&gt;
&lt;p&gt;从上面这个简单的批处理中,我们可以发现其实批处理就是运用一些含有特殊意义的符号和一些完成指定功能的命令组合而成,那么在批处理中有多少这样的特殊符号和功能命令呢？我们现在就来仔细了解一下一些最常用的!&lt;/p&gt;
&lt;p&gt;(以下内容来源网络,请各位仔细阅读,好进入下节的实例说明)&lt;/p&gt;
    
    </summary>
    
    
      <category term="BAT" scheme="maode.github.io/tags/BAT/"/>
    
      <category term="批处理" scheme="maode.github.io/tags/%E6%89%B9%E5%A4%84%E7%90%86/"/>
    
      <category term="CMD" scheme="maode.github.io/tags/CMD/"/>
    
  </entry>
  
  <entry>
    <title>lombok配置过程</title>
    <link href="maode.github.io/2018/02/17/180217-lombok-install/"/>
    <id>maode.github.io/2018/02/17/180217-lombok-install/</id>
    <published>2018-02-17T12:30:26.000Z</published>
    <updated>2018-02-18T05:04:40.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置Eclipse："><a href="#配置Eclipse：" class="headerlink" title="配置Eclipse："></a>配置Eclipse：</h2><ul>
<li>下载 <code>lombok.jar</code>：<a href="https://projectlombok.org/download" target="_blank" rel="external">https://projectlombok.org/download</a></li>
<li>将下载的<code>lombok.jar</code>复制到<code>eclipse.exe</code>同级目录中。</li>
<li><p>修改<code>eclipse.ini</code>文件，在文件中添加以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-javaagent:lombok.jar</div><div class="line">-Xbootclasspath/a:lombok.jar</div></pre></td></tr></table></figure>
</li>
<li><p>重启Eclipse（如果Eclipse是开启状态）。</p>
</li>
</ul>
<p>配置完成后打开Eclipse的 Help-》About Eclipse,在版权内容的末尾如果显示 lombok 的版本号等相关信息，代表配置成功了。如图：</p>
<p><img src="/assets/blogImg/180217-lombok-install.png" alt="eclipse-about"></p>
<h2 id="配置项目："><a href="#配置项目：" class="headerlink" title="配置项目："></a>配置项目：</h2><p>在项目的<code>pom.xml</code>文件中添加 lombok 依赖。<strong>注意：项目中依赖的jar版本要和Eclipse中配置的jar版本一致。</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>lombok官网：<a href="https://projectlombok.org" target="_blank" rel="external">https://projectlombok.org</a></p>
<p>暂时就这些，后面没有了！(=^ ^=)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;配置Eclipse：&quot;&gt;&lt;a href=&quot;#配置Eclipse：&quot; class=&quot;headerlink&quot; title=&quot;配置Eclipse：&quot;&gt;&lt;/a&gt;配置Eclipse：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;下载 &lt;code&gt;lombok.jar&lt;/code&gt;：&lt;a hr
    
    </summary>
    
    
      <category term="getter-setter" scheme="maode.github.io/tags/getter-setter/"/>
    
      <category term="lombok" scheme="maode.github.io/tags/lombok/"/>
    
  </entry>
  
  <entry>
    <title>英语词性及句子成分</title>
    <link href="maode.github.io/2018/02/09/180209-English-lang/"/>
    <id>maode.github.io/2018/02/09/180209-English-lang/</id>
    <published>2018-02-08T17:43:07.000Z</published>
    <updated>2018-02-09T11:32:52.794Z</updated>
    
    <content type="html"><![CDATA[<h2 id="词性缩写"><a href="#词性缩写" class="headerlink" title="词性缩写"></a>词性缩写</h2><p>prep = 介系词；前置词，preposition的缩写<br>pron = 代名词，pronoun的缩写<br>n = 名词，noun的缩写<br>v = 动词，兼指及物动词和不及物动词，verb的缩写<br>conj = 连接词 ，conjunction的缩写<br>s = 主词<br>sc = 主词补语<br>o = 受词<br>oc = 受词补语<br>vi = 不及物动词，intransitive verb的缩写<br>vt = 及物动词，transitive verb的缩写<br>aux.v = 助动词 ，auxiliary的缩写<br>a = 形容词，adjective的缩写<br>ad = 副词，adverb的缩写<br>art = 冠词，article的缩写<br>num = 数词，numeral的缩写<br>int = 感叹词，interjection的缩写<br>u = 不可数名词，uncountable noun的缩写<br>c = 可数名词，countable noun的缩写<br>pl = 复数，plural的缩写。</p>
<a id="more"></a>
<h2 id="词性介绍"><a href="#词性介绍" class="headerlink" title="词性介绍"></a>词性介绍</h2><ol>
<li><p>及物动词 (vt.)：字典里词后标有vt. 的就是及物动词。及物动词后一般必须跟有动作的对象（即宾语）。必须加宾语意思才完整的动词，就是及物动词。</p>
</li>
<li><p>不及物动词 (vi.)：不及物动词是不需要受词的动词。字典里词后标有vi. 的就是不及物动词。不及物动词后不能直接跟有动作的对象（即宾语）。若要跟宾语，必须先在其后添加上某个介词，如to,of ,at后方可跟上宾语。   </p>
</li>
<li><p>名词 Nouns (n.)：表示人或事物的名称。如： box, pen,tree,apple。</p>
</li>
<li><p>代词 Pronouns (pron.)：代替名词、数词、形容词。如：We, this, them,myself。   </p>
</li>
<li><p>形容词  Adjectives(adj.)： 用来修饰名词，表示人或事物的特征。如 good, sad, high, short   。</p>
</li>
<li><p>数词 Numerals(num.)：表示数目或顺序 one,two, first   。</p>
</li>
<li><p>动词 Verb (v.) ：表示动作或状态 Jump,sing,visit   。</p>
</li>
<li><p>副词 Adverbs（adv.)： 修饰动、形、副等词，表示动作特征 there,widely,suddenly   。</p>
</li>
<li><p>冠词 Articles (art.)： 用在名词前，帮助说明名词所指的范围 a, an, the   。</p>
</li>
<li><p>介词 Prepositions (prep.) ：用在名词或代词前，说明它与别的词的关系 in,on,down,up   。</p>
</li>
<li><p>连词 Conjunctions (conj.)： 表示人或事物的名称if,because,but 。</p>
</li>
<li><p>感叹词 Interjections (int.)： 代替名词、数词、形容词等 oh,hello,hi,yeah。</p>
</li>
</ol>
<h2 id="句子成分"><a href="#句子成分" class="headerlink" title="句子成分"></a>句子成分</h2><p>一个句子一般皆由两部分组成，即主语部分（subject group）和谓语部分（predicate group）。如：</p>
<pre><code>Professor Ward teaches English to university students.   
沃德教授给大学生教英语。  
</code></pre><p>句中的Professor Ward即是主语部分，teaches English to university students 即是谓语部分。</p>
<p>句子成分（members of the sentence ）是句子中起一定功用的组成部分。句子由各个句子成分所构成。<br>句子的组成部分，包括 <strong>主语、谓语、宾语、定语、补语、状语、表语</strong> 七种。<br><strong>主语</strong> 是句子叙述的主体，可由名词、代词、数词、名词化的形容词、不定式、动名词和主语从句等来承担。<br><strong>谓语</strong> 说明主语所发出的动作或具有的特征和状态。谓语由动词来承担。<br><strong>宾语</strong> 是动作的对象或承受者，常位于及物动词或介词后面。宾语可由名词、代词、数词、名词化的形容词、不定式、动名词、宾语从句等来担任。   </p>
<p>主语和谓语是英语句子的两大成分，除少数句子（如祈使句和感叹句等）外，一句话必须同时具有主语和谓语所表达的意思才能完整。主语是针对谓语而言的，是一句话的主题，谓语用来说明主语的情况，为主语提供信息。例如：They are working.主语是they(他们），那么他们在做什么呢？看来没有谓语are working 是不行的。在正常情况下，英语的主语和谓语的位置与汉语一致，也就是说主语在前，谓语紧跟其后。那么，哪些词语可以做主语，谓语，何时主谓倒置，主语与谓语的一致情况如何，我将一一讲述。 </p>
<h3 id="一、主语"><a href="#一、主语" class="headerlink" title="一、主语"></a>一、主语</h3><p>主语（subject） 是一句的主体，是全句的述说对象，常用名词或相当于名词的词担任，一般置于句首。如：</p>
<pre><code>⑵The plane has just taken off at the airport。   
飞机刚刚从机场起飞。   
⑶I respect his privacy。   
我尊重他的隐私权。    
</code></pre><p>主语是句子陈述的对象，说明是谁或什么。表示句子说的是”什么人”、“什么事”、“什么东西”、“什么地方”等等。    名词、代词、数词、动名词、To do不定式、一个句子 都可以做主语。  </p>
<h3 id="二、谓语"><a href="#二、谓语" class="headerlink" title="二、谓语"></a>二、谓语</h3><p>谓语是对主语动作或状态的陈述或说明，指出“做什么”和“是什么”或“怎么样”. 谓语动词的位置一般在主语之后。</p>
<h3 id="三、宾语"><a href="#三、宾语" class="headerlink" title="三、宾语"></a>三、宾语</h3><p>宾语，又称受词，是指一个动作（动词）的接受者。宾语分为直接宾语和间接宾语（间接宾语也称宾语补足语）两大类，其中直接宾语指动作的直接对象，间接宾语说明动作的非直接，但受动作影响的对象。一般而言，及物动词后面最少要有一个宾语，而该宾语通常为直接宾语，有些及物动词要求两个宾语，则这两个宾语通常一个为直接宾语，另一个为间接宾语。名词、代词、数词、动名词、To do不定式、一个句子 都可以做宾语，而to do不定式用于宾语补足语。 </p>
<h3 id="四、定语"><a href="#四、定语" class="headerlink" title="四、定语"></a>四、定语</h3><p>定语是用来修饰、限定、说明名词或代词的品质与特征的。主要有形容词此外还有名词、代词、数词、介词短语、动词不定式（短语）、分词、定语从句或相当于形容词的词、短语或句子都可以作定语。汉语中常用„……的‟表示。定语和中心语之间是修饰和被修饰、限制和被限制的关系。在汉语中，中心语与定语二者之间有的需要用结构助词“的”，有的不需要，有的可要可不要。“的”是定语的标志。 </p>
<h3 id="五、状语"><a href="#五、状语" class="headerlink" title="五、状语"></a>五、状语</h3><p>英语中，修饰动词、形容词、副词等的句子成分叫状语（adverbial）。<br>状语的功用：状语说明地点、时间、原因、目的、结果、条件、方向、程度、方式和伴随状况等。<br>状语一般由副词、介词短语、分词和分词短语、不定式或相当于副词的词或短语来担当。其位置一般放在句末，但也可放在句首或句中。   </p>
<h3 id="六、补语"><a href="#六、补语" class="headerlink" title="六、补语"></a>六、补语</h3><p>英语补语的作用对象是主语和宾语,具有鲜明的定语性描写或限制性功能,在句法上是不可或缺的。补语是起补充说明作用的成份。最常见的是宾语补足语。名词、动名词、形容词、副词、不定式、现在分词、过去分词都可以在句子中作宾补。   </p>
<h3 id="七、表语"><a href="#七、表语" class="headerlink" title="七、表语"></a>七、表语</h3><p>表语是用来说明主语的身份、性质、品性、特征和状态的，表语常由名词、形容词、副词、介词短语、不定式、动词的-ing、从句来充当，它常位于系动词（be, become, appear, seem, look ,sound, feel, get, smell等词）之后。如果句子的表语也是由一个句子充当的,那么这个充当表语的句子就叫做表语从句。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;词性缩写&quot;&gt;&lt;a href=&quot;#词性缩写&quot; class=&quot;headerlink&quot; title=&quot;词性缩写&quot;&gt;&lt;/a&gt;词性缩写&lt;/h2&gt;&lt;p&gt;prep = 介系词；前置词，preposition的缩写&lt;br&gt;pron = 代名词，pronoun的缩写&lt;br&gt;n = 名词，noun的缩写&lt;br&gt;v = 动词，兼指及物动词和不及物动词，verb的缩写&lt;br&gt;conj = 连接词 ，conjunction的缩写&lt;br&gt;s = 主词&lt;br&gt;sc = 主词补语&lt;br&gt;o = 受词&lt;br&gt;oc = 受词补语&lt;br&gt;vi = 不及物动词，intransitive verb的缩写&lt;br&gt;vt = 及物动词，transitive verb的缩写&lt;br&gt;aux.v = 助动词 ，auxiliary的缩写&lt;br&gt;a = 形容词，adjective的缩写&lt;br&gt;ad = 副词，adverb的缩写&lt;br&gt;art = 冠词，article的缩写&lt;br&gt;num = 数词，numeral的缩写&lt;br&gt;int = 感叹词，interjection的缩写&lt;br&gt;u = 不可数名词，uncountable noun的缩写&lt;br&gt;c = 可数名词，countable noun的缩写&lt;br&gt;pl = 复数，plural的缩写。&lt;/p&gt;
    
    </summary>
    
    
      <category term="English" scheme="maode.github.io/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>【转】jQuery的RESTful插件</title>
    <link href="maode.github.io/2018/02/08/180208-jquery-RESTful-plugin/"/>
    <id>maode.github.io/2018/02/08/180208-jquery-RESTful-plugin/</id>
    <published>2018-02-08T09:50:09.000Z</published>
    <updated>2018-02-18T08:53:50.227Z</updated>
    
    <content type="html"><![CDATA[<p><strong>转自：</strong> <a href="https://qtdebug.com/fe-rest/" target="_blank" rel="external">https://qtdebug.com/fe-rest/</a></p>
<p>使用 REST 风格提交请求时，Content-Type 标准的来说应该用 <strong>application/json</strong>，但是服务器端获取请求的参数时必须从 Request Body 中获取，而且有些框架对从 Request Body 中获取数据支持不好，需要我们自己实现，SpringMVC 中使用注解 <strong>@RequestBody</strong>从 Request Body 中获取数据，但不能使用 Filter 进行 XSS 过滤。</p>
<p>这里主要使用 SpringMVC 来作为后端进行介绍，SpringMVC 提供了一个 Filter <strong>HiddenHttpMethodFilter</strong>，把 Content-Type 为 <strong>application/x-www-form-urlencoded</strong> 的 POST 请求，参数中 <strong>_method</strong> 值为 <strong>PUT</strong> 的请求分发为 PUT 请求，为 <strong>DELETE</strong> 请求分发为 DELETE 请求，实现了普通表单的 REST 风格提交，这样就可以使用 <strong>@RequestParam</strong> 获取参数的值了。</p>
<p>下面结合 SpringMVC 来介绍:</p>
<ul>
<li>Content-Type 为 application/x-www-form-urlencoded + HiddenHttpMethodFilter<ul>
<li>优点: 服务器端 GET, PUT, POST, DELETE 时直接参数映射为对象，或则都使用 @RequestParam 获取参数，使用形式一致、简洁</li>
<li>缺点:<ul>
<li>不是标准的 REST 规范</li>
<li>参数是按照 key/value 的形式发送的，和普通表单的参数形式一样，有兴趣的可以在 Chrome 的 Network 中查看请求的 Headers</li>
<li>不能传递复杂对象，例如 value 又是一个 Json 对象，只能传递简单的 key/value，也就是作为参数的 Json 对象只能有一层 key/value，不过非特殊情况也够用了，普通表单能做的它都能做</li>
<li>PUT 时参数中需要带上 _method=”PUT”，DELETE 时参数中需要带上 _method=”DELETE”</li>
</ul>
</li>
</ul>
</li>
<li>Content-Type 为 application/json<ul>
<li>优点: 标准的 REST 规范，GET 处理和上面的一样，但是 POST, PUT, DELETE 的参数是序列化后的 JSON 字符串，能够传递复杂的对象</li>
<li>缺点:<ul>
<li>服务器端直接参数映射为对象，或则 GET 时使用 @RequestParam 获取参数，POST, PUT, DELETE 使用 @RequestBody 获取参数到 Map 中，然后再从 Map 中获取一个一个的参数，非常繁琐</li>
<li>GET 和 POST, PUT, DELETE 获取参数的形式不统一，一个用 @RequestParam，其他的用 @RequestBody，需要脑子转换一下</li>
<li>还有就是浏览器端 PUT, POST, DELETE 传递的 JSON 对象需要序列化后才能传给服务器端，可以使用 JSON.stringify(jsonObject) 进行序列化</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>总结下来，在 SpringMVC 中推荐使用 <code>application/x-www-form-urlencoded + HiddenHttpMethodFilter</code> 的方式实现 REST 的请求，就是为了获取参数时比较统一，当需要传递复杂的参数时，例如属性是多层嵌套的对象，Json 对象的数组，这时再使用 application/json 的方式。</p>
<p>为了简化 Rest Ajax 的访问，下面对 jQuery 的 Ajax 进行了简单的封装，例如更新用户名原始实现大致如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    url        : <span class="string">'/users/1/username'</span>,</div><div class="line">    data       : <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">name</span>: <span class="string">'Bob'</span>&#125;),</div><div class="line">    type       : <span class="string">'PUT'</span>,</div><div class="line">    dataType   : <span class="string">'json'</span>,</div><div class="line">    contentType: <span class="string">'application/json'</span></div><div class="line">&#125;)</div><div class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(result);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>如果每个 REST 的请求都像上面这样写一遍: <code>PUT</code>, <code>POST</code>, <code>DELETE</code> 时需要 <code>JSON.stringify(data)</code>, 请求不同时 type 也不同，dataType 和 contentType 是固定的，这么多限制，很容易出错。使用下面实现的 rest 插件后，简化如下，只需要关心参数和回调，不需要处理其他额外信息，而且 $.rest.update 名字也更有语义化，一看就知道是更新操作:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.rest.update(&#123;</div><div class="line">    url    : <span class="string">'/users/1/username'</span>, </div><div class="line">    data   : &#123;<span class="attr">name</span>: <span class="string">'Bob'</span>&#125;, </div><div class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(result);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="测试页面"><a href="#测试页面" class="headerlink" title="测试页面:"></a>测试页面:</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>REST<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/jquery/3.2.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/jquery.rest.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="comment">// [1] 服务器端的 GET 需要启用 UTF-8 才不会乱吗</span></span></div><div class="line"><span class="javascript">        $.rest.get(&#123;<span class="attr">url</span>: <span class="string">'/rest'</span>, <span class="attr">data</span>: &#123;<span class="attr">name</span>: <span class="string">'Alice'</span>&#125;, <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log(result);</span></div><div class="line"><span class="undefined">        &#125;&#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="comment">// [2] 普通 form 表单提交 rest Ajax 请求</span></span></div><div class="line"><span class="javascript">        $.rest.create(&#123;<span class="attr">url</span>: <span class="string">'/rest'</span>, <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log(result);</span></div><div class="line"><span class="undefined">        &#125;&#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">        $.rest.update(&#123;<span class="attr">url</span>: <span class="string">'/rest'</span>, <span class="attr">data</span>: &#123;<span class="attr">name</span>: <span class="string">'黄飞鸿'</span>, <span class="attr">age</span>: <span class="number">22</span>&#125;, <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log(result);</span></div><div class="line"><span class="undefined">        &#125;&#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">        $.rest.remove(&#123;<span class="attr">url</span>: <span class="string">'/rest'</span>, <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log(result);</span></div><div class="line"><span class="undefined">        &#125;&#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="comment">// [3] 使用 request body 传递复杂 Json 对象</span></span></div><div class="line"><span class="javascript">        $.rest.create(&#123;</span></div><div class="line"><span class="javascript">            url: <span class="string">'/rest/requestBody'</span>, </span></div><div class="line"><span class="javascript">            data: &#123;<span class="attr">name</span>: <span class="string">'Alice'</span>&#125;, </span></div><div class="line"><span class="javascript">            jsonRequestBody: <span class="literal">true</span>, </span></div><div class="line"><span class="javascript">            success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                <span class="built_in">console</span>.log(result);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">        $.rest.update(&#123;</span></div><div class="line"><span class="javascript">            url: <span class="string">'/rest/requestBody'</span>, </span></div><div class="line"><span class="javascript">            data: &#123;<span class="attr">name</span>: <span class="string">'Alice'</span>&#125;, </span></div><div class="line"><span class="javascript">            jsonRequestBody: <span class="literal">true</span>, </span></div><div class="line"><span class="javascript">            success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                <span class="built_in">console</span>.log(result);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">        $.rest.remove(&#123;</span></div><div class="line"><span class="javascript">            url: <span class="string">'/rest/requestBody'</span>, </span></div><div class="line"><span class="javascript">            data: &#123;<span class="attr">name</span>: <span class="string">'Alice'</span>&#125;, </span></div><div class="line"><span class="javascript">            jsonRequestBody: <span class="literal">true</span>, </span></div><div class="line"><span class="javascript">            success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                <span class="built_in">console</span>.log(result);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>输出:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;code: 0, data: "Alice", message: "GET handled", success: true&#125;</div><div class="line"></div><div class="line">&#123;code: 0, message: "CREATE handled", success: true&#125;</div><div class="line">&#123;code: 0, message: "DELETE handled", success: true&#125;</div><div class="line">&#123;code: 0, data: "黄飞鸿 : 22", message: "UPDATE handled", success: true&#125;</div><div class="line"></div><div class="line">&#123;code: 0, message: "UPDATE requestBody handled: &#123;\"name\":\"Alice\"&#125;", success: true&#125;</div><div class="line">&#123;code: 0, message: "CREATE requestBody handled: &#123;\"name\":\"Alice\"&#125;", success: true&#125;</div><div class="line">&#123;code: 0, message: "DELETE requestBody handled: &#123;\"name\":\"Alice\"&#125;", success: true&#125;</div></pre></td></tr></table></figure></p>
<h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><p>添加下面的 Filter 到 web.xml, <strong>servlet-name</strong> 为 DispatcherServlet 的 servlet-name，根据自己的配置进行修改:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 浏览器的 form 不支持 put, delete 等 method, 由该 filter </span></div><div class="line"><span class="comment">将 /blog?_method=delete 转换为标准的 http delete 方法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Controller 的实现:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.xtuer.controller;</div><div class="line"><span class="keyword">import</span> com.xtuer.bean.Result;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestController</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * REST 读取</span></div><div class="line"><span class="comment">     * URL: http://localhost:8080/rest</span></div><div class="line"><span class="comment">     * 参数: name</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/rest"</span>)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">restGet</span><span class="params">(@RequestParam String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Result.ok(<span class="string">"GET handled"</span>, name);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * REST 创建</span></div><div class="line"><span class="comment">     * URL: http://localhost:8080/rest</span></div><div class="line"><span class="comment">     * 参数: 无</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/rest"</span>)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">restPost</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"CREATE handled"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * REST 的更新</span></div><div class="line"><span class="comment">     * URL: http://localhost:8080/rest</span></div><div class="line"><span class="comment">     * 参数: name, age</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/rest"</span>)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">restPut</span><span class="params">(@RequestParam String name, @RequestParam <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"UPDATE handled"</span>, name + <span class="string">" : "</span> + age);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * REST 删除</span></div><div class="line"><span class="comment">     * URL: http://localhost:8080/rest</span></div><div class="line"><span class="comment">     * 参数: 无</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/rest"</span>)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">restDelete</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"DELETE handled"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * REST 创建，处理 application/json 的请求</span></div><div class="line"><span class="comment">     * URL: http://localhost:8080/rest/requestBody</span></div><div class="line"><span class="comment">     * 参数: name</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/rest/requestBody"</span>)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">restPostJsonRequestBody</span><span class="params">(@RequestBody String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"CREATE requestBody handled: "</span> + content);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * REST 更新，处理 application/json 的请求</span></div><div class="line"><span class="comment">     * URL: http://localhost:8080/rest/requestBody</span></div><div class="line"><span class="comment">     * 参数: name</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/rest/requestBody"</span>)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">restUpdateJsonRequestBody</span><span class="params">(@RequestBody String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"UPDATE requestBody handled: "</span> + content);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * REST 删除，处理 application/json 的请求</span></div><div class="line"><span class="comment">     * URL: http://localhost:8080/rest/requestBody</span></div><div class="line"><span class="comment">     * 参数: name</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/rest/requestBody"</span>)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">restDeleteJsonRequestBody</span><span class="params">(@RequestBody String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"DELETE requestBody handled: "</span> + content);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Result-java"><a href="#Result-java" class="headerlink" title="Result.java"></a>Result.java</h2><p>Result 用于统一服务器端返回的 JSON 格式，例如:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"code"</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">"message"</span>: <span class="string">"Short message"</span>,</div><div class="line">    <span class="attr">"success"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"data"</span>: &#123;</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"Alice"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.xtuer.bean;</div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONPObject;</div><div class="line"><span class="keyword">import</span> lombok.Getter;</div><div class="line"><span class="keyword">import</span> lombok.Setter;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Http Ajax 请求返回时用作返回的对象，FastJson 自动转换为 Json 字符串返回给前端。</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * 虽然同一个请求在不同情况下返回的 Result 中的 data 类型可能不同，例如 Result&lt;User&gt; </span></div><div class="line"><span class="comment"> * findUserByName(String name)，</span></div><div class="line"><span class="comment"> * 查询到用户时返回 Result 中 data 是 User 对象，查询不到用户时可返回 Result 中 data 是 String 对象，</span></div><div class="line"><span class="comment"> * 不过没关系，在我们的实现中允许这么做，好处是标志出了请求正确响应时返回的数据类型，因为这个是我们最关心的，  </span></div><div class="line"><span class="comment"> * 至于错误的类型，一般会用 String 描述，前端得到 success 为 false，大多都是把错误信息显示给用户即可。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@Setter</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> success;    <span class="comment">// 成功时为 true，失败时为 false</span></div><div class="line">    <span class="keyword">private</span> String  message;    <span class="comment">// 成功或则失败时的描述信息</span></div><div class="line">    <span class="keyword">private</span> Object  data;       <span class="comment">// 成功或则失败时的更多详细数据，一般失败时不需要</span></div><div class="line">    <span class="keyword">private</span> Integer statusCode; <span class="comment">// 状态码，一般是当 success 为 true 或者 false 时不足够表达时可使用</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Result</span><span class="params">(<span class="keyword">boolean</span> success, String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(success, message, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Result</span><span class="params">(<span class="keyword">boolean</span> success, String message, Object data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.success = success;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Result&lt;T&gt; <span class="title">ok</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;(<span class="keyword">true</span>, <span class="string">"success"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Result&lt;T&gt; <span class="title">ok</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;(<span class="keyword">true</span>, message);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Result&lt;T&gt; <span class="title">ok</span><span class="params">(String message, Object data)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;(<span class="keyword">true</span>, message, data);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Result&lt;T&gt; <span class="title">fail</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;(<span class="keyword">false</span>, <span class="string">"fail"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Result&lt;T&gt; <span class="title">fail</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;(<span class="keyword">false</span>, message);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Result&lt;T&gt; <span class="title">fail</span><span class="params">(String message, Object data)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;(<span class="keyword">false</span>, message, data);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 使用传入的回调函数名字 callback 和参数 params 构造一个 JSONP 响应格式的字符串。</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> callback 浏览器端 JSONP 回调函数的名字</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> data 参数列表</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 返回 JSONP 格式的字符串</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">jsonp</span><span class="params">(String callback, Object data)</span> </span>&#123;</div><div class="line">        JSONPObject jp = <span class="keyword">new</span> JSONPObject(callback);</div><div class="line">        jp.addParameter(data);</div><div class="line">        <span class="keyword">return</span> jp.toString();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 测试</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Result&lt;User&gt; r1 = Result.ok();</div><div class="line">        Result&lt;User&gt; r2 = Result.ok(<span class="string">"Yes"</span>, <span class="keyword">new</span> User(<span class="string">"Alice"</span>, <span class="string">"Passw0rd"</span>));</div><div class="line">        Result&lt;User&gt; r3 = Result.ok(<span class="string">"Yes"</span>, <span class="keyword">new</span> Demo(<span class="number">123456L</span>, <span class="string">"Physics"</span>));</div><div class="line">        System.out.println(JSON.toJSONString(r1));</div><div class="line">        System.out.println(JSON.toJSONString(r2));</div><div class="line">        System.out.println(JSON.toJSONString(r3));</div><div class="line">        System.out.println(r3.getData());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="附录：REST-插件-jquery-rest-js"><a href="#附录：REST-插件-jquery-rest-js" class="headerlink" title="附录：REST 插件 jquery.rest.js:"></a>附录：REST 插件 jquery.rest.js:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 执行 REST 请求的 jQuery 插件，不以 sync 开头的为异步请求，以 sync 开头的为同步请求:</span></div><div class="line"><span class="comment">     *      Get    请求调用 $.rest.get(),    $.rest.syncGet()</span></div><div class="line"><span class="comment">     *      Create 请求调用 $.rest.create(), $.rest.syncCreate()</span></div><div class="line"><span class="comment">     *      Update 请求调用 $.rest.update(), $.rest.syncUpdate()</span></div><div class="line"><span class="comment">     *      Delete 请求调用 $.rest.remove(), $.rest.syncRemove()</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * 默认使用 contentType 为 application/x-www-form-urlencoded 的方式提交请求，只能传递简单的 </span></div><div class="line"><span class="comment">     * key/value，就是普通的 form 表单提交，如果想要向服务器传递复杂的 json 对象，可以使用 </span></div><div class="line"><span class="comment">     * contentType 为 application/json 的格式，</span></div><div class="line"><span class="comment">     * 此时只要设置请求的参数 jsonRequestBody 为 true 即可，例如</span></div><div class="line"><span class="comment">     *      $.rest.update(&#123;</span></div><div class="line"><span class="comment">     *          url: '/rest', </span></div><div class="line"><span class="comment">     *          data: &#123;name: 'Alice'&#125;, </span></div><div class="line"><span class="comment">     *          jsonRequestBody: true, </span></div><div class="line"><span class="comment">     *          success: function(result) &#123;</span></div><div class="line"><span class="comment">     *              console.log(result);</span></div><div class="line"><span class="comment">     *      &#125;&#125;);</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * 调用示例:</span></div><div class="line"><span class="comment">     *      // 异步请求</span></div><div class="line"><span class="comment">     *      $.rest.get(&#123;url: '/rest', data: &#123;name: 'Alice'&#125;, success: function(result) &#123;</span></div><div class="line"><span class="comment">     *          console.log(result);</span></div><div class="line"><span class="comment">     *      &#125;&#125;);</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     *      // 同步请求</span></div><div class="line"><span class="comment">     *      $.rest.syncGet(&#123;url: '/rest', data: &#123;name: 'Alice'&#125;, success: function(result) &#123;</span></div><div class="line"><span class="comment">     *          console.log(result);</span></div><div class="line"><span class="comment">     *      &#125;&#125;);</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     *      // url 中的 bookId 会被替换为 urlParams 中的 bookId</span></div><div class="line"><span class="comment">     *      $.rest.update(&#123;</span></div><div class="line"><span class="comment">     *          url: '/rest/books/&#123;bookId&#125;', </span></div><div class="line"><span class="comment">     *          urlParams: &#123;bookId: 23&#125;, data: &#123;name: 'C&amp;S'&#125;, </span></div><div class="line"><span class="comment">     *          success: function(result) &#123;</span></div><div class="line"><span class="comment">     *              console.log(result);</span></div><div class="line"><span class="comment">     *          &#125;, </span></div><div class="line"><span class="comment">     *          fail: function(failResponse) &#123;&#125;</span></div><div class="line"><span class="comment">     *      &#125;);</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    $.rest = &#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 使用 Ajax 的方式执行 REST 的 GET 请求(服务器响应的数据根据 REST 的规范，必须是 Json 对象，否则</span></div><div class="line"><span class="comment">         * 浏览器端会解析出错)。</span></div><div class="line"><span class="comment">         * 如果没有设置 fail 的回调函数，则默认会把错误信息打印到控制台，可自定义 $.rest.defaultFail 函数</span></div><div class="line"><span class="comment">         * 例如使用弹窗显示错误信息。</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * 以下几个 REST 的函数 $.rest.create(), $.rest.update(), $.rest.remove() 只是请求的 HTTP 方法</span></div><div class="line"><span class="comment">         * 和 data 处理不一样，</span></div><div class="line"><span class="comment">         * 其他的都是相同的，所以就不再重复注释说明了。</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * @param &#123;Json&#125; options 有以下几个选项:</span></div><div class="line"><span class="comment">         *               &#123;String&#125;   url       请求的 URL        (必选)</span></div><div class="line"><span class="comment">         *               &#123;Json&#125;     urlParams URL 中的变量，例如 /rest/users/&#123;id&#125;，其中 &#123;id&#125; 为要</span></div><div class="line"><span class="comment">         *                                    被urlParams.id 替换的部分(可选)</span></div><div class="line"><span class="comment">         *               &#123;Json&#125;     data      请求的参数         (可选)</span></div><div class="line"><span class="comment">         *               &#123;Boolean&#125;  jsonRequestBody 是否使用 application/json 的方式进行请求，</span></div><div class="line"><span class="comment">         *                                          默认为 false 不使用(可选).</span></div><div class="line"><span class="comment">         *               &#123;Function&#125; success   请求成功时的回调函数(可选)</span></div><div class="line"><span class="comment">         *               &#123;Function&#125; fail      请求失败时的回调函数(可选)</span></div><div class="line"><span class="comment">         *               &#123;Function&#125; complete  请求完成后的回调函数(可选)</span></div><div class="line"><span class="comment">         * @return 没有返回值</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">            options.httpMethod = <span class="string">'GET'</span>;</div><div class="line">            <span class="keyword">this</span>.sendRequest(options);</div><div class="line">        &#125;,</div><div class="line">        create: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">            options.data = options.data || &#123;&#125;;</div><div class="line">            options.httpMethod = <span class="string">'POST'</span>;</div><div class="line">            <span class="keyword">this</span>.sendRequest(options);</div><div class="line">        &#125;,</div><div class="line">        update: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">            options.data = options.data || &#123;&#125;;</div><div class="line">            options.httpMethod   = <span class="string">'POST'</span>;</div><div class="line">            options.data._method = <span class="string">'PUT'</span>; <span class="comment">// SpringMvc HiddenHttpMethodFilter 的 PUT 请求</span></div><div class="line">            <span class="keyword">this</span>.sendRequest(options);</div><div class="line">        &#125;,</div><div class="line">        remove: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">            options.data = options.data || &#123;&#125;;</div><div class="line">            options.httpMethod   = <span class="string">'POST'</span>;</div><div class="line">            options.data._method = <span class="string">'DELETE'</span>; <span class="comment">// SpringMvc HiddenHttpMethodFilter 的 DELETE 请求</span></div><div class="line">            <span class="keyword">this</span>.sendRequest(options);</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">// 阻塞请求</span></div><div class="line">        syncGet: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">            options.async = <span class="literal">false</span>;</div><div class="line">            <span class="keyword">this</span>.get(options);</div><div class="line">        &#125;,</div><div class="line">        syncCreate: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">            options.async = <span class="literal">false</span>;</div><div class="line">            <span class="keyword">this</span>.create(options);</div><div class="line">        &#125;,</div><div class="line">        syncUpdate: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">            options.async = <span class="literal">false</span>;</div><div class="line">            <span class="keyword">this</span>.update(options);</div><div class="line">        &#125;,</div><div class="line">        syncRemove: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">            options.async = <span class="literal">false</span>;</div><div class="line">            <span class="keyword">this</span>.remove(options);</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">// 默认把错误打印到控制台，可以</span></div><div class="line">        defaultFail: <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.error(error.responseText);</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 执行 Ajax 请求，不推荐直接调用这个方法.</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * @param &#123;Json&#125; options 有以下几个选项:</span></div><div class="line"><span class="comment">         *               &#123;String&#125;   url        请求的 URL        (必选)</span></div><div class="line"><span class="comment">         *               &#123;String&#125;   httpMethod 请求的方式，有 GET, PUT, POST, DELETE (必选)</span></div><div class="line"><span class="comment">         *               &#123;Json&#125;     urlParams  URL 中的变量      (可选)</span></div><div class="line"><span class="comment">         *               &#123;Json&#125;     data       请求的参数        (可选)</span></div><div class="line"><span class="comment">         *               &#123;Boolean&#125;  async      默认为异步方式     (可选)</span></div><div class="line"><span class="comment">         *               &#123;Boolean&#125;  jsonRequestBody 是否使用 application/json 的方式进行请求，</span></div><div class="line"><span class="comment">         *                                          默认为 false 不使用(可选).</span></div><div class="line"><span class="comment">         *               &#123;Function&#125; success    请求成功时的回调函数(可选)</span></div><div class="line"><span class="comment">         *               &#123;Function&#125; fail       请求失败时的回调函数(可选)</span></div><div class="line"><span class="comment">         *               &#123;Function&#125; complete   请求完成后的回调函数(可选)</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        sendRequest: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">            <span class="comment">// 默认设置</span></div><div class="line">            <span class="keyword">var</span> defaults = &#123;</div><div class="line">                data           : &#123;&#125;,</div><div class="line">                <span class="keyword">async</span>          : <span class="literal">true</span>,</div><div class="line">                jsonRequestBody: <span class="literal">false</span>,</div><div class="line">                contentType    : <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>,</div><div class="line">                success        : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">                fail           : <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123; self.defaultFail(error); &#125;,</div><div class="line">                complete       : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">            &#125;;</div><div class="line">            <span class="comment">// 使用 jQuery.extend 合并用户传递的 options 和 defaults</span></div><div class="line">            <span class="keyword">var</span> settings = $.extend(<span class="literal">true</span>, &#123;&#125;, defaults, options);</div><div class="line">            <span class="comment">// 使用 application/json 的方式进行请求时，需要处理相关参数</span></div><div class="line">            <span class="keyword">if</span> (settings.jsonRequestBody) &#123;</div><div class="line">                <span class="keyword">if</span> (settings.data._method === <span class="string">'PUT'</span>) &#123;</div><div class="line">                    settings.httpMethod = <span class="string">'PUT'</span>;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (settings.data._method === <span class="string">'DELETE'</span>) &#123;</div><div class="line">                    settings.httpMethod = <span class="string">'DELETE'</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">delete</span> settings.data._method; <span class="comment">// 没必要传递一个无用的参数</span></div><div class="line">                settings.contentType = <span class="string">'application/json;charset=UTF-8'</span>;</div><div class="line">                <span class="comment">// 非 GET 时 json 对象需要序列化</span></div><div class="line">                <span class="keyword">if</span> (settings.data.httpMethod !== <span class="string">'GET'</span>) &#123;</div><div class="line">                    settings.data = <span class="built_in">JSON</span>.stringify(settings.data);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">/** </span></div><div class="line"><span class="comment">             * 替换 url 中的变量，例如 /rest/users/&#123;id&#125;, </span></div><div class="line"><span class="comment">             * 其中 &#123;id&#125; 为要被 settings.urlParams.id 替换的部分</span></div><div class="line"><span class="comment">             */</span></div><div class="line">            <span class="keyword">if</span> (settings.urlParams) &#123;</div><div class="line">                settings.url = settings.url.replace(<span class="regexp">/\&#123;\&#123;|\&#125;\&#125;|\&#123;(\w+)\&#125;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">m, n</span>) </span>&#123;</div><div class="line">                    <span class="comment">// m 是正则中捕捉的组 $0，n 是 $1，function($0, $1, $2, ...)</span></div><div class="line">                    <span class="keyword">if</span> (m == <span class="string">'&#123;&#123;'</span>) &#123; <span class="keyword">return</span> <span class="string">'&#123;'</span>; &#125;</div><div class="line">                    <span class="keyword">if</span> (m == <span class="string">'&#125;&#125;'</span>) &#123; <span class="keyword">return</span> <span class="string">'&#125;'</span>; &#125;</div><div class="line">                    <span class="keyword">return</span> settings.urlParams[n];</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 执行 AJAX 请求</span></div><div class="line">            $.ajax(&#123;</div><div class="line">                url        : settings.url,</div><div class="line">                data       : settings.data,</div><div class="line">                <span class="keyword">async</span>      : settings.async,</div><div class="line">                type       : settings.httpMethod,</div><div class="line">                dataType   : <span class="string">'json'</span>, <span class="comment">// 服务器的响应使用 JSON 格式</span></div><div class="line">                contentType: settings.contentType,</div><div class="line">                <span class="comment">/**</span></div><div class="line"><span class="comment">                 *服务器抛异常时，有时 Windows 的 Tomcat 环境下竟然取不到 header X-Requested-With, 但Mac</span></div><div class="line"><span class="comment">                 *下没问题，正常请求时都是好的，手动添加 X-Requested-With 为 XMLHttpRequest 后所有环境下</span></div><div class="line"><span class="comment">                 *正常和异常时都能取到了</span></div><div class="line"><span class="comment">                 */</span></div><div class="line">                headers: &#123;<span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>&#125;</div><div class="line">            &#125;)</div><div class="line">            .done(<span class="function"><span class="keyword">function</span>(<span class="params">data, textStatus, jqXHR</span>) </span>&#123;</div><div class="line">                settings.success(data, textStatus, jqXHR);</div><div class="line">            &#125;)</div><div class="line">            .fail(<span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus, failThrown</span>) </span>&#123;</div><div class="line">                <span class="comment">// data|jqXHR, textStatus, jqXHR|failThrown</span></div><div class="line">                settings.fail(jqXHR, textStatus, failThrown);</div><div class="line">            &#125;)</div><div class="line">            .always(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                settings.complete();</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;转自：&lt;/strong&gt; &lt;a href=&quot;https://qtdebug.com/fe-rest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://qtdebug.com/fe-rest/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用 REST 风格提交请求时，Content-Type 标准的来说应该用 &lt;strong&gt;application/json&lt;/strong&gt;，但是服务器端获取请求的参数时必须从 Request Body 中获取，而且有些框架对从 Request Body 中获取数据支持不好，需要我们自己实现，SpringMVC 中使用注解 &lt;strong&gt;@RequestBody&lt;/strong&gt;从 Request Body 中获取数据，但不能使用 Filter 进行 XSS 过滤。&lt;/p&gt;
&lt;p&gt;这里主要使用 SpringMVC 来作为后端进行介绍，SpringMVC 提供了一个 Filter &lt;strong&gt;HiddenHttpMethodFilter&lt;/strong&gt;，把 Content-Type 为 &lt;strong&gt;application/x-www-form-urlencoded&lt;/strong&gt; 的 POST 请求，参数中 &lt;strong&gt;_method&lt;/strong&gt; 值为 &lt;strong&gt;PUT&lt;/strong&gt; 的请求分发为 PUT 请求，为 &lt;strong&gt;DELETE&lt;/strong&gt; 请求分发为 DELETE 请求，实现了普通表单的 REST 风格提交，这样就可以使用 &lt;strong&gt;@RequestParam&lt;/strong&gt; 获取参数的值了。&lt;/p&gt;
&lt;p&gt;下面结合 SpringMVC 来介绍:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Content-Type 为 application/x-www-form-urlencoded + HiddenHttpMethodFilter&lt;ul&gt;
&lt;li&gt;优点: 服务器端 GET, PUT, POST, DELETE 时直接参数映射为对象，或则都使用 @RequestParam 获取参数，使用形式一致、简洁&lt;/li&gt;
&lt;li&gt;缺点:&lt;ul&gt;
&lt;li&gt;不是标准的 REST 规范&lt;/li&gt;
&lt;li&gt;参数是按照 key/value 的形式发送的，和普通表单的参数形式一样，有兴趣的可以在 Chrome 的 Network 中查看请求的 Headers&lt;/li&gt;
&lt;li&gt;不能传递复杂对象，例如 value 又是一个 Json 对象，只能传递简单的 key/value，也就是作为参数的 Json 对象只能有一层 key/value，不过非特殊情况也够用了，普通表单能做的它都能做&lt;/li&gt;
&lt;li&gt;PUT 时参数中需要带上 _method=”PUT”，DELETE 时参数中需要带上 _method=”DELETE”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content-Type 为 application/json&lt;ul&gt;
&lt;li&gt;优点: 标准的 REST 规范，GET 处理和上面的一样，但是 POST, PUT, DELETE 的参数是序列化后的 JSON 字符串，能够传递复杂的对象&lt;/li&gt;
&lt;li&gt;缺点:&lt;ul&gt;
&lt;li&gt;服务器端直接参数映射为对象，或则 GET 时使用 @RequestParam 获取参数，POST, PUT, DELETE 使用 @RequestBody 获取参数到 Map 中，然后再从 Map 中获取一个一个的参数，非常繁琐&lt;/li&gt;
&lt;li&gt;GET 和 POST, PUT, DELETE 获取参数的形式不统一，一个用 @RequestParam，其他的用 @RequestBody，需要脑子转换一下&lt;/li&gt;
&lt;li&gt;还有就是浏览器端 PUT, POST, DELETE 传递的 JSON 对象需要序列化后才能传给服务器端，可以使用 JSON.stringify(jsonObject) 进行序列化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结下来，在 SpringMVC 中推荐使用 &lt;code&gt;application/x-www-form-urlencoded + HiddenHttpMethodFilter&lt;/code&gt; 的方式实现 REST 的请求，就是为了获取参数时比较统一，当需要传递复杂的参数时，例如属性是多层嵌套的对象，Json 对象的数组，这时再使用 application/json 的方式。&lt;/p&gt;
&lt;p&gt;为了简化 Rest Ajax 的访问，下面对 jQuery 的 Ajax 进行了简单的封装，例如更新用户名原始实现大致如下:&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$.ajax(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    url        : &lt;span class=&quot;string&quot;&gt;&#39;/users/1/username&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    data       : &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(&amp;#123;&lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Bob&#39;&lt;/span&gt;&amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type       : &lt;span class=&quot;string&quot;&gt;&#39;PUT&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dataType   : &lt;span class=&quot;string&quot;&gt;&#39;json&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    contentType: &lt;span class=&quot;string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.done(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果每个 REST 的请求都像上面这样写一遍: &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt; 时需要 &lt;code&gt;JSON.stringify(data)&lt;/code&gt;, 请求不同时 type 也不同，dataType 和 contentType 是固定的，这么多限制，很容易出错。使用下面实现的 rest 插件后，简化如下，只需要关心参数和回调，不需要处理其他额外信息，而且 $.rest.update 名字也更有语义化，一看就知道是更新操作:&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$.rest.update(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    url    : &lt;span class=&quot;string&quot;&gt;&#39;/users/1/username&#39;&lt;/span&gt;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    data   : &amp;#123;&lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Bob&#39;&lt;/span&gt;&amp;#125;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    success: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="RESTful" scheme="maode.github.io/tags/RESTful/"/>
    
      <category term="jQuery" scheme="maode.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>【摘】java的几种对象PO,VO,DAO,BO,POJO,DTO</title>
    <link href="maode.github.io/2018/02/08/180208-java-pojo-status/"/>
    <id>maode.github.io/2018/02/08/180208-java-pojo-status/</id>
    <published>2018-02-08T09:28:08.000Z</published>
    <updated>2018-02-08T09:44:00.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PO："><a href="#PO：" class="headerlink" title="PO："></a>PO：</h2><p>persistant object持久对象</p>
<p>最形象的理解就是一个PO就是数据库中的一条记录。<br>好处是可以把一条记录作为一个对象处理，可以方便的转为其它对象。</p>
<h2 id="BO："><a href="#BO：" class="headerlink" title="BO："></a>BO：</h2><p>business object业务对象</p>
<p>主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。<br>比如一个简历，有教育经历、工作经历、社会关系等等。<br>我们可以把教育经历对应一个PO，工作经历对应一个PO，社会关系对应一个PO。<br>建立一个对应简历的BO对象处理简历，每个BO包含这些PO。<br>这样处理业务逻辑时，我们就可以针对BO去处理。 </p>
<h2 id="VO-："><a href="#VO-：" class="headerlink" title="VO ："></a>VO ：</h2><p>value object值对象<br>ViewObject表现层对象 主要对应界面显示的数据对象。对于一个WEB页面，或者SWT、SWING的一个界面，用一个VO对象对应整个界面的值。</p>
<a id="more"></a>
<h2 id="DTO-："><a href="#DTO-：" class="headerlink" title="DTO ："></a>DTO ：</h2><p>Data Transfer Object数据传输对象<br>主要用于远程调用等需要大量传输对象的地方。<br>比如我们一张表有100个字段，那么对应的PO就有100个属性。<br>但是我们界面上只要显示10个字段，<br>客户端用WEB service来获取数据，没有必要把整个PO对象传递到客户端，<br>这时我们就可以用只有这10个属性的DTO来传递结果到客户端，这样也不会暴露服务端表结构.到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为VO</p>
<h2 id="POJO-："><a href="#POJO-：" class="headerlink" title="POJO ："></a>POJO ：</h2><p>plain ordinary java object 简单java对象 个人感觉POJO是最常见最多变的对象，是一个中间对象，也是我们最常打交道的对象。</p>
<p>一个POJO持久化以后就是PO<br>直接用它传递、传递过程中就是DTO<br>直接用来对应表示层就是VO</p>
<h2 id="DAO："><a href="#DAO：" class="headerlink" title="DAO："></a>DAO：</h2><p>data access object数据访问对象<br>这个大家最熟悉，和上面几个O区别最大，基本没有互相转化的可能性和必要.<br>主要用来封装对数据库的访问。通过它可以把POJO持久化为PO，用PO组装出来VO、DTO</p>
<p>   总结下我认为一个对象究竟是什么O要看具体环境，在不同的层、不同的应用场合，对象的身份也不一样，而且对象身份的转化也是很自然的。就像你对老婆来说就是老公，对父母来说就是子女。设计这些概念的初衷不是为了唬人而是为了更好的理解和处理各种逻辑，让大家能更好的去用面向对象的方式处理问题.</p>
<p>   大家千万不要陷入过度设计，大可不必为了设计而设计一定要在代码中区分各个对象。一句话技术是为应用服务的。</p>
<p>摘自：<a href="http://www.blogjava.net/vip01/archive/2007/01/08/92430.html" target="_blank" rel="external">http://www.blogjava.net/vip01/archive/2007/01/08/92430.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PO：&quot;&gt;&lt;a href=&quot;#PO：&quot; class=&quot;headerlink&quot; title=&quot;PO：&quot;&gt;&lt;/a&gt;PO：&lt;/h2&gt;&lt;p&gt;persistant object持久对象&lt;/p&gt;
&lt;p&gt;最形象的理解就是一个PO就是数据库中的一条记录。&lt;br&gt;好处是可以把一条记录作为一个对象处理，可以方便的转为其它对象。&lt;/p&gt;
&lt;h2 id=&quot;BO：&quot;&gt;&lt;a href=&quot;#BO：&quot; class=&quot;headerlink&quot; title=&quot;BO：&quot;&gt;&lt;/a&gt;BO：&lt;/h2&gt;&lt;p&gt;business object业务对象&lt;/p&gt;
&lt;p&gt;主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。&lt;br&gt;比如一个简历，有教育经历、工作经历、社会关系等等。&lt;br&gt;我们可以把教育经历对应一个PO，工作经历对应一个PO，社会关系对应一个PO。&lt;br&gt;建立一个对应简历的BO对象处理简历，每个BO包含这些PO。&lt;br&gt;这样处理业务逻辑时，我们就可以针对BO去处理。 &lt;/p&gt;
&lt;h2 id=&quot;VO-：&quot;&gt;&lt;a href=&quot;#VO-：&quot; class=&quot;headerlink&quot; title=&quot;VO ：&quot;&gt;&lt;/a&gt;VO ：&lt;/h2&gt;&lt;p&gt;value object值对象&lt;br&gt;ViewObject表现层对象 主要对应界面显示的数据对象。对于一个WEB页面，或者SWT、SWING的一个界面，用一个VO对象对应整个界面的值。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PO" scheme="maode.github.io/tags/PO/"/>
    
      <category term="VO" scheme="maode.github.io/tags/VO/"/>
    
      <category term="DAO" scheme="maode.github.io/tags/DAO/"/>
    
      <category term="BO" scheme="maode.github.io/tags/BO/"/>
    
      <category term="POJO" scheme="maode.github.io/tags/POJO/"/>
    
      <category term="DTO" scheme="maode.github.io/tags/DTO/"/>
    
  </entry>
  
  <entry>
    <title>【摘】Hibernate的saveOrUpdate方法</title>
    <link href="maode.github.io/2018/02/08/180208-Hibernate-saveOrUpdate/"/>
    <id>maode.github.io/2018/02/08/180208-Hibernate-saveOrUpdate/</id>
    <published>2018-02-08T07:35:43.000Z</published>
    <updated>2018-02-18T09:47:56.313Z</updated>
    
    <content type="html"><![CDATA[<p>在Hibernate中，最核心的概念就是对PO的状态管理。一个PO有三种状态： </p>
<p>1、未被持久化的VO<br>此时就是一个内存对象VO，由JVM管理生命周期 </p>
<p>2、已被持久化的PO，并且在Session生命周期内<br>此时映射数据库数据，由数据库管理生命周期 </p>
<p>3、曾被持久化过，但现在和Session已经detached了，以VO的身份在运行<br>这种和Session已经detached的PO还能够进入另一个Session，继续进行PO状态管理，此时它就成为PO的第二种状态了。<strong>这种PO实际上是跨了Session进行了状态维护的。 </strong></p>
<p>在传统的JDO1.x中，PO只有前面两种状态，一个PO一旦脱离PM，就丧失了状态了，不再和数据库数据关联，成为一个纯粹的内存VO，它即使进入一个新的PM，也不能恢复它的状态了。 </p>
<p>Hibernate强的地方就在于，一个PO脱离Session之后，还能保持状态，再进入一个新的Session之后，就恢复状态管理的能力，但此时状态管理需要使用session.update或者session.saveOrUpdate，这就是Hibernate Reference中提到的“requires a slightly different programming model ” </p>
<p>现在正式进入本话题：<br><a id="more"></a><br><strong>简单的来说，update和saveOrUpdate是用来对跨Session的PO进行状态管理的。 </strong></p>
<p>假设你的PO不需要跨Session的话，那么就不需要用到，例如你打开一个Session，对PO进行操作，然后关闭，之后这个PO你也不会再用到了，那么就不需要用update。 </p>
<p>因此，我们来看看例子： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Foo foo=sess.load(Foo.class,id);</div><div class="line">foo.setXXX(xxx);</div><div class="line">sess.flush();</div><div class="line">sess.commit();</div></pre></td></tr></table></figure>
<p>PO对象foo的操作都在一个Session生命周期内完成，因此不需要显式的进行sess.update(foo)这样的操作。Hibernate会自动监测到foo对象已经被修改过，因此就向数据库发送一个update的sql。当然如果你非要加上sess.update(foo)也不会错，只不过这样做没有任何必要。 </p>
<p>而跨Session的意思就是说这个PO对象在Session关闭之后，你还把它当做一个VO来用，后来你在Session外面又修改了它的属性，然后你又想打开一个Session，把VO的属性修改保存到数据库里面，那么你就需要用update了。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// in the first session   </span></div><div class="line">Cat cat = (Cat); firstSession.load(Cat.class, catId);   </div><div class="line">Cat potentialMate = <span class="keyword">new</span> Cat();   </div><div class="line">firstSession.save(potentialMate);   </div><div class="line"></div><div class="line"><span class="comment">// in a higher tier of the application   </span></div><div class="line">cat.setMate(potentialMate);   </div><div class="line"></div><div class="line"><span class="comment">// later, in a new session   </span></div><div class="line">secondSession.update(cat);  <span class="comment">// update cat   </span></div><div class="line">secondSession.update(mate); <span class="comment">// update mate</span></div></pre></td></tr></table></figure>
<p>cat和mate对象是在第一个session中取得的，在第一个session关闭之后，他们就成了PO的第三种状态，和Session已经detached的PO，此时他们的状态信息仍然被保留下来了。当他们进入第二个session之后，立刻就可以进行状态的更新。但是由于对cat的修改操作：cat.setMate(potentialMate); 是在Session外面进行的，Hibernate不可能知道cat对象已经被改过了，第二个Session并不知道这种修改，因此一定要显式的调用secondSession.update(cat); 通知Hibernate，cat对象已经修改了，你必须发送update的sql了。 </p>
<p>所以update的作用就在于此，它只会被用于当一个PO对象跨Session进行状态同步的时候才需要写。而一个PO对象当它不需要跨Session进行状态管理的时候，是不需要写update的。 </p>
<p>再谈谈saveOrUpdate的用场： </p>
<p>saveOrUpdate和update的区别就在于在跨Session的PO状态管理中，Hibernate对PO采取何种策略。 </p>
<p>例如当你写一个DAOImpl的时候，让cat对象增加一个mate，如下定义： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMate</span><span class="params">(Cat cat, Mate mate)</span></span>; &#123;  </div><div class="line">	Session session = ...;  </div><div class="line">	Transacton tx = ...;  </div><div class="line">	session.update(cat);  </div><div class="line">	cat.addMate(mate);  </div><div class="line">	tx.commit();  </div><div class="line">	session.close();  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>显然你是需要把Hibernate的操作封装在DAO里面的，让业务层的程序员和Web层的程序员不需要了解Hibernate，直接对DAO进行调用。 </p>
<p>此时问题就来了：上面的代码运行正确有一个必要的前提，那就是方法调用参数cat对象必须是一个已经被持久化过的PO，也就是来说，它应该首先从数据库查询出来，然后才能这样用。但是业务层的程序员显然不知道这种内部的玄妙，如果他的业务是现在增加一个cat，然后再增加它的mate，他显然会这样调用，new一个cat对象出来，然后就addMate： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Cat cat = <span class="keyword">new</span> Cat();  </div><div class="line">cat.setXXX();  </div><div class="line">daoimpl.addMate(cat,mate);</div></pre></td></tr></table></figure>
<p>但是请注意看，这个cat对象只是一个VO，它没有被持久化过，它还不是PO，它没有资格调用addMate方法，因此调用addMate方法不会真正往数据库里面发送update的sql，这个cat对象必须先被save到数据库，在真正成为一个PO之后，才具备addMate的资格。 </p>
<p>你必须这样来操作： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Cat cat = <span class="keyword">new</span> Cat();  </div><div class="line">cat.setXXX();  </div><div class="line">daoimpl.addCat(cat);  </div><div class="line">daoimpl.addMate(cat, mate);</div></pre></td></tr></table></figure>
<p>先持久化cat，然后才能对cat进行其他的持久化操作。因此要求业务层的程序员必须清楚cat对象处于何种状态，到底是第一种，还是第三种。如果是第一种，就要先save，再addMate；如果是第三种，就直接addMate。 </p>
<p>但是最致命的是，如果整个软件分层很多，业务层的程序员他拿到这个cat对象也可能是上层Web应用层传递过来的cat，他自己也不知道这个cat究竟是VO，没有被持久化过，还是已经被持久化过，那么他根本就没有办法写程序了。 </p>
<p>所以这样的DAOImpl显然是有问题的，它会对业务层的程序员造成很多编程上的陷阱，业务层的程序员必须深刻的了解他调用的每个DAO对PO对象进行了何种状态管理，必须深刻的了解他的PO对象在任何时候处于什么确切的状态，才能保证编程的正确性，显然这是做不到的，但是有了saveOrUpdate，这些问题就迎刃而解了。 </p>
<p>现在你需要修改addMate方法： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMate</span><span class="params">(Cat cat, Mate mate)</span> </span>&#123;  </div><div class="line"> Session session = ...;  </div><div class="line"> Transacton tx = ...;  </div><div class="line"> session.saveOrUpdate(cat);</div><div class="line"> cat.addMate(mate);</div><div class="line"> tx.commit();</div><div class="line"> session.close();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如上，如果业务层的程序员传进来的是一个已经持久化过的PO对象，那么Hibernate会更新cat对象(假设业务层的程序员在Session外面修改过cat的属性)，如果传进来的是一个新new出来的对象，那么向数据库save这个PO对象。 </p>
<p>BTW: Hibernate此时究竟采取更新cat对象，还是save cat对象，取决于unsave-value的设定。 </p>
<p>这样，业务层的程序员就不必再操心PO的状态问题了，对于他们来说，不管cat是new出来的对象，只是一个VO也好；还是从数据库查询出来的的PO对象也好，全部都是直接addMate就OK了： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">daoimple.addMate(cat, mate);</div></pre></td></tr></table></figure>
<p>这便是saveOrUpdate的作用。</p>
<p>摘自：<a href="http://www.iteye.com/topic/2632" target="_blank" rel="external">http://www.iteye.com/topic/2632</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Hibernate中，最核心的概念就是对PO的状态管理。一个PO有三种状态： &lt;/p&gt;
&lt;p&gt;1、未被持久化的VO&lt;br&gt;此时就是一个内存对象VO，由JVM管理生命周期 &lt;/p&gt;
&lt;p&gt;2、已被持久化的PO，并且在Session生命周期内&lt;br&gt;此时映射数据库数据，由数据库管理生命周期 &lt;/p&gt;
&lt;p&gt;3、曾被持久化过，但现在和Session已经detached了，以VO的身份在运行&lt;br&gt;这种和Session已经detached的PO还能够进入另一个Session，继续进行PO状态管理，此时它就成为PO的第二种状态了。&lt;strong&gt;这种PO实际上是跨了Session进行了状态维护的。 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在传统的JDO1.x中，PO只有前面两种状态，一个PO一旦脱离PM，就丧失了状态了，不再和数据库数据关联，成为一个纯粹的内存VO，它即使进入一个新的PM，也不能恢复它的状态了。 &lt;/p&gt;
&lt;p&gt;Hibernate强的地方就在于，一个PO脱离Session之后，还能保持状态，再进入一个新的Session之后，就恢复状态管理的能力，但此时状态管理需要使用session.update或者session.saveOrUpdate，这就是Hibernate Reference中提到的“requires a slightly different programming model ” &lt;/p&gt;
&lt;p&gt;现在正式进入本话题：&lt;br&gt;
    
    </summary>
    
    
      <category term="Hibernate" scheme="maode.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>【转】Shadowsocks一键安装脚本（四合一）</title>
    <link href="maode.github.io/2017/12/12/171212-Shadowsocks4-1/"/>
    <id>maode.github.io/2017/12/12/171212-Shadowsocks4-1/</id>
    <published>2017-12-12T10:46:33.000Z</published>
    <updated>2018-02-08T10:00:14.102Z</updated>
    
    <content type="html"><![CDATA[<p><strong>转自：</strong> <a href="https://teddysun.com/" target="_blank" rel="external">秋水逸冰</a> » <a href="https://teddysun.com/486.html" target="_blank" rel="external">Shadowsocks 一键安装脚本（四合一）</a></p>
<h2 id="本脚本适用环境"><a href="#本脚本适用环境" class="headerlink" title="本脚本适用环境"></a>本脚本适用环境</h2><p>系统支持：CentOS 6+，Debian 7+，Ubuntu 12+<br>内存要求：≥128M<br>日期　　：2017 年 11 月 25 日</p>
<h3 id="关于本脚本"><a href="#关于本脚本" class="headerlink" title="关于本脚本"></a>关于本脚本</h3><p>1、一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端；<br>2、各版本的启动脚本及配置文件名不再重合；<br>3、每次运行可安装一种版本；<br>4、支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）；<br>5、若已安装多个版本，则卸载时也需多次运行（每次卸载一种）；<br>6、Shadowsocks-Python 和 ShadowsocksR 安装后不可同时启动（因为本质上都属 Python 版）。</p>
<p><strong>友情提示：</strong> 如果你有问题，请先阅读这篇《<a href="https://teddysun.com/399.html" target="_blank" rel="external">Shadowsocks Troubleshooting</a>》之后再询问。<br><a id="more"></a></p>
<h3 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h3><p>服务器端口：自己设定（如不设定，默认为 8989）<br>密码：自己设定（如不设定，默认为 teddysun.com）<br>加密方式：自己设定（如不设定，Python 和 libev 版默认为 aes-256-gcm，R 和 Go 版默认为 aes-256-cfb）<br>协议（protocol）：自己设定（如不设定，默认为 origin）（仅限 ShadowsocksR 版）<br>混淆（obfs）：自己设定（如不设定，默认为 plain）（仅限 ShadowsocksR 版）<br><strong>备注：</strong>脚本默认创建单用户配置文件，如需配置多用户，请手动修改相应的配置文件后重启即可。</p>
<h3 id="客户端下载"><a href="#客户端下载" class="headerlink" title="客户端下载"></a>客户端下载</h3><p>常规版 Windows 客户端<br><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p>
<p>ShadowsocksR 版 Windows 客户端<br><a href="https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases" target="_blank" rel="external">https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases</a></p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>使用root用户登录，运行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</div><div class="line">chmod +x shadowsocks-all.sh</div><div class="line">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</div></pre></td></tr></table></figure></p>
<h3 id="安装完成后，脚本提示如下"><a href="#安装完成后，脚本提示如下" class="headerlink" title="安装完成后，脚本提示如下"></a>安装完成后，脚本提示如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Congratulations, your_shadowsocks_version install completed!</div><div class="line">Your Server IP        :your_server_ip</div><div class="line">Your Server Port      :your_server_port</div><div class="line">Your Password         :your_password</div><div class="line">Your Encryption Method:your_encryption_method</div><div class="line"></div><div class="line">Your QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients)</div><div class="line"> ss://your_encryption_method:your_password@your_server_ip:your_server_port</div><div class="line">Your QR Code has been saved as a PNG file path:</div><div class="line"> your_path.png</div><div class="line"></div><div class="line">Welcome to visit:https://teddysun.com/486.html</div><div class="line">Enjoy it!</div></pre></td></tr></table></figure>
<h3 id="卸载方法"><a href="#卸载方法" class="headerlink" title="卸载方法"></a>卸载方法</h3><p>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）</p>
<p>使用root用户登录，运行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./shadowsocks-all.sh uninstall</div></pre></td></tr></table></figure></p>
<h3 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h3><p>启动脚本后面的参数含义，从左至右依次为：<strong>启动，停止，重启，查看状态。</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Shadowsocks-Python 版：</div><div class="line">/etc/init.d/shadowsocks-python start | stop | restart | status</div><div class="line"></div><div class="line">ShadowsocksR 版：</div><div class="line">/etc/init.d/shadowsocks-r start | stop | restart | status</div><div class="line"></div><div class="line">Shadowsocks-Go 版：</div><div class="line">/etc/init.d/shadowsocks-go start | stop | restart | status</div><div class="line"></div><div class="line">Shadowsocks-libev 版：</div><div class="line">/etc/init.d/shadowsocks-libev start | stop | restart | status</div></pre></td></tr></table></figure></p>
<h3 id="各版本默认配置文件"><a href="#各版本默认配置文件" class="headerlink" title="各版本默认配置文件"></a>各版本默认配置文件</h3><p>Shadowsocks-Python 版：<br>/etc/shadowsocks-python/config.json</p>
<p>ShadowsocksR 版：<br>/etc/shadowsocks-r/config.json</p>
<p>Shadowsocks-Go 版：<br>/etc/shadowsocks-go/config.json</p>
<p>Shadowsocks-libev 版：<br>/etc/shadowsocks-libev/config.json</p>
<h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><p>2017 年 11 月 25 日：<br>1、如果 Linux 内核版本大于 3.7.0，则配置文件默认支持 TCP fast open；<br>2、新增：libev 版启动时支持 verbose mode，也就是默认写 log 到 /var/log/messages 方便查看。</p>
<p>2017 年 11 月 12 日：<br>1、新增生成 ss:// 或 ssr:// 链接，以及其二维码图片。<br>※ 脚本会根据当前安装的版本以及输入的各项配置，自动生成 ss:// 或 ssr:// 的链接并在安装成功后显示，直接复制即可被客户端识别。同时生成其二维码图片，并保存在当前目录下，下载后用看图软件打开，也能被客户端识别。</p>
<p>复制二维码链接后 Shadowsocks 客户端识别示例：<br><img src="/assets/blogImg/171212-Shadowsocks4-1-1.png" alt="" title="Shadowsocks 客户端示例"></p>
<p>复制二维码链接后 ShadowsocksR 客户端识别示例：<br><img src="/assets/blogImg/171212-Shadowsocks4-1-2.png" alt="" title="ShadowsocksR 客户端示例"></p>
<p>二维码（QR Code）参考链接：<br><a href="https://github.com/shadowsocks/shadowsocks/wiki/Generate-QR-Code-for-Android-or-iOS-Clients" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks/wiki/Generate-QR-Code-for-Android-or-iOS-Clients</a><br><a href="https://github.com/shadowsocksr-backup/shadowsocks-rss/wiki/SSR-QRcode-scheme" target="_blank" rel="external">https://github.com/shadowsocksr-backup/shadowsocks-rss/wiki/SSR-QRcode-scheme</a></p>
<p>2017 年 10 月 22 日：<br>1、升级：libsodium 到 1.0.15。</p>
<p>2017 年 10 月 14 日：<br>1、新增：在安装 Shadowsocks-libev 版时<strong>可选安装</strong> simple-obfs 服务端。<br>※ 脚本通过判断 autoconf 版本是否大于或等于 2.67 来一键安装 simple-obfs 服务端。并且，支持在安装过程中选择 obfs 为 http 或 tls。<br>※ 使用方法参考：<a href="https://teddysun.com/511.html" target="_blank" rel="external">https://teddysun.com/511.html</a></p>
<p>2017 年 09 月 16 日：<br>1、修正：Shadowsocks-libev 版 v3.1.0 使用 libc-ares 替换 libudns 依赖包，解决了依赖问题；<br>2、升级：mbedtls 到版本 2.6.0。</p>
<p>2017 年 07 月 27 日：<br>1、新增：ShadowsocksR 版可选协议（protocol）auth_chain_b 。使用该协议需更新到最新（4.7.0） <a href="http://dl.teddysun.com/files/ShadowsocksR-4.7.0-win.7z" target="_blank" rel="external">ShadowsocksR 版客户端</a>；<br>2、修改：更新 ShadowsocksR 源码下载地址。</p>
<p>2017 年 07 月 23 日：<br>1、修正：卸载时可自行选择某个版本卸载，若该版本不存在则报错退出。</p>
<p>2017 年 07 月 22 日：<br>1、修正：默认加密方式从 aes-256-cfb 改为 aes-256-gcm（Python 和 libev 版）；<br>2、新增：安装时可选 16 种加密方式的其中之一（Python 和 libev 版）。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">aes-256-gcm</div><div class="line">aes-192-gcm</div><div class="line">aes-128-gcm</div><div class="line">aes-256-ctr</div><div class="line">aes-192-ctr</div><div class="line">aes-128-ctr</div><div class="line">aes-256-cfb</div><div class="line">aes-192-cfb</div><div class="line">aes-128-cfb</div><div class="line">camellia-128-cfb</div><div class="line">camellia-192-cfb</div><div class="line">camellia-256-cfb</div><div class="line">chacha20-ietf-poly1305</div><div class="line">chacha20-ietf</div><div class="line">chacha20</div><div class="line">rc4-md5</div></pre></td></tr></table></figure></p>
<p>3、新增：安装时可选 9 种加密方式的其中之一（Go 版）。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">aes-256-cfb</div><div class="line">aes-192-cfb</div><div class="line">aes-128-cfb</div><div class="line">aes-256-ctr</div><div class="line">aes-192-ctr</div><div class="line">aes-128-ctr</div><div class="line">chacha20-ietf</div><div class="line">chacha20</div><div class="line">rc4-md5</div></pre></td></tr></table></figure></p>
<p>4、新增：安装时可选 13 种加密方式的其中之一（none 是不加密，ShadowsocksR 版）。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">none</div><div class="line">aes-256-cfb</div><div class="line">aes-192-cfb</div><div class="line">aes-128-cfb</div><div class="line">aes-256-cfb8</div><div class="line">aes-192-cfb8</div><div class="line">aes-128-cfb8</div><div class="line">aes-256-ctr</div><div class="line">aes-192-ctr</div><div class="line">aes-128-ctr</div><div class="line">chacha20-ietf</div><div class="line">chacha20</div><div class="line">rc4-md5</div><div class="line">rc4-md5-6</div></pre></td></tr></table></figure></p>
<p>5、新增：安装时可选 7 种协议（protocol）的其中之一（仅限 ShadowsocksR 版）。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">origin</div><div class="line">verify_deflate</div><div class="line">auth_sha1_v4</div><div class="line">auth_sha1_v4_compatible</div><div class="line">auth_aes128_md5</div><div class="line">auth_aes128_sha1</div><div class="line">auth_chain_a</div><div class="line">auth_chain_b</div></pre></td></tr></table></figure></p>
<p>6、新增：安装时可选 9 种混淆（obfs）的其中之一（仅限 ShadowsocksR 版）。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">plain</div><div class="line">http_simple</div><div class="line">http_simple_compatible</div><div class="line">http_post</div><div class="line">http_post_compatible</div><div class="line">tls1.2_ticket_auth</div><div class="line">tls1.2_ticket_auth_compatible</div><div class="line">tls1.2_ticket_fastauth</div><div class="line">tls1.2_ticket_fastauth_compatible</div></pre></td></tr></table></figure></p>
<p>2017 年 02 月 24 日：<br>1、恢复： 通过 Github API 自动获取 Shadowsocks-libev 的最新 release 版本的功能（v3.0.3）。</p>
<p>2017 年 02 月 13 日：<br>1、升级： Shadowsocks-libev 版到版本 3.0.2；<br>2、升级： Shadowsocks-go 版到版本 1.2.1（基于 <a href="https://github.com/shadowsocks/shadowsocks-go" target="_blank" rel="external">Github 最新代码</a>，用 go 1.8 编译完成的 x86 和 x86_64 二进制文件）；<br>3、修复：在 Debian 7 下默认没有 libudns-dev 依赖包的问题。</p>
<p>2017 年 02 月 12 日：<br>1、升级： Shadowsocks-libev 版到版本 3.0.1。</p>
<p>2017 年 01 月 27 日：<br>1、升级： Shadowsocks-go 版到版本 1.2.1 （仅适用于 x86_64 系统）</p>
<h3 id="更多单版本-Shadowsocks-服务端一键安装脚本"><a href="#更多单版本-Shadowsocks-服务端一键安装脚本" class="headerlink" title="更多单版本 Shadowsocks 服务端一键安装脚本"></a>更多单版本 Shadowsocks 服务端一键安装脚本</h3><p><a href="https://teddysun.com/342.html" target="_blank" rel="external">Shadowsocks Python 版一键安装脚本（CentOS，Debian，Ubuntu）</a><br><a href="https://shadowsocks.be/9.html" target="_blank" rel="external">ShadowsocksR 版一键安装脚本（CentOS，Debian，Ubuntu）</a><br><a href="https://teddysun.com/357.html" target="_blank" rel="external">CentOS 下 Shadowsocks-libev 一键安装脚本</a><br><a href="https://teddysun.com/358.html" target="_blank" rel="external">Debian 下 Shadowsocks-libev 一键安装脚本</a><br><a href="https://teddysun.com/392.html" target="_blank" rel="external">Shadowsocks-go 一键安装脚本（CentOS，Debian，Ubuntu）</a></p>
<p><strong>注意：</strong> 以上单版本不可与该四合一版本混用。</p>
<h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>网络加速：<a href="https://teddysun.com/489.html" target="_blank" rel="external">一键安装最新内核并开启 BBR 脚本</a><br>协议混淆：<a href="https://teddysun.com/511.html" target="_blank" rel="external">如何安装和配置simple-obfs服务端</a><br>各种安装优化：<a href="https://github.com/iMeiji/shadowsocks_install" target="_blank" rel="external">shadowsocks_install</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;转自：&lt;/strong&gt; &lt;a href=&quot;https://teddysun.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;秋水逸冰&lt;/a&gt; » &lt;a href=&quot;https://teddysun.com/486.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Shadowsocks 一键安装脚本（四合一）&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;本脚本适用环境&quot;&gt;&lt;a href=&quot;#本脚本适用环境&quot; class=&quot;headerlink&quot; title=&quot;本脚本适用环境&quot;&gt;&lt;/a&gt;本脚本适用环境&lt;/h2&gt;&lt;p&gt;系统支持：CentOS 6+，Debian 7+，Ubuntu 12+&lt;br&gt;内存要求：≥128M&lt;br&gt;日期　　：2017 年 11 月 25 日&lt;/p&gt;
&lt;h3 id=&quot;关于本脚本&quot;&gt;&lt;a href=&quot;#关于本脚本&quot; class=&quot;headerlink&quot; title=&quot;关于本脚本&quot;&gt;&lt;/a&gt;关于本脚本&lt;/h3&gt;&lt;p&gt;1、一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端；&lt;br&gt;2、各版本的启动脚本及配置文件名不再重合；&lt;br&gt;3、每次运行可安装一种版本；&lt;br&gt;4、支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）；&lt;br&gt;5、若已安装多个版本，则卸载时也需多次运行（每次卸载一种）；&lt;br&gt;6、Shadowsocks-Python 和 ShadowsocksR 安装后不可同时启动（因为本质上都属 Python 版）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;友情提示：&lt;/strong&gt; 如果你有问题，请先阅读这篇《&lt;a href=&quot;https://teddysun.com/399.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Shadowsocks Troubleshooting&lt;/a&gt;》之后再询问。&lt;br&gt;
    
    </summary>
    
    
      <category term="Shadowsocks" scheme="maode.github.io/tags/Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse  tomcat mvn plugin</title>
    <link href="maode.github.io/2017/12/10/171210-mvnplugin-tomcat/"/>
    <id>maode.github.io/2017/12/10/171210-mvnplugin-tomcat/</id>
    <published>2017-12-10T11:08:45.000Z</published>
    <updated>2017-12-10T11:55:52.354Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/171210-tomcat-mvn-plugin.png" alt=""></p>
<p>暂时就这些，后面没有了！(=^ ^=)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/171210-tomcat-mvn-plugin.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;暂时就这些，后面没有了！(=^ ^=)&lt;/p&gt;

    
    </summary>
    
    
      <category term="Eclipse" scheme="maode.github.io/tags/Eclipse/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse plugin RunJettyRun</title>
    <link href="maode.github.io/2017/11/10/171110-runjettyrun/"/>
    <id>maode.github.io/2017/11/10/171110-runjettyrun/</id>
    <published>2017-11-10T04:08:45.000Z</published>
    <updated>2017-11-10T04:14:01.452Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/171110-jetty-plugin.png" alt=""></p>
<p>暂时就这些，后面没有了！(=^ ^=)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/171110-jetty-plugin.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;暂时就这些，后面没有了！(=^ ^=)&lt;/p&gt;

    
    </summary>
    
    
      <category term="Eclipse" scheme="maode.github.io/tags/Eclipse/"/>
    
  </entry>
  
  <entry>
    <title>Debugging Node.js with DevTools</title>
    <link href="maode.github.io/2017/09/26/170926-nodejs-debug/"/>
    <id>maode.github.io/2017/09/26/170926-nodejs-debug/</id>
    <published>2017-09-26T14:37:45.000Z</published>
    <updated>2017-09-28T06:22:48.224Z</updated>
    
    <content type="html"><![CDATA[<p>devtool 已经并入node.js v6.3.0以上版本的核心包，所以不用再installe。可以直接开整。如下：</p>
<p>调试 <code>mrd.js</code> 并在该文件第一句断点。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node --inspect --debug-brk mrd.js <span class="comment"># debug mrd.js 并在该文件第一句断点</span></div></pre></td></tr></table></figure></p>
<p>打开Chrome在地址栏输入：chrome://inspect </p>
<p>OK！现在可以开始调试了。就是如此简单。</p>
<p><strong>如果想让某次的debug过程重新走，在devtool中随便改行代码，然后保存，就可以重头再走一遍了。</strong></p>
<p>v7+ 版本还可以把以上命令简化为：<code>$ node --inspect-brk mrd.js( v7+)</code><br>我的版本低，没试！</p>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27" target="_blank" rel="external">https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27</a></p>
<p>暂时就这些，后面没有了！(=^ ^=)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;devtool 已经并入node.js v6.3.0以上版本的核心包，所以不用再installe。可以直接开整。如下：&lt;/p&gt;
&lt;p&gt;调试 &lt;code&gt;mrd.js&lt;/code&gt; 并在该文件第一句断点。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="Node.js" scheme="maode.github.io/tags/Node-js/"/>
    
      <category term="DevTools" scheme="maode.github.io/tags/DevTools/"/>
    
  </entry>
  
  <entry>
    <title>命令行（CLI）mrd开发记录</title>
    <link href="maode.github.io/2017/09/26/170926-CLI-mrd/"/>
    <id>maode.github.io/2017/09/26/170926-CLI-mrd/</id>
    <published>2017-09-26T14:28:32.000Z</published>
    <updated>2017-09-28T06:18:51.983Z</updated>
    
    <content type="html"><![CDATA[<p>首先确保安装配置好node.js的环境。官网：<a href="https://nodejs.org" target="_blank" rel="external">https://nodejs.org</a></p>
<h2 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h2><p>创建一个文件夹用来放mrd项目，如 D:\temp\mrd</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">D:\&gt; mkdir D:\temp\mrd</div><div class="line"></div><div class="line">D:\&gt; <span class="built_in">cd</span> temp\mrd</div></pre></td></tr></table></figure>
<p>初始化：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D:\temp\mrd&gt; npm init -y</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>执行完 init 命令会生成 package.json 包信息文件，修改文件内容如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"mrd"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"根据模板生成github博客文件"</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"bin/mrd"</span>,</div><div class="line">  <span class="attr">"bin"</span>: &#123;</div><div class="line">    <span class="attr">"mrd"</span>: <span class="string">"bin/mrd"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"author"</span>: <span class="string">"Code0"</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="attr">"repository"</span>: &#123;</div><div class="line">        <span class="attr">"type"</span>: <span class="string">"git"</span>,</div><div class="line">        <span class="attr">"url"</span>: <span class="string">"https://github.com/maode/mrd.git"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建包信息中的对应的路径和文件。创建完成后目录结构如下：</p>
<p><img src="/assets/blogImg/170926-CLI-1.png" alt=""></p>
<h2 id="mrd-js"><a href="#mrd-js" class="headerlink" title="mrd.js"></a>mrd.js</h2><p>如果依赖的模块没有安装过，要先安装依赖。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env node</span></div><div class="line"></div><div class="line"><span class="comment">//引入用到的模块</span></div><div class="line"><span class="keyword">var</span> shell = <span class="built_in">require</span>(<span class="string">"shelljs"</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> nunjucks = <span class="built_in">require</span>(<span class="string">'nunjucks'</span>);</div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">var</span> dateFormat = <span class="built_in">require</span>(<span class="string">'dateformat'</span>); </div><div class="line"><span class="comment">//定义变量</span></div><div class="line"><span class="keyword">var</span> tpl_path = <span class="string">'D:/GitHubRepo/Blog/post_tpl/A-mrd-temp.md'</span>;</div><div class="line"><span class="keyword">var</span> gen_path = <span class="string">'D:/GitHubRepo/Blog/source/_posts'</span>;</div><div class="line"><span class="keyword">var</span> fname;</div><div class="line"><span class="keyword">var</span> title=<span class="string">"temp"</span>;</div><div class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="keyword">var</span> dtime=dateFormat(now);<span class="comment">//使用挺好看的默认格式</span></div><div class="line"><span class="keyword">var</span> fnamePre=dateFormat(now,<span class="string">"yymmdd"</span>);<span class="comment">//生成文件名前缀</span></div><div class="line"><span class="keyword">var</span> tags;</div><div class="line"></div><div class="line"><span class="comment">//逻辑部分</span></div><div class="line"><span class="keyword">var</span> argv = <span class="built_in">require</span>(<span class="string">'yargs'</span>)</div><div class="line">	.option(<span class="string">'f'</span>,&#123;</div><div class="line">		alias: <span class="string">'from'</span>,</div><div class="line">		demand: <span class="literal">false</span>,</div><div class="line">		<span class="keyword">default</span>: tpl_path,</div><div class="line">		describe: <span class="string">'template path'</span>,</div><div class="line">		type: <span class="string">'string'</span></div><div class="line">	&#125;)</div><div class="line">	.option(<span class="string">'t'</span>,&#123;</div><div class="line">		alias: <span class="string">'to'</span>,</div><div class="line">		demand: <span class="literal">false</span>,</div><div class="line">		<span class="keyword">default</span>: gen_path,</div><div class="line">		describe: <span class="string">'generate path'</span>,</div><div class="line">		type: <span class="string">'string'</span></div><div class="line">	&#125;)</div><div class="line">	.usage(<span class="string">'Usage: mrd &lt;fileName&gt; [title] [tag1 tag2 ……]'</span>)</div><div class="line">	.example(<span class="string">'$ mrd test'</span>, <span class="string">'根据默认模板在默认路径下创建test.md'</span>)</div><div class="line">	.help(<span class="string">'h'</span>)</div><div class="line">	.alias(<span class="string">'h'</span>, <span class="string">'help'</span>)</div><div class="line">	.epilog(<span class="string">'copyright 2017'</span>)</div><div class="line">	.argv;</div><div class="line"></div><div class="line"><span class="comment">// fileName 如果没有任何命令和参数则打印帮助</span></div><div class="line"><span class="keyword">if</span>(argv._[<span class="number">0</span>])&#123;</div><div class="line">	fname=fnamePre+<span class="string">"-"</span>+argv._[<span class="number">0</span>];</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">	<span class="comment">//shell.exec("node mrd.js -h");//开发环境</span></div><div class="line">	shell.exec(<span class="string">"mrd -h"</span>);<span class="comment">//生产环境</span></div><div class="line">	process.exit(<span class="number">0</span>);</div><div class="line">	</div><div class="line">&#125;</div><div class="line"><span class="comment">// title</span></div><div class="line"><span class="keyword">if</span>(argv._[<span class="number">1</span>])&#123;</div><div class="line">	title = argv._[<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="comment">//tags</span></div><div class="line"><span class="keyword">if</span>(argv._[<span class="number">2</span>])&#123;</div><div class="line">	tags=argv._.slice(<span class="number">2</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//路径规范化</span></div><div class="line">argv.f=path.normalize(argv.f);</div><div class="line">argv.t=path.normalize(argv.t);</div><div class="line"><span class="comment">//判断生成文件的路径是否存在</span></div><div class="line"><span class="keyword">if</span>(!fs.existsSync(argv.t))&#123;</div><div class="line">	fs.mkdirSync(argv.t);</div><div class="line">&#125;</div><div class="line"><span class="comment">//读取模板文件</span></div><div class="line"><span class="keyword">var</span> tpl = fs.readFileSync(argv.f).toString();</div><div class="line"><span class="comment">//填充模板数据</span></div><div class="line"><span class="keyword">var</span> compiledData = nunjucks.renderString(tpl,&#123;<span class="attr">title</span>:title,<span class="attr">dtime</span>:dtime,<span class="attr">tags</span>:tags&#125;);</div><div class="line"><span class="keyword">var</span> fpath= path.join(argv.t,fname+<span class="string">'.md'</span>);<span class="comment">//合成生成文件的路径</span></div><div class="line"><span class="comment">//根据模板生成文件</span></div><div class="line">fs.writeFileSync(fpath, compiledData);</div><div class="line"><span class="comment">//用默认程序打开新生成的文件</span></div><div class="line">shell.exec(fpath);</div></pre></td></tr></table></figure></p>
<h2 id="bin-mrd"><a href="#bin-mrd" class="headerlink" title="bin/mrd"></a>bin/mrd</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env node</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'../mrd.js'</span>);</div></pre></td></tr></table></figure>
<h2 id="安装到全局环境"><a href="#安装到全局环境" class="headerlink" title="安装到全局环境"></a>安装到全局环境</h2><p>在mrd目录下执行：<code>D:\temp\mrd&gt; npm install -g .</code><br>或<br>在mrd目录外执行：<code>D:\temp&gt; npm install -g mrd</code></p>
<h2 id="从全局环境卸载"><a href="#从全局环境卸载" class="headerlink" title="从全局环境卸载"></a>从全局环境卸载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm uninstall -g mrd</div></pre></td></tr></table></figure>
<h2 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">D:\temp\mrd&gt;node mrd.js -h</div><div class="line">Usage: mrd &lt;fileName&gt; [title] [tag1 tag2 ……]</div><div class="line"></div><div class="line">Options:</div><div class="line">  -f, --from  template path</div><div class="line">                 [string] [default: <span class="string">"D:/GitHubRepo/Blog/post_tpl/A-mrd-temp.md"</span>]</div><div class="line"></div><div class="line">  -t, --to    generate path</div><div class="line">                          [string] [default: <span class="string">"D:/GitHubRepo/Blog/source/_posts"</span>]</div><div class="line"></div><div class="line">  -h, --<span class="built_in">help</span>  Show <span class="built_in">help</span>                                                [boolean]</div><div class="line"></div><div class="line"></div><div class="line">Examples:</div><div class="line">  mrd <span class="built_in">test</span>  根据默认模板在默认路径下创建test.md</div><div class="line"></div><div class="line">copyright 2017</div></pre></td></tr></table></figure>
<h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p><a href="https://maode.github.io/2017/09/26/170926-nodejs-debug/">https://maode.github.io/2017/09/26/170926-nodejs-debug/</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.ruanyifeng.com/blog/2015/05/command-line-with-node.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/05/command-line-with-node.html</a></p>
<p><a href="http://seejs.me/2016/08/02/commandline/" target="_blank" rel="external">http://seejs.me/2016/08/02/commandline/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先确保安装配置好node.js的环境。官网：&lt;a href=&quot;https://nodejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://nodejs.org&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;开发过程&quot;&gt;&lt;a href=&quot;#开发过程&quot; class=&quot;headerlink&quot; title=&quot;开发过程&quot;&gt;&lt;/a&gt;开发过程&lt;/h2&gt;&lt;p&gt;创建一个文件夹用来放mrd项目，如 D:\temp\mrd&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;D:\&amp;gt; mkdir D:\temp\mrd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;D:\&amp;gt; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; temp\mrd&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;初始化：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;D:\temp\mrd&amp;gt; npm init -y&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CLI" scheme="maode.github.io/tags/CLI/"/>
    
  </entry>
  
  <entry>
    <title>IDEA配置优化</title>
    <link href="maode.github.io/2017/09/22/170922-IDEA-settings/"/>
    <id>maode.github.io/2017/09/22/170922-IDEA-settings/</id>
    <published>2017-09-22T14:55:24.000Z</published>
    <updated>2018-03-10T04:30:18.139Z</updated>
    
    <content type="html"><![CDATA[<h3 id="优化JVM参数"><a href="#优化JVM参数" class="headerlink" title="优化JVM参数"></a>优化JVM参数</h3><p><strong>用户级别修改：</strong><br>打开IDEA，选择Help–&gt;Edit Custom VM Options… 将以下参数内容内容复制过来。<br>（会在操作系统的当前用户目录下生成一份配置文件，如：<code>C:\Users\code0\.IntelliJIdea\config\idea64.exe.vmoptions</code>）</p>
<p><strong>系统级别修改：</strong><br>直接修改 IntelliJ IDEA 安装目录下的/bin/idea64.exe.vmoptions【记得备份】文件，如果是32位系统，修改idea.exe.vmoptions文件中的参数。<br>（直接覆写系统默认设置对当前操作系统所有用户都有效）</p>
<p><strong>具体参数如下：</strong></p>
<p>-Xms512m<br>-Xmx750m<br>-Xmn264m<br>-XX:MaxPermSize=350m<br>-XX:PermSize=128m<br>-XX:ReservedCodeCacheSize=240m<br>-Xverify:none<br>-Xnoclassgc<br>-XX:+UseParNewGC<br>-XX:+UseConcMarkSweepGC<br>-XX:SoftRefLRUPolicyMSPerMB=50<br>-ea<br>-server<br>-Dsun.io.useCanonCaches=false<br>-Dsun.awt.keepWorkingSetOnMinimize=true<br>-Djava.net.preferIPv4Stack=true<br>-XX:+HeapDumpOnOutOfMemoryError<br>-XX:-OmitStackTraceInFastThrow</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">　　注：-Xms512m 设置初时的内存大小，提高Java程序的启动速度</div><div class="line"></div><div class="line">　　　　-Xmx750m 设置最大内存数，提高该值，可以减少内存Garage收集的频率，提高程序性能。</div><div class="line"></div><div class="line">　　　　-Xverify：none 关闭Java字节码验证，从而加快了类装入的速度，并使得在仅为验证目的</div><div class="line">而启动的过程中无需装入类，缩短了启动时间</div><div class="line"></div><div class="line">　　　　-XX:+UseParNewGC 使用并行收集算法</div><div class="line"></div><div class="line">　　　　-server 控制内存garage方式，这样你无需在花一到两分钟等待内存garage的收集</div><div class="line"></div><div class="line">　　　　-Dsun.awt.keepWorkingSetOnMinimize=true 可以让IDEA最小化到任务栏时依然保持以占有的内存，</div><div class="line">      当你重新回到IDEA，能够被快速显示，而不是由灰白的</div><div class="line">      界面逐渐显现整个界面，加快回复到原界面的速度。</div></pre></td></tr></table></figure>
<h3 id="基本常用设置"><a href="#基本常用设置" class="headerlink" title="基本常用设置"></a>基本常用设置</h3><a id="more"></a>
<p><strong>设置外观字体：</strong> File -&gt; Settings -&gt; Appearance &amp; Behavior -&gt; Appearance -&gt; </p>
<ul>
<li>勾选 Override default fonts by (not Recommended)</li>
<li>设置 Name：微软雅黑、Size：12、Presentation Mode：24</li>
<li>去掉 Animate windows，勾选 Show tool window bars</li>
</ul>
<p><strong>启动时不打开工程：</strong> File -&gt; Settings -&gt; Appearance &amp; Behavior -&gt; System Settings -&gt; Startup/Shutdown 标签项 -&gt; </p>
<ul>
<li>去掉 Reopen last project on startup</li>
</ul>
<p><strong>关闭确认退出选项：</strong> File -&gt; Settings -&gt; Appearance &amp; Behavior -&gt; System Settings -&gt; Startup/Shutdown 标签项 -&gt; </p>
<ul>
<li>去掉 Confirm application exit</li>
</ul>
<p><strong>在同一窗口打开工程：</strong> File -&gt; Settings -&gt; Appearance &amp; Behavior -&gt; System Settings -&gt; Project Opening 标签项 -&gt; </p>
<ul>
<li>勾选 Open project in ths same window</li>
</ul>
<p><strong>设置自动保存：</strong> File -&gt; Settings -&gt; Appearance &amp; Behavior -&gt; System Settings -&gt; Synchronization 标签项 -&gt;</p>
<ul>
<li>全部勾选包括 Save files automatically..  然后设置30 sec.</li>
</ul>
<p><strong>关闭自动检测新版本更新：</strong> File -&gt; Settings -&gt; Appearance &amp; Behavior -&gt; System Settings -&gt; Updates -&gt; </p>
<ul>
<li>去掉 Automatically check updates for…</li>
</ul>
<p><strong>关闭IDEA的使用习惯统计：</strong> File -&gt; Settings -&gt; Appearance &amp; Behavior -&gt; System Settings -&gt; Usage Statistics -&gt; </p>
<ul>
<li>去掉 Allow sending…</li>
</ul>
<p><strong>通过 Ctrl + 鼠标调整字体：</strong> File -&gt; Settings -&gt; Editor -&gt; General -&gt; Mouse 标签项 -&gt; </p>
<ul>
<li>勾选 Change font size (Zoom) with Ctrl + Mouse Wheel</li>
</ul>
<p><strong>让光标不随意定位：</strong> File -&gt; Settings -&gt; Editor -&gt; General -&gt; Virtual Space 标签项 -&gt; </p>
<ul>
<li>去掉 Allow placement of caret after end of line</li>
</ul>
<p><strong>显示虚拟空间：</strong> File -&gt; Settings -&gt; Editor -&gt; General -&gt; Virtual Space 标签项 -&gt; </p>
<ul>
<li>勾选 Show virtual space at file bottom</li>
</ul>
<p><strong>去除每行多余空格：</strong> File -&gt; Settings -&gt; Editor -&gt; General -&gt; Other 标签项 -&gt; </p>
<ul>
<li>设置 Srip trailing spaces on Save，下拉选择 All</li>
</ul>
<p><strong>去除光滑滚动：</strong> File -&gt; Settings -&gt; Editor -&gt; General -&gt; Scrolling 标签项 -&gt; </p>
<ul>
<li>去掉 Smooth scrolling</li>
</ul>
<p><strong>自动 import 包：</strong> File -&gt; Settings -&gt; Editor -&gt; General -&gt; Auto Import -&gt; </p>
<ul>
<li>勾选 Optimize imports on the fly、Add unambiguous imports on the fly</li>
</ul>
<p><strong>显示行号：</strong> File -&gt; Settings -&gt; Editor -&gt; General -&gt; Appearance -&gt; </p>
<ul>
<li>勾选 Show line numbers</li>
</ul>
<p><strong>显示空白符：</strong> File -&gt; Settings -&gt; Editor -&gt; General -&gt; Appearance -&gt; </p>
<ul>
<li>勾选 Show whitespaces</li>
</ul>
<p><strong>代码自动补齐(针对小写)：</strong> File -&gt; Settings -&gt; Editor -&gt; General -&gt; Code Completion -&gt; Code Completion 标签项 -&gt; </p>
<ul>
<li>设置 Case sensitive completion：none</li>
<li>勾选 Autopopup documentation in (ms) ： 200</li>
<li>勾选 Parameter in (ms) ：200</li>
</ul>
<p><strong>代码折叠：</strong> File -&gt; Settings -&gt; Editor -&gt; General -&gt; Code Folding -&gt; </p>
<ul>
<li>去掉 One-line methods</li>
</ul>
<p><strong>用*标识编辑过的文件：</strong> File -&gt; Settings -&gt; Editor -&gt; General -&gt; Editor Tabs -&gt; Tab Appearance 标签项 -&gt; </p>
<ul>
<li>勾选 Mark modified tabs with asterisk</li>
</ul>
<p><strong>限制 Tab 标签页数量：</strong> File -&gt; Settings -&gt; Editor -&gt; General -&gt; Editor Tabs -&gt; Tab Closing Policy 标签项 -&gt; </p>
<ul>
<li>设置 Tab limit ：20</li>
</ul>
<p><strong>输入“右}”时，不要格式化代码块：</strong> File -&gt; Settings -&gt; Editor -&gt; General -&gt; Smart Keys -&gt; </p>
<ul>
<li>去掉 Reformat block on typing ‘}’</li>
<li>设置 Reformat on paste ：None</li>
</ul>
<p><strong>代码字体风格：</strong> File -&gt; Settings -&gt; Editor -&gt; Colors &amp; Fonts -&gt; Font -&gt; </p>
<ul>
<li>选择 Darcula 设计，点击 Save As备份一套然后编辑</li>
<li>修改 Primary font 的字体，勾选 Show only monospaced fonts，只显示等宽字体</li>
</ul>
<p><strong>设置光标所在行的背景：</strong> File -&gt; Settings -&gt; Editor -&gt; Colors Scheme -&gt; General -&gt; </p>
<ul>
<li>在右侧的下拉框中选择 Editor -&gt; Caret row -&gt; 然后修改Background选项</li>
</ul>
<p><strong>取消代码拼写检查：</strong> File -&gt; Settings -&gt; Editor -&gt; Inspections -&gt; </p>
<ul>
<li>在右侧的下拉框中选择 Spelling -&gt; Typo -&gt; 然后去掉右侧 Process code、Process literals、Process comments</li>
</ul>
<p><strong>统一编码格式：</strong> File -&gt; Settings -&gt; Editor -&gt; File Encodings -&gt; </p>
<ul>
<li>设置 Global Encoding、Project Encoding、Defalut encoding for properties files</li>
<li>勾选 Transparent native -to-ascii conversion（properties文件自动转换ASCII编码）</li>
</ul>
<p><strong>忽略的文件类型及目录：</strong> File -&gt; Settings -&gt; Editor -&gt; File Types -&gt; </p>
<ul>
<li>在右侧底部的Ignore files and folders 文本框中添加<br><code>*.iml;*.idea;*.classpath;*.project;*.settings;target;</code><br>（可以不设置该选项，下载<code>.ignore</code>插件来管理所有忽略文件）</li>
</ul>
<p><strong>禁用插件：</strong> File -&gt; Settings -&gt; Plugins -&gt; </p>
<ul>
<li>反选自己想要禁用的插件 如：ASP、Cloud Foundry integration、CloudBees integration 等等</li>
</ul>
<p><strong>备份个性化设置：</strong> File -&gt; Export Settings</p>
<hr>
<p><strong>参考：</strong>  <a href="http://www.cnblogs.com/playcode/p/5588707.html" target="_blank" rel="external">Intellij IDEA配置优化</a></p>
<p>暂时就这些，后面没有了！(=^ ^=)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;优化JVM参数&quot;&gt;&lt;a href=&quot;#优化JVM参数&quot; class=&quot;headerlink&quot; title=&quot;优化JVM参数&quot;&gt;&lt;/a&gt;优化JVM参数&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;用户级别修改：&lt;/strong&gt;&lt;br&gt;打开IDEA，选择Help–&amp;gt;Edit Custom VM Options… 将以下参数内容内容复制过来。&lt;br&gt;（会在操作系统的当前用户目录下生成一份配置文件，如：&lt;code&gt;C:\Users\code0\.IntelliJIdea\config\idea64.exe.vmoptions&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;系统级别修改：&lt;/strong&gt;&lt;br&gt;直接修改 IntelliJ IDEA 安装目录下的/bin/idea64.exe.vmoptions【记得备份】文件，如果是32位系统，修改idea.exe.vmoptions文件中的参数。&lt;br&gt;（直接覆写系统默认设置对当前操作系统所有用户都有效）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;具体参数如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;-Xms512m&lt;br&gt;-Xmx750m&lt;br&gt;-Xmn264m&lt;br&gt;-XX:MaxPermSize=350m&lt;br&gt;-XX:PermSize=128m&lt;br&gt;-XX:ReservedCodeCacheSize=240m&lt;br&gt;-Xverify:none&lt;br&gt;-Xnoclassgc&lt;br&gt;-XX:+UseParNewGC&lt;br&gt;-XX:+UseConcMarkSweepGC&lt;br&gt;-XX:SoftRefLRUPolicyMSPerMB=50&lt;br&gt;-ea&lt;br&gt;-server&lt;br&gt;-Dsun.io.useCanonCaches=false&lt;br&gt;-Dsun.awt.keepWorkingSetOnMinimize=true&lt;br&gt;-Djava.net.preferIPv4Stack=true&lt;br&gt;-XX:+HeapDumpOnOutOfMemoryError&lt;br&gt;-XX:-OmitStackTraceInFastThrow&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;　　注：-Xms512m 设置初时的内存大小，提高Java程序的启动速度&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　　　　-Xmx750m 设置最大内存数，提高该值，可以减少内存Garage收集的频率，提高程序性能。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　　　　-Xverify：none 关闭Java字节码验证，从而加快了类装入的速度，并使得在仅为验证目的&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;而启动的过程中无需装入类，缩短了启动时间&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　　　　-XX:+UseParNewGC 使用并行收集算法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　　　　-server 控制内存garage方式，这样你无需在花一到两分钟等待内存garage的收集&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　　　　-Dsun.awt.keepWorkingSetOnMinimize=true 可以让IDEA最小化到任务栏时依然保持以占有的内存，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      当你重新回到IDEA，能够被快速显示，而不是由灰白的&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      界面逐渐显现整个界面，加快回复到原界面的速度。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;基本常用设置&quot;&gt;&lt;a href=&quot;#基本常用设置&quot; class=&quot;headerlink&quot; title=&quot;基本常用设置&quot;&gt;&lt;/a&gt;基本常用设置&lt;/h3&gt;
    
    </summary>
    
    
      <category term="IDEA" scheme="maode.github.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Java 堆、栈、方法区、几种常量池，String</title>
    <link href="maode.github.io/2017/09/19/170919-heap-stack-string/"/>
    <id>maode.github.io/2017/09/19/170919-heap-stack-string/</id>
    <published>2017-09-19T07:32:41.000Z</published>
    <updated>2017-09-28T13:58:01.138Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在JAVA中，数据的交互存在于以下地方：</strong></p>
<p><strong>寄存器（register）：</strong> 位于CPU。<br><strong>栈（stack）：</strong> 位于RAM。<br><strong>堆（heap）：</strong> 位于RAM。<br><strong>方法区（PermGen）：</strong> 位于RAM。<br><strong>非RAM存储：</strong> 如硬盘等其它存储空间。</p>
<p><strong>就速度来说，从快到慢依次为： 寄存器 &gt; 栈 &gt; 堆 &gt; 方法区 &gt; 非RAM存储。</strong></p>
<p><strong>JAVA的JVM的内存可分为3个区：<code>栈(stack)</code>、<code>堆(heap)</code>和<code>方法区(PermGen)</code>也叫永久代。</strong></p>
<a id="more"></a>
<h2 id="寄存器（register）"><a href="#寄存器（register）" class="headerlink" title="寄存器（register）"></a><strong>寄存器（register）</strong></h2><p> 这是最快的存储区，因为它位于不同于其他存储区的地方——处理器内部。但是寄存器的数量极其有限，所以寄存器由编译器根据需求进行分配。你不能直接控制，也不能在程序中感觉到寄存器存在的任何迹象。    </p>
<ul>
<li>最快的存储区, 由编译器根据需求进行分配,我们在程序中无法控制.</li>
</ul>
<h2 id="栈（stack）"><a href="#栈（stack）" class="headerlink" title="栈（stack）"></a><strong>栈（stack）</strong></h2><p>位于通用RAM中，通过它的“栈指针”可以从处理器那里获得支持。栈指针若向下移动，则分配新的内存；若向上移动，则释放那些内存。这是一种快速有效的分配存储方法，仅次于寄存器。程序编译时，JAVA编译器必须知道存储在栈内所有数据的确切大小和生命周期，因为它必须生成相应的代码，以便上下移动栈指针。这一约束限制了程序的灵活性。    </p>
<ul>
<li><p><strong>每个线程包含一个栈区</strong>，栈中只存放<strong>局部变量</strong> <a id="i1" href="#1">^1</a> （包含基本类型和引用类型）。因为基本类型变量的变量值存的是字面<a href="https://zh.wikipedia.org/wiki/%E5%80%BC_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8)" target="_blank" rel="external">值</a>，是 基本类型【原始类型|值类型】,所以大小可知。如<code>int a = 3;</code>  这里的a是一个int类型<a id="i2" href="#2">^2</a>的变量，指向<code>3</code>这个值。这些字面值的数据，由于大小可知，生存期可知【这些字面值固定定义在某个程序块里面，程序块退出后，字面值生存期就结束了】，出于追求速度的原因，就存在于栈中了，而对象由于大小不可知，所以栈中只存放了对象的引用。</p>
</li>
<li><p>每个栈中的数据都是私有的，其他栈不能访问。</p>
</li>
<li><p>栈中的<strong>基本类型</strong>变量值在该栈中是可以被共享的（共享性质有点<code>类似</code>字符串常量池，相同的值只会被创建一次）。如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a=<span class="number">3</span>;</div><div class="line"><span class="keyword">int</span> b=<span class="number">3</span>;</div></pre></td></tr></table></figure>
<p>编译器先处理<code>int a = 3；</code>首先它会在栈中创建一个 <a href="https://zh.wikipedia.org/wiki/%E5%8F%98%E9%87%8F_(%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1)#.E5.9C.A8.E6.BA.90.E4.BB.A3.E7.A0.81.E4.B8.AD" target="_blank" rel="external">变量</a> a，然后查找栈中是否有3这个值，如果没找到，就在栈中开辟一块空间将3这个值存放进来，然后将a指向3的地址。接着处理<code>int b = 3；</code>在创建完b的变量后，因为在栈中已经有3这个值，便将b直接指向3的地址。这样，就出现了a与b同时均指向3的情况。 特别注意的是，这种基本类型的变量与引用类型的变量不同。假定两个引用类型的变量同时指向一个对象，如果一个变量修改了这个对象的内部状态，那么另一个变量也即刻反映出这个变化。相反，如果是两个基本类型的变量，修改其中一个的值，不会导致另一个指向此字面值的变量也跟着改变的情况。如上例，我们定义完 a 与 b 的值后，再令a=4；那么，b不会等于4，还是等于3。在编译器内部，遇到a=4；时，它就会重新搜索栈中是否有4的字面值，如果没有，重新开辟地址存放4的值；如果已经有了，则直接将a指向这个地址。因此a值的改变不会影响到b的值。</p>
</li>
</ul>
<h2 id="堆（heap）"><a href="#堆（heap）" class="headerlink" title="堆（heap）"></a><strong>堆（heap）</strong></h2><p>一种通用性的内存池（也存在于RAM中），用于存放所有的JAVA对象，无论是成员变量，局部变量，还是类变量，它们指向的对象都存储在堆中。堆不同于栈的好处是：编译器不需要知道要从堆里分配多少存储区域，也不必知道存储的数据在堆里存活多长时间。因此，在堆里分配存储有很大的灵活性。当没有引用指向堆中的对象时，垃圾回收机制会在恰当的时候将其回收掉。当然，为这种灵活性必须要付出相应的代价。用堆进行存储分配比用栈进行存储需要更多的时间。  </p>
<ul>
<li><strong>jvm只有一个堆区(heap)，该区域被所有线程共享。</strong> 存储的全部是对象实例。堆中不存放<code>基本类型</code>和<code>对象的引用</code>，只存放对象本身，[<strong>几乎</strong>]所有的 <code>对象实例</code> 和 <code>数组</code> 都在堆中分配。</li>
</ul>
<h2 id="方法区（PermGen）"><a href="#方法区（PermGen）" class="headerlink" title="方法区（PermGen）"></a><strong>方法区（PermGen）</strong></h2><p>又叫永久代，跟堆一样，<strong>被所有的线程共享</strong>。它用于存储已经被虚拟机加载的<code>类信息</code>、<code>常量</code>、<code>静态变量</code>、<code>即时编译器编译后的代码</code>等数据。</p>
<ul>
<li><p>JDK7之前 <code>运行时常量池</code> <code>字符串常量池</code> 还有很多<a href="#关于java的元数据">元数据</a>都在方法区。</p>
</li>
<li><p>JDK7开始执行 PermGen移除（去永久代）计划，JDK8彻底移除PermGen。</p>
</li>
<li><p>JDK8彻底移除PermGen后，原本方法区中的这些对象被挪到GC堆外的一块叫做Metaspace的空间里做特殊管理，仍然间接的受GC管理。</p>
</li>
</ul>
<h2 id="非RAM存储"><a href="#非RAM存储" class="headerlink" title="非RAM存储"></a><strong>非RAM存储</strong></h2><p>硬盘等永久存储空间。若数据完全独立于一个程序之外，则程序不运行时仍可存在，并在程序的控制范围之外。其中两个最主要的例子便是“流式对象”和“固定对象”。对于流式对象，对象会变成字节流，通常会发给另一台机器，而对于固定对象，对象保存在磁盘中。即使程序中止运行，它们仍可保持自己的状态不变。对于这些类型的数据存储，一个特别有用的技艺就是它们能存在于其他媒体中，一旦需要，甚至能将它们恢复成普通的、基于RAM的对象。</p>
<h1 id="几种常量池介绍"><a href="#几种常量池介绍" class="headerlink" title="几种常量池介绍"></a>几种常量池介绍</h1><h2 id="Class文件常量池"><a href="#Class文件常量池" class="headerlink" title="Class文件常量池"></a><strong>Class文件常量池</strong></h2><p>存在于java文件编译完成后的Class文件中, Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池(Constant Pool Table)，存放编译期生成的各种<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E9%9D%A2%E5%B8%B8%E9%87%8F_(C%E8%AF%AD%E8%A8%80)" target="_blank" rel="external">字面量</a>和符号引用，这部分内容将在类加载后进入方法区的运行时常量池。</p>
<p>这里面主要存放两大类常量：</p>
<ul>
<li><p><a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E9%9D%A2%E5%B8%B8%E9%87%8F_(C%E8%AF%AD%E8%A8%80)" target="_blank" rel="external">字面量</a>(Literal)：用双引号引起来的字符串 等。</p>
</li>
<li><p>符号引用(Symbolic References)：属于编译原理方面的概念，包含三类常量：</p>
<ul>
<li><p>类和接口的全限定名(Full Qualified Name)</p>
</li>
<li><p>字段的名称和描述符(Descriptor)</p>
</li>
<li><p>方法的名称和描述符</p>
</li>
</ul>
</li>
</ul>
<p>这些可以用<a href="https://maode.github.io/2017/09/18/170918-javap/">javap</a>命令进行查看。</p>
<h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a><strong>运行时常量池</strong></h2><p>方法区的一部分。类加载后由 Class文件 衍生的产物，Class文件常量池中的数据 在类加载后进入运行时常量池。</p>
<p><a href="http://wiki.jikexueyuan.com/project/java-vm/class-loading-mechanism.html" target="_blank" rel="external">类在加载时</a>的 解析（resolve）阶段 虚拟机会将 Class文件常量池 内的数据加载到 运行时常量池 中（符号引用会替换为直接引用）。但String类型的字面量有点特殊，Class文件常量池中 String字面量牵扯到两个常量池项的类型 <code>CONSTANT_Utf8</code> 和 <code>CONSTANT_String</code>  后者是String常量的类型，但它并不直接持有String常量的内容，而是只持有一个index，这个index所指定的另一个常量池项必须是一个CONSTANT_Utf8类型的常量，而CONSTANT_Utf8才真正指向持有字符串内容的对象。<br>CONSTANT_Utf8会在类加载的过程中就全部创建出来，而CONSTANT_String则是lazy resolve的，它会在<strong>第一次引用该项的【地方】ldc指令被第一次执行到的时候</strong>才会resolve。在尚未resolve的时候，HotSpot VM<a id="i3" href="#3">^3</a>把它的类型叫做JVM_CONSTANT_UnresolvedString，内容跟Class文件里一样只是一个index；等到resolve过后这个项的常量类型就会变成最终的JVM_CONSTANT_String，而内容则变成实际的那个字符串对象引用。<br><strong>总结：</strong><br>CONSTANT_Utf8 会在类加载时 resolve 阶段进入运行时常量池。<br>CONSTANT_String 是lazy resolve 的，此时不会进入运行时常量池。</p>
<p>最直接的<strong>体现</strong>或者可以说：该字符串字面量对象的引用 进入了运行时常量池，但 该字符串字面量对象的引用 未进入字符串常量池。</p>
<p><strong>关于<code>CONSTANT_Utf8</code> 和 <code>CONSTANT_String</code> ：</strong><br>CONSTANT_Utf8：</p>
<ul>
<li><p>CONSTANT_Utf8 -&gt; Symbol* -&gt; Symbol      </p>
<p>  CONSTANT_Utf8指向一个Symbol对象的指针，然后该指针指向一个Symbol对象 。<br>  Symbol*： 指向Symbol对象的指针。<br>  Symbol：一个固定长度的头部和一个可变长度、装有实际字符内容的尾部。<a id="i4" href="#4">^4</a></p>
</li>
</ul>
<p>CONSTANT_String：</p>
<ul>
<li>CONSTANT_String 在尚未resolve的时候，HotSpot VM把它的类型叫做JVM_CONSTANT_UnresolvedString。</li>
<li>未 resolve 时的它只是持有一个指向 CONSTANT_Utf8 的指针【index】，而当 resolve 过后，则指向一个实际的Java对象的引用。</li>
<li>一个 CONSTANT_String项  在第一次被执行ldc指令时会被 resolve， 此时会去到字符串常量池查找，字符串常量池支持以Symbol为key来查询是否已经有<strong>内容匹配</strong>的项存在与否，存在则直接返回匹配项的引用，不存在则创建出内容匹配的<strong>java.lang.String对象</strong>。没错，是创建和Symbol对象的内容相匹配的<strong>java.lang.String对象</strong>，然后返回该对象的引用，并将该引用驻留在 字符串常量池。</li>
</ul>
<h2 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a><strong>字符串常量池</strong></h2><p>HotSpot VM里，记录interned string的一个全局表叫做StringTable，即：【[全局]字符串常量池】，它本质上就是个HashSet<string>，是HotSpot VM里用来实现字符串驻留功能的全局数据结构。这是个纯运行时的结构，而且是惰性（lazy）维护的。注意它只存储对java.lang.String实例的引用，而不存储String对象的内容。 注意，它只存了引用，根据这个引用可以得到具体的String对象。在驻留的过程中，StringTable::lookup() 函数是必经之路，是用来探测（probe）看某个字符串是否已经驻留在StringTable里了。</string></p>
<p>一般我们说一个字符串<strong>进入了全局的字符串常量池</strong>其实是说<strong>在这个StringTable中保存了对它的引用</strong>，反之，如果说没有在其中就是说StringTable中没有对它的引用。</p>
<p>JVM层面触发的字符串驻留（例如把Class文件里的CONSTANT_String类型常量转换为运行时对象，即：执行ldc指令的时候），以及Java代码主动触发的字符串驻留（java.lang.String.intern()），两种请求都由StringTable来处理，<strong>就是说触发字符串进入字符串常量池有两种情况</strong>。</p>
<ol>
<li>JVM层面触发：<br>一个字符串字面量在第一次引用它的地方,ldc指令被第一次执行到的时候。</li>
<li>java代码主动触发：<br>一个String对象首次执行intern()方法，且当前字符串常量池没有与该对象<strong>内容相同</strong>的对象的引用驻留时。</li>
</ol>
<p>以上两种情况都会在堆中创建String对象，并将引用驻留StringTable。</p>
<h2 id="关于-String"><a href="#关于-String" class="headerlink" title="关于 String"></a><strong>关于 String</strong></h2><p><strong>new：</strong><br>当我们使用了new来构造字符串对象的时候，不管字符串常量池中有没有相同内容的对象的引用，新的字符串对象都会在堆中被创建。</p>
<p><strong>intern：</strong><br>对象调用intern方法后，首先检查字符串常量池中是否有和该对象的<strong>内容相同</strong>的对象的引用，如果存在，则将这个引用返回，否则将该对象的引用加入并返回。</p>
<p><strong>摘抄的例子：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewTest1</span></span>&#123; </div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String ss1=<span class="string">"static"</span>; <span class="comment">// 第一句 </span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">		String s1=<span class="keyword">new</span> String(<span class="string">"he"</span>)+<span class="keyword">new</span> String(<span class="string">"llo"</span>); <span class="comment">//第二句 </span></div><div class="line">		s1.intern(); <span class="comment">// 第三句 </span></div><div class="line">		String s2=<span class="string">"hello"</span>; <span class="comment">//第四句 </span></div><div class="line">		System.out.println(s1==s2);<span class="comment">//第五句，输出是true。 </span></div><div class="line">	&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>“static” “he” “llo” “hello”都会进入Class的常量池， 按照上面说的，类加载阶段由于resolve 阶段是lazy的，所以是不会创建实例，更不会驻留字符串常量池了。但是要注意这个“static”和其他三个不一样，它是静态的，在类加载阶段中的初始化阶段，会为静态变量指定初始值，也就是要把“static”赋值给ss1，这个赋值操作要怎么搞啊，先ldc指令把它放到栈顶，然后用putstatic指令完成赋值。注意，ldc指令，根据上面说的，会创建”static”字符串对象，并且会保存一个指向它的引用到字符串常量池。OK！ 这是第一句。</p>
<p>运行main方法后，首先是第二句，一样的，要先用ldc把”he”和”llo”送到栈顶，换句话说，会创建他俩的对象，并且会保存引用到字符串常量池中；然后有个 “＋” 号对吧，内部是创建了一个StringBuilder对象，一路append，最后调用StringBuilder对象的toString方法得到一个String对象（内容是hello，注意这个toString方法会new一个String对象），并把它赋值给s1。注意啊，没有把hello的引用放入字符串常量池。</p>
<p>然后是第三句，intern方法一看，字符串常量池里面没有，它会把上面的这个hello对象的引用保存到字符串常量池，然后返回这个引用，但是这个返回值我们并没有使用变量去接收，所以没用。</p>
<p>第四句，字符串常量池里面已经有了，直接用嘛</p>
<p>第五句，已经很明显了。</p>
<p>再看另外一段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewTest2</span></span>&#123; </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">		String s1=<span class="keyword">new</span> String(<span class="string">"he"</span>)+<span class="keyword">new</span> String(<span class="string">"llo"</span>); <span class="comment">// 第一句</span></div><div class="line">		String s2=<span class="keyword">new</span> String(<span class="string">"h"</span>)+<span class="keyword">new</span> String(<span class="string">"ello"</span>); <span class="comment">// 第二句</span></div><div class="line">		String s3=s1.intern(); <span class="comment">// 第三句 </span></div><div class="line">		String s4=s2.intern(); <span class="comment">// 第四句</span></div><div class="line">		System.out.println(s1==s3); </div><div class="line">		System.out.println(s1==s4); </div><div class="line">	&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>类加载阶段，什么都没干。</p>
<p>然后运行main方法，先看第一句，会创建”he”和”llo”对象，并放入字符串常量池，然后会创建一个”hello”对象，没有放入字符串常量池，s1指向这个”hello”对象。</p>
<p>第二句，创建”h”和”ello”对象，并放入字符串常量池，然后会创建一个”hello”对象，没有放入字符串常量池，s2指向这个”hello”对象。</p>
<p>第三句，字符串常量池里面还没有，于是会把s1指向的String对象的引用放入字符串常量池（换句话说，放入池中的引用和s1指向了同一个对象），然后会把这个引用返回给了s3，所以s3==s1是true。</p>
<p>第四句，字符串常量池里面已经有了，直接将它返回给了s4，所以s4==s1是true。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><p>部分资料有疏漏和一些笼统[错误]的观点，参考时需与其他资料互相印证。<br>★标记的资料是我认为没有错误的资料，是我的最终参考，准确度、含金量 最高。<br><a href="https://www.zhihu.com/question/55994121" target="_blank" rel="external">https://www.zhihu.com/question/55994121</a>    ★<br><a href="https://www.zhihu.com/question/29833675" target="_blank" rel="external">https://www.zhihu.com/question/29833675</a>    ★<br><a href="http://rednaxelafx.iteye.com/blog/1847971#comments" target="_blank" rel="external">http://rednaxelafx.iteye.com/blog/1847971#comments</a>    ★<br><a href="http://rednaxelafx.iteye.com/blog/774673#comments" target="_blank" rel="external">http://rednaxelafx.iteye.com/blog/774673#comments</a>    ★<br><a href="http://droidyue.com/blog/2014/12/21/string-literal-pool-in-java/index.html" target="_blank" rel="external">http://droidyue.com/blog/2014/12/21/string-literal-pool-in-java/index.html</a>    ☆<br><a href="http://www.cnblogs.com/xiohao/p/4296088.html" target="_blank" rel="external">http://www.cnblogs.com/xiohao/p/4296088.html</a><br><a href="http://www.fhadmin.org/Blog/article/10000002.html" target="_blank" rel="external">http://www.fhadmin.org/Blog/article/10000002.html</a></p>
<h2 id="附录："><a href="#附录：" class="headerlink" title="附录："></a><strong>附录：</strong></h2><h3 id="关于java的元数据"><a href="#关于java的元数据" class="headerlink" title="关于java的元数据"></a>关于java的元数据</h3><p>HotSpot VM 里有一套对象专门用来存放元数据，它们包括： </p>
<ul>
<li>Klass系对象。元数据的最主要入口。用于描述类型的总体信息</li>
<li>ConstantPool/ConstantPoolCache对象。每个InstanceKlass关联着一个ConstantPool，作为该类型的运行时常量池。这个常量池的结构跟Class文件里的常量池基本上是对应的。可以参考<a href="http://hllvm.group.iteye.com/group/topic/26412#post-187861" target="_blank" rel="external">R大以前的一个回帖</a>。ConstantPoolCache主要用于存储某些字节码指令所需的解析（resolve）好的常量项，例如给[get|put]static、[get|put]field、invoke[static|special|virtual|interface|dynamic]等指令对应的常量池项用。</li>
<li>Method对象，用来描述Java方法的总体信息，像是方法入口地址、调用/循环计数器等等</li>
<li>ConstMethod对象，记录着Java方法的不变的描述信息，包括方法名、方法的访问修饰符、<strong>字节码</strong>、行号表、局部变量表等等。注意了，字节码就嵌在这ConstMethod对象里面。</li>
<li>Symbol对象，对应Class文件常量池里的JVM_CONSTANT_Utf8类型的常量。有一个VM全局的SymbolTable管理着所有Symbol。Symbol由所有Java类所共享。</li>
<li>MethodData对象，记录着Java方法执行时的profile信息，例如某方法里的某个字节码之类是否从来没遇到过null，某个条件跳转是否总是走同一个分支，等等。这些信息在解释器（多层编译模式下也在低层的编译生成的代码里）收集，然后供给HotSpot Server Compiler用于做激进优化。</li>
</ul>
<p>在PermGen移除前，上述元数据对象都在PermGen里，直接被GC管理着。<br>JDK8彻底移除PermGen后，这些对象被挪到GC堆外的一块叫做Metaspace的空间里做特殊管理，仍然间接的受GC管理。</p>
<hr>
<p><a id="1"><br>①</a> 变量是变量，变量名是变量名，变量值是变量值，对象是对象，对象的引用是对象的引用。<br>变量 由: <strong>“一个包含部分已知或未知数值或资讯（即一个<a href="https://zh.wikipedia.org/wiki/%E5%80%BC_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8)" target="_blank" rel="external">值</a>）之<a href="https://zh.wikipedia.org/wiki/%E8%A8%98%E6%86%B6%E9%AB%94%E4%BD%8D%E5%9D%80" target="_blank" rel="external">储存位址</a>”</strong> —— 变量值，以及 <strong>“相对应之<a href="https://zh.wikipedia.org/wiki/%E7%AC%A6%E8%99%9F" target="_blank" rel="external">符号名称</a>（<a href="https://zh.wikipedia.org/wiki/%E6%A8%99%E8%AD%98%E7%AC%A6" target="_blank" rel="external">识别字</a>）”</strong> —— 变量名，组成。<br>如：<br><code>int a = 1;</code>    a变量 的变量名为符号 ‘a’ ，变量值为<a href="https://zh.wikipedia.org/wiki/%E5%80%BC_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8)" target="_blank" rel="external">值</a> ‘3’。<br><code>Test t = new Test();</code> t变量 的变量名为符号 ‘t’ ，变量值为一个Test对象在内存中的存储位置（即对象的引用）。<br><a href="#i1"> ↩ </a></p>
<p><a id="2"><br>②</a> int有class但不是类,其它基本类型也是如此，int.class对应的Class对象是JVM合成出来的，并不是从Class文件加载出来的，在JVM初始化的时候就会把原始类型和void对应的Class对象创建出来。这些Class对象的创建不依赖任何外部信息，(例如说需要从Class文件加载的信息)，不需要经历类加载过程，而纯粹是JVM的实现细节。<br><a href="#i2"> ↩ </a></p>
<p><a id="3"><br>③</a> JVM的一种实现，早期由Sun维护目前由Oracle，JVM有不止一种实现。<a href="https://zh.wikipedia.org/wiki/HotSpot" target="_blank" rel="external">HotSpot VM</a><br><a href="#i3"> ↩ </a></p>
<p><a id="4"><br>④</a> JDK6及之前的HotSpot VM使用symbolOop来实现CONSTANT_Utf8的内容，symbolOop存放在PermGen里；JDK7开始HotSpot VM把symbol移到了native memory里，类型名改为Symbol。跟StringTable相似，Symbol的管理也是有一个SymbolTable来管理的。所有Symbol都是interned在SymbolTable里的。同样SymbolTable里只存Symbol*（指向Symbol对象的指针）而不存Symbol自身的内容。<br><a href="#i4"> ↩ </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;在JAVA中，数据的交互存在于以下地方：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;寄存器（register）：&lt;/strong&gt; 位于CPU。&lt;br&gt;&lt;strong&gt;栈（stack）：&lt;/strong&gt; 位于RAM。&lt;br&gt;&lt;strong&gt;堆（heap）：&lt;/strong&gt; 位于RAM。&lt;br&gt;&lt;strong&gt;方法区（PermGen）：&lt;/strong&gt; 位于RAM。&lt;br&gt;&lt;strong&gt;非RAM存储：&lt;/strong&gt; 如硬盘等其它存储空间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;就速度来说，从快到慢依次为： 寄存器 &amp;gt; 栈 &amp;gt; 堆 &amp;gt; 方法区 &amp;gt; 非RAM存储。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JAVA的JVM的内存可分为3个区：&lt;code&gt;栈(stack)&lt;/code&gt;、&lt;code&gt;堆(heap)&lt;/code&gt;和&lt;code&gt;方法区(PermGen)&lt;/code&gt;也叫永久代。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="heap、stack" scheme="maode.github.io/tags/heap%E3%80%81stack/"/>
    
      <category term="堆、栈" scheme="maode.github.io/tags/%E5%A0%86%E3%80%81%E6%A0%88/"/>
    
      <category term="常量池" scheme="maode.github.io/tags/%E5%B8%B8%E9%87%8F%E6%B1%A0/"/>
    
      <category term="String" scheme="maode.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>【转载】Java字节码指令</title>
    <link href="maode.github.io/2017/09/18/170918-java-bytecode/"/>
    <id>maode.github.io/2017/09/18/170918-java-bytecode/</id>
    <published>2017-09-18T13:27:21.000Z</published>
    <updated>2017-09-28T13:54:36.626Z</updated>
    
    <content type="html"><![CDATA[<p>介绍java虚拟机的指令功能，至少能阅读java代码生成的字节码指令含义</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java虚拟机采用基于栈的架构，其指令由操作码和操作数组成。</p>
<ul>
<li>操作码：一个字节长度(0~255)，意味着指令集的操作码个数不能操作256条。</li>
<li>操作数：一条指令可以有零或者多个操作数，且操作数可以是1个或者多个字节。编译后的代码没有采用操作数长度对齐方式，比如16位无符号整数需使用两个字节储存(假设为byte1和byte2)，那么真实值是 <code>(byte1 &lt;&lt; 8) | byte2</code>。</li>
</ul>
<p>放弃操作数对齐操作数对齐方案：</p>
<ul>
<li>优势：可以省略很多填充和间隔符号，从而减少数据量，具有更高的传输效率；Java起初就是为了面向网络、智能家具而设计的，故更加注重传输效率。</li>
<li>劣势：运行时从字节码里构建出具体数据结构，需要花费部分CPU时间，从而导致解释执行字节码会损失部分性能。</li>
</ul>
<a id="more"></a>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>大多数指令包含了其操作所对应的数据类型信息，比如iload，表示从局部变量表中加载int型的数据到操作数栈；而fload表示加载float型数据到操作数栈。由于操作码长度只有1Byte，因此Java虚拟机的指令集对于特定操作只提供有限的类型相关指令，并非为每一种数据类型都有相应的操作指令。必要时，有些指令可用于将不支持的类型转换为可被支持的类型。</p>
<p>对于byte,short,char,boolean类型，往往没有单独的操作码，通过编译器在编译期或者运行期将其扩展。对于byte,short采用带符号扩展，chart,boolean采用零位扩展。相应的数组也是采用类似的扩展方式转换为int类型的字节码来处理。 下面分门别类来介绍Java虚拟机指令，都以int类型的数据操作为例。</p>
<p>栈是指操作数栈</p>
<h3 id="栈操作相关"><a href="#栈操作相关" class="headerlink" title="栈操作相关"></a>栈操作相关</h3><ul>
<li><p>load和store</p>
<ul>
<li>load 命令：用于将局部变量表的指定位置的相应类型变量加载到栈顶；</li>
<li>store命令：用于将栈顶的相应类型数据保入局部变量表的指定位置；</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>变量进栈</th>
<th>含义</th>
<th>变量保存</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>iload</td>
<td>第1个int型变量进栈</td>
<td>istore</td>
<td>栈顶nt数值存入第1局部变量</td>
</tr>
<tr>
<td>iload_0</td>
<td>第1个int型变量进栈</td>
<td>istore_0</td>
<td>栈顶int数值存入第1局部变量</td>
</tr>
<tr>
<td>iload_1</td>
<td>第2个int型变量进栈</td>
<td>istore_1</td>
<td>栈顶int数值存入第2局部变量</td>
</tr>
<tr>
<td>iload_2</td>
<td>第3个int型变量进栈</td>
<td>istore_2</td>
<td>栈顶int数值存入第3局部变量</td>
</tr>
<tr>
<td>iload_3</td>
<td>第4个int型变量进栈</td>
<td>istore_3</td>
<td>栈顶int数值存入第4局部变量</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>lload</td>
<td>第1个long型变量进栈</td>
<td>lstore</td>
<td>栈顶long数值存入第1局部变量</td>
</tr>
<tr>
<td>fload</td>
<td>第1个float型变量进栈</td>
<td>fstore</td>
<td>栈顶float数值存入第1局部变量</td>
</tr>
<tr>
<td>dload</td>
<td>第1个double型变量进栈</td>
<td>dstore</td>
<td>栈顶double数值存入第1局部变量</td>
</tr>
<tr>
<td>aload</td>
<td>第1个ref型变量进栈</td>
<td>astore</td>
<td>栈顶ref对象存入第1局部变量</td>
</tr>
</tbody>
</table>
<ul>
<li><p>const、push和ldc</p>
<ul>
<li>const、push：将相应类型的常量放入栈顶</li>
<li>ldc:则是从常量池中将常量</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>常量进栈</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>aconst_null</td>
<td>null进栈</td>
</tr>
<tr>
<td>iconst_m1</td>
<td>int型常量-1进栈</td>
</tr>
<tr>
<td>iconst_0</td>
<td>int型常量0进栈</td>
</tr>
<tr>
<td>iconst_1</td>
<td>int型常量1进栈</td>
</tr>
<tr>
<td>iconst_2</td>
<td>int型常量2进栈</td>
</tr>
<tr>
<td>iconst_3</td>
<td>int型常量3进栈</td>
</tr>
<tr>
<td>iconst_4</td>
<td>int型常量4进栈</td>
</tr>
<tr>
<td>iconst_5</td>
<td>int型常量5进栈</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>lconst_0</td>
<td>long型常量0进栈</td>
</tr>
<tr>
<td>fconst_0</td>
<td>float型常量0进栈</td>
</tr>
<tr>
<td>dconst_0</td>
<td>double型常量0进栈</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>bipush</td>
<td>byte型常量进栈</td>
</tr>
<tr>
<td>sipush</td>
<td>short型常量进栈</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>常量池操作</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>ldc</td>
<td>int、float或String型常量从常量池推送至栈顶</td>
</tr>
<tr>
<td>ldc_w</td>
<td>int、float或String型常量从常量池推送至栈顶（宽索引）</td>
</tr>
<tr>
<td>ldc2_w</td>
<td>long或double型常量从常量池推送至栈顶（宽索引）</td>
</tr>
</tbody>
</table>
<ul>
<li><p>pop和dup</p>
<ul>
<li>pop用于栈顶数值出栈操作；</li>
<li>dup用于赋值栈顶的指定个数的数值，并将其压入栈顶指定次数；</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>栈顶操作</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>pop</td>
<td>栈顶数值出栈(不能是long/double)</td>
</tr>
<tr>
<td>pop2</td>
<td>栈顶数值出栈(long/double型1个，其他2个)</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>dup</td>
<td>复制栈顶数值，并压入栈顶</td>
</tr>
<tr>
<td>dup_x1</td>
<td>复制栈顶数值，并压入栈顶2次</td>
</tr>
<tr>
<td>dup_x2</td>
<td>复制栈顶数值，并压入栈顶3次</td>
</tr>
<tr>
<td>dup2</td>
<td>复制栈顶2个数值，并压入栈顶</td>
</tr>
<tr>
<td>dup2_x1</td>
<td>复制栈顶2个数值，并压入栈顶2次</td>
</tr>
<tr>
<td>dup2_x2</td>
<td>复制栈顶2个数值，并压入栈顶3次</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>swap</td>
<td>栈顶的两个数值互换，且不能是long/double</td>
</tr>
</tbody>
</table>
<p><strong>注意：dup2</strong>对于long、double类型的数据就是一个，对于其他类型的数据，才是真正的两个，这个的2代表的是2个slot的数据。</p>
<h3 id="对象相关"><a href="#对象相关" class="headerlink" title="对象相关"></a>对象相关</h3><ul>
<li>字段调用</li>
</ul>
<table>
<thead>
<tr>
<th>字段调用</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>getstatic</td>
<td>获取类的静态字段，将其值压入栈顶</td>
</tr>
<tr>
<td>putstatic</td>
<td>给类的静态字段赋值</td>
</tr>
<tr>
<td>getfield</td>
<td>获取对象的字段，将其值压入栈顶</td>
</tr>
<tr>
<td>putfield</td>
<td>给对象的字段赋值</td>
</tr>
</tbody>
</table>
<ul>
<li>方法调用</li>
</ul>
<table>
<thead>
<tr>
<th>方法调用</th>
<th>作用</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>invokevirtual</td>
<td>调用实例方法</td>
<td>虚方法分派</td>
</tr>
<tr>
<td>invokestatic</td>
<td>调用类方法</td>
<td>static方法</td>
</tr>
<tr>
<td>invokeinterface</td>
<td>调用接口方法</td>
<td>运行时搜索合适方法调用</td>
</tr>
<tr>
<td>invokespecial</td>
<td>调用特殊实例方法</td>
<td>包括实例初始化方法、父类方法</td>
</tr>
<tr>
<td>invokedynamic</td>
<td>由用户引导方法决定</td>
<td>运行时动态解析出调用点限定符所引用方法</td>
</tr>
</tbody>
</table>
<ul>
<li>方法返回</li>
</ul>
<table>
<thead>
<tr>
<th>方法返回</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>ireturn</td>
<td>当前方法返回int</td>
</tr>
<tr>
<td>lreturn</td>
<td>当前方法返回long</td>
</tr>
<tr>
<td>freturn</td>
<td>当前方法返回float</td>
</tr>
<tr>
<td>dreturn</td>
<td>当前方法返回double</td>
</tr>
<tr>
<td>areturn</td>
<td>当前方法返回ref</td>
</tr>
</tbody>
</table>
<ul>
<li>对象和数组</li>
</ul>
<ul>
<li>创建类实例： new</li>
<li>创建数组：newarray、anewarray、multianewarray</li>
<li>数组元素 加载到 操作数栈：xaload (x可为b,c,s,i,l,f,d,a)</li>
<li>操作数栈的值 存储到数组元素： xastore (x可为b,c,s,i,l,f,d,a)</li>
<li>数组长度：arraylength</li>
<li>类实例类型：instanceof、checkcast</li>
</ul>
<h3 id="运算指令"><a href="#运算指令" class="headerlink" title="运算指令"></a>运算指令</h3><p>运算指令是用于对操作数栈上的两个数值进行某种运算，并把结果重新存入到操作栈顶。Java虚拟机只支持整型和浮点型两类数据的运算指令，所有指令如下：</p>
<table>
<thead>
<tr>
<th>运算</th>
<th>int</th>
<th>long</th>
<th>float</th>
<th>double</th>
</tr>
</thead>
<tbody>
<tr>
<td>加法</td>
<td>iadd</td>
<td>ladd</td>
<td>fadd</td>
<td>dadd</td>
</tr>
<tr>
<td>减法</td>
<td>isub</td>
<td>lsub</td>
<td>fsub</td>
<td>dsub</td>
</tr>
<tr>
<td>乘法</td>
<td>imul</td>
<td>lmul</td>
<td>fmul</td>
<td>dmul</td>
</tr>
<tr>
<td>除法</td>
<td>idiv</td>
<td>ldiv</td>
<td>fdiv</td>
<td>ddiv</td>
</tr>
<tr>
<td>求余</td>
<td>irem</td>
<td>lrem</td>
<td>frem</td>
<td>drem</td>
</tr>
<tr>
<td>取反</td>
<td>ineg</td>
<td>lneg</td>
<td>fneg</td>
<td>dneg</td>
</tr>
</tbody>
</table>
<p><strong>其他运算：</strong></p>
<ul>
<li>位移：ishl,ishr,iushr,lshl,lshr,lushr</li>
<li>按位或： ior,lor</li>
<li>按位与： iand, land</li>
<li>按位异或： ixor, lxor</li>
<li>自增：iin</li>
<li>比较：dcmpg,dcmpl,fcmpg,fcmpl,lcmp</li>
</ul>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>类型转换用于将两种不同类型的数值进行转换。</p>
<p>(1) 对于宽化类型转换(小范围向大范围转换)，无需显式的转换指令，并且是安全的操作。各种范围从小到大依次排序： int, long, float, double。</p>
<p>(2)对于窄化类型转换，必须显式地调用类型转换指令，并且该过程很可能导致精度丢失。转换规则中需要特别注意的是当浮点值为NaN, 则转换结果为int或long的0。虽然窄化运算可能会发生上/下限溢出和精度丢失等情况，但虚拟机规范明确规定窄化转换U不可能导致虚拟机抛出异常。</p>
<p>类型转换指令：<code>i2b, i2c,f2i</code>等等。</p>
<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>控制指令是指有条件或无条件地修改PC寄存器的值，从而达到控制流程的目标</p>
<ul>
<li>条件分支：ifeq、iflt、ifnull、ifnonnull等</li>
<li>复合分支：tableswitch、lookupswitch</li>
<li>无条件分支：goto、goto_w、jsr、jsr_w、ret</li>
</ul>
<h3 id="同步与异常"><a href="#同步与异常" class="headerlink" title="同步与异常"></a>同步与异常</h3><p><strong>异常：</strong></p>
<p>Java程序显式抛出异常： athrow指令。在Java虚拟机中，处理异常(catch语句)不是由字节码指令来实现，而是采用异常表来完成。</p>
<p><strong>同步：</strong></p>
<p>方法级的同步和方法内部分代码的同步，都是依靠管程(Monitor)来实现的。</p>
<p>Java语言使用synchronized语句块，那么Java虚拟机的指令集中通过monitorenter和monitorexit两条指令来完成synchronized的功能。为了保证monitorenter和monitorexit指令一定能成对的调用（不管方法正常结束还是异常结束），编译器会自动生成一个异常处理器，该异常处理器的主要目的是用于执行monitorexit指令。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>在基于堆栈的的虚拟机中，指令的主战场便是操作数栈，除了load是从局部变量表加载数据到操作数栈以及store储存数据到局部变量表，其余指令基本都是用于操作数栈的。</p>
<p>本文转载自：<a href="http://gityuan.com/2015/10/24/jvm-bytecode-grammar/" target="_blank" rel="external">http://gityuan.com/2015/10/24/jvm-bytecode-grammar/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍java虚拟机的指令功能，至少能阅读java代码生成的字节码指令含义&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Java虚拟机采用基于栈的架构，其指令由操作码和操作数组成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作码：一个字节长度(0~255)，意味着指令集的操作码个数不能操作256条。&lt;/li&gt;
&lt;li&gt;操作数：一条指令可以有零或者多个操作数，且操作数可以是1个或者多个字节。编译后的代码没有采用操作数长度对齐方式，比如16位无符号整数需使用两个字节储存(假设为byte1和byte2)，那么真实值是 &lt;code&gt;(byte1 &amp;lt;&amp;lt; 8) | byte2&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;放弃操作数对齐操作数对齐方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优势：可以省略很多填充和间隔符号，从而减少数据量，具有更高的传输效率；Java起初就是为了面向网络、智能家具而设计的，故更加注重传输效率。&lt;/li&gt;
&lt;li&gt;劣势：运行时从字节码里构建出具体数据结构，需要花费部分CPU时间，从而导致解释执行字节码会损失部分性能。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="bytecode" scheme="maode.github.io/tags/bytecode/"/>
    
      <category term="jvm" scheme="maode.github.io/tags/jvm/"/>
    
  </entry>
  
</feed>
